
DIH_H5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800200  00001ace  00001b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  008003e8  008003e8  00001d4a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d4a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003388  00000000  00000000  00002090  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001886  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001b89  00000000  00000000  00006c9e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000006c8  00000000  00000000  00008828  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000e1b  00000000  00000000  00008ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001cbf  00000000  00000000  00009d0b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000b9ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	b4 c4       	rjmp	.+2408   	; 0x9fa <__vector_36>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee ec       	ldi	r30, 0xCE	; 206
      fc:	fa e1       	ldi	r31, 0x1A	; 26
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3e       	cpi	r26, 0xE8	; 232
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a8 ee       	ldi	r26, 0xE8	; 232
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 39       	cpi	r26, 0x92	; 146
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	9d d0       	rcall	.+314    	; 0x25a <main>
     120:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <Init>:

void Init(void)
{
	/* Matrix Keyboard */
	// Column sat til høj
	DDRK |= (1<<PK0);
     126:	e7 e0       	ldi	r30, 0x07	; 7
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	80 81       	ld	r24, Z
     12c:	81 60       	ori	r24, 0x01	; 1
     12e:	80 83       	st	Z, r24
	DDRK |= (1<<PK1);
     130:	80 81       	ld	r24, Z
     132:	82 60       	ori	r24, 0x02	; 2
     134:	80 83       	st	Z, r24
	DDRK |= (1<<PK2);
     136:	80 81       	ld	r24, Z
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	80 83       	st	Z, r24
	DDRK |= (1<<PK3);
     13c:	80 81       	ld	r24, Z
     13e:	88 60       	ori	r24, 0x08	; 8
     140:	80 83       	st	Z, r24

	// Row sat til input
	PORTK |= (1<<PK4);
     142:	e8 e0       	ldi	r30, 0x08	; 8
     144:	f1 e0       	ldi	r31, 0x01	; 1
     146:	80 81       	ld	r24, Z
     148:	80 61       	ori	r24, 0x10	; 16
     14a:	80 83       	st	Z, r24
	PORTK |= (1<<PK5);
     14c:	80 81       	ld	r24, Z
     14e:	80 62       	ori	r24, 0x20	; 32
     150:	80 83       	st	Z, r24
	PORTK |= (1<<PK6);
     152:	80 81       	ld	r24, Z
     154:	80 64       	ori	r24, 0x40	; 64
     156:	80 83       	st	Z, r24
	PORTK |= (1<<PK7);
     158:	80 81       	ld	r24, Z
     15a:	80 68       	ori	r24, 0x80	; 128
     15c:	80 83       	st	Z, r24
     15e:	08 95       	ret

00000160 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR1A & (1 << RXC1)));					/* Wait until new data receive */
	return(UDR1);									/* Get and return received data */ 
}
     160:	e8 ec       	ldi	r30, 0xC8	; 200
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	20 81       	ld	r18, Z
     166:	22 60       	ori	r18, 0x02	; 2
     168:	20 83       	st	Z, r18
     16a:	e9 ec       	ldi	r30, 0xC9	; 201
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	20 81       	ld	r18, Z
     170:	28 69       	ori	r18, 0x98	; 152
     172:	20 83       	st	Z, r18
     174:	ea ec       	ldi	r30, 0xCA	; 202
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	20 81       	ld	r18, Z
     17a:	24 60       	ori	r18, 0x04	; 4
     17c:	20 83       	st	Z, r18
     17e:	a8 d6       	rcall	.+3408   	; 0xed0 <__floatunsisf>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	51 e4       	ldi	r21, 0x41	; 65
     188:	35 d7       	rcall	.+3690   	; 0xff4 <__mulsf3>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	74 e2       	ldi	r23, 0x24	; 36
     192:	84 e7       	ldi	r24, 0x74	; 116
     194:	9b e4       	ldi	r25, 0x4B	; 75
     196:	03 d6       	rcall	.+3078   	; 0xd9e <__divsf3>
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e8       	ldi	r20, 0x80	; 128
     19e:	5f e3       	ldi	r21, 0x3F	; 63
     1a0:	99 d5       	rcall	.+2866   	; 0xcd4 <__subsf3>
     1a2:	8b d7       	rcall	.+3862   	; 0x10ba <round>
     1a4:	64 d6       	rcall	.+3272   	; 0xe6e <__fixsfsi>
     1a6:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     1aa:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     1ae:	08 95       	ret

000001b0 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR1 = data;										/* Write data to be transmitting in UDR */
     1b0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	while (!(UCSR1A & (1<<UDRE1)));					/* Wait until data transmit and buffer get empty */
     1b4:	e8 ec       	ldi	r30, 0xC8	; 200
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	85 ff       	sbrs	r24, 5
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <USART_TxChar+0x8>
}
     1be:	08 95       	ret

000001c0 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     1c6:	88 81       	ld	r24, Y
     1c8:	88 23       	and	r24, r24
     1ca:	29 f0       	breq	.+10     	; 0x1d6 <USART_SendString+0x16>
     1cc:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     1ce:	f0 df       	rcall	.-32     	; 0x1b0 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     1d0:	89 91       	ld	r24, Y+
     1d2:	81 11       	cpse	r24, r1
     1d4:	fc cf       	rjmp	.-8      	; 0x1ce <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <Menu_choices>:
	
}

void Menu_choices(void)												/* Viser menuen på LCD displayet */
{
	Pre_display();
     1dc:	0e 94 44 0a 	call	0x1488	; 0x1488 <Pre_display>
	
	lcd_puts("Date");
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <lcd_puts>
	lcd_gotoxy(10,0);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	8a e0       	ldi	r24, 0x0A	; 10
     1ec:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <lcd_gotoxy>
	lcd_puts(": A\n");
     1f0:	85 e0       	ldi	r24, 0x05	; 5
     1f2:	92 e0       	ldi	r25, 0x02	; 2
     1f4:	0e 94 f6 09 	call	0x13ec	; 0x13ec <lcd_puts>
	lcd_puts("Temperatur: B");
     1f8:	8a e0       	ldi	r24, 0x0A	; 10
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	0e 94 f6 09 	call	0x13ec	; 0x13ec <lcd_puts>
	lcd_gotoxy(15, 1);
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	8f e0       	ldi	r24, 0x0F	; 15
     204:	0c 94 d9 09 	jmp	0x13b2	; 0x13b2 <lcd_gotoxy>
     208:	08 95       	ret

0000020a <Menu_decoder>:

void Menu_decoder(int column, int row)								/* Decoder, til valg i menuen. Dette er brugt fra det tidligere projekt, hvor det var meningen at man skulle måle afstand, */
{																	/* det kom dsv. ikke til at ske, og i dette projekt, ligesom det tidligere, bliver det kun brugt til temperatur */
	unsigned int chosen = column + row;
	
	switch (chosen)
     20a:	86 0f       	add	r24, r22
     20c:	97 1f       	adc	r25, r23
     20e:	82 32       	cpi	r24, 0x22	; 34
     210:	91 05       	cpc	r25, r1
     212:	21 f0       	breq	.+8      	; 0x21c <Menu_decoder+0x12>
     214:	8c 97       	sbiw	r24, 0x2c	; 44
     216:	19 f4       	brne	.+6      	; 0x21e <Menu_decoder+0x14>
	{
		case 44:
		main();														/* Hvis "A" knappen er valgt bliver brugeren smidt tilbage til menuen */
     218:	20 c0       	rjmp	.+64     	; 0x25a <main>
		break;
		
		case 34:
		Temperatur();												/* Hvis "B" knappen er valgt bliver brugeren smidt til temperatur menuen */
     21a:	08 95       	ret
     21c:	3b c5       	rjmp	.+2678   	; 0xc94 <Temperatur>
     21e:	08 95       	ret

00000220 <Menu>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	83 ed       	ldi	r24, 0xD3	; 211
     224:	90 e3       	ldi	r25, 0x30	; 48
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <Menu+0x6>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <Menu+0x10>
     230:	00 00       	nop
{
	_delay_ms(1000);
	unsigned int column = 1;
	unsigned int row = 90;
	
	Menu_choices();
     232:	d4 df       	rcall	.-88     	; 0x1dc <Menu_choices>
}

void Menu(void)
{
	_delay_ms(1000);
	unsigned int column = 1;
     234:	c1 e0       	ldi	r28, 0x01	; 1
     236:	d0 e0       	ldi	r29, 0x00	; 0
	
	Menu_choices();
	
	while (1)													   /* While løkke som kører indtil brugeren har entent trykket på "A" eller "B" knappen */
	{
		column = ColumnScan(column);
     238:	ce 01       	movw	r24, r28
     23a:	ac d7       	rcall	.+3928   	; 0x1194 <ColumnScan>
		row = ReadRow();
     23c:	ec 01       	movw	r28, r24
     23e:	e0 d7       	rcall	.+4032   	; 0x1200 <ReadRow>
		
		Menu_decoder(column, row);
     240:	bc 01       	movw	r22, r24
     242:	ce 01       	movw	r24, r28
     244:	e2 df       	rcall	.-60     	; 0x20a <Menu_decoder>
     246:	2f e7       	ldi	r18, 0x7F	; 127
     248:	88 e3       	ldi	r24, 0x38	; 56
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	21 50       	subi	r18, 0x01	; 1
     24e:	80 40       	sbci	r24, 0x00	; 0
     250:	90 40       	sbci	r25, 0x00	; 0
     252:	e1 f7       	brne	.-8      	; 0x24c <Menu+0x2c>
     254:	00 c0       	rjmp	.+0      	; 0x256 <Menu+0x36>
     256:	00 00       	nop
     258:	ef cf       	rjmp	.-34     	; 0x238 <Menu+0x18>

0000025a <main>:
#include "DS3231/ds3231.h"


int main(void)
{
	Init();															/* Brugerdefineret initialiseringer */
     25a:	65 df       	rcall	.-310    	; 0x126 <Init>
	//i2c_init();													/* Initialisere I2C, BLIVER IKKE BRUGT */
	//init_ds3231();												/* Initialisere DS3231, BLIVER IKKE BRUGT */
	USART_Init(115200);												/* Initialisere USART og sætter BAUD raten til 115200 */
     25c:	60 e0       	ldi	r22, 0x00	; 0
     25e:	72 ec       	ldi	r23, 0xC2	; 194
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	90 e0       	ldi	r25, 0x00	; 0
     264:	7d df       	rcall	.-262    	; 0x160 <USART_Init>
	sei();															/* Starter global interrupt */
     266:	78 94       	sei
	
	
    while (1) 
    {
		Menu();														/* Kører methoden Menu(), som viser og gør at brugeren har en menu som kan bruges */
     268:	db df       	rcall	.-74     	; 0x220 <Menu>

0000026a <DHT_WakeUp>:
     26a:	2b 98       	cbi	0x05, 3	; 5
#include <stdio.h>

void DHT_WakeUp(void)
{
	clear_bit(DHT_PORT, DHT_BIT);											/* Sætter biten til OUTPUT */
	set_bit(DHT_DDR, DHT_BIT);												/* Sætter biten til logisk HØJ */
     26c:	23 9a       	sbi	0x04, 3	; 4
     26e:	2f ef       	ldi	r18, 0xFF	; 255
     270:	80 ee       	ldi	r24, 0xE0	; 224
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	21 50       	subi	r18, 0x01	; 1
     276:	80 40       	sbci	r24, 0x00	; 0
     278:	90 40       	sbci	r25, 0x00	; 0
     27a:	e1 f7       	brne	.-8      	; 0x274 <DHT_WakeUp+0xa>
     27c:	00 c0       	rjmp	.+0      	; 0x27e <DHT_WakeUp+0x14>
     27e:	00 00       	nop
	_delay_ms(18);															/* Venter 18 mikrosekunder for at give bedsked til DHT11'eren at der sker noget */
	set_bit(DHT_PORT, DHT_BIT);												/* Sætter biten til logisk LAV */
     280:	2b 9a       	sbi	0x05, 3	; 5
	clear_bit(DHT_DDR, DHT_BIT);											/* Sætter biten til INPUT */
     282:	23 98       	cbi	0x04, 3	; 4
     284:	08 95       	ret

00000286 <DHT_Response>:
}

int DHT_Response(void)
{
     286:	cf 92       	push	r12
     288:	df 92       	push	r13
     28a:	ef 92       	push	r14
     28c:	ff 92       	push	r15
	double counter = 0;
     28e:	c1 2c       	mov	r12, r1
     290:	d1 2c       	mov	r13, r1
     292:	76 01       	movw	r14, r12
	
	while(bit_is_set(DHT_PIN, DHT_BIT))										/* Venter på at DHT11'eren giver svar */
     294:	14 c0       	rjmp	.+40     	; 0x2be <DHT_Response+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     296:	8a e0       	ldi	r24, 0x0A	; 10
     298:	8a 95       	dec	r24
     29a:	f1 f7       	brne	.-4      	; 0x298 <DHT_Response+0x12>
     29c:	00 c0       	rjmp	.+0      	; 0x29e <DHT_Response+0x18>
	{
		_delay_us(2);
		counter += 2;
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	30 e0       	ldi	r19, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e4       	ldi	r21, 0x40	; 64
     2a6:	c7 01       	movw	r24, r14
     2a8:	b6 01       	movw	r22, r12
     2aa:	15 d5       	rcall	.+2602   	; 0xcd6 <__addsf3>
     2ac:	6b 01       	movw	r12, r22
     2ae:	7c 01       	movw	r14, r24
		
		if (counter >= 60)													/* Hvis det tager over 60 mikrosekunder og DHT11'eren ikke svarer, sker der en connection timeout, derefter bliver der returneret 0 */
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	30 e0       	ldi	r19, 0x00	; 0
     2b4:	40 e7       	ldi	r20, 0x70	; 112
     2b6:	52 e4       	ldi	r21, 0x42	; 66
     2b8:	99 d6       	rcall	.+3378   	; 0xfec <__gesf2>
     2ba:	88 23       	and	r24, r24
     2bc:	3c f4       	brge	.+14     	; 0x2cc <DHT_Response+0x46>

int DHT_Response(void)
{
	double counter = 0;
	
	while(bit_is_set(DHT_PIN, DHT_BIT))										/* Venter på at DHT11'eren giver svar */
     2be:	1b 99       	sbic	0x03, 3	; 3
     2c0:	ea cf       	rjmp	.-44     	; 0x296 <DHT_Response+0x10>
		{
			return 0;
		}
	}
	
	while(bit_is_clear(DHT_PIN, DHT_BIT))									/* Venter på at DHT11'eren er færdig med at give et svar */
     2c2:	1b 9b       	sbis	0x03, 3	; 3
     2c4:	fe cf       	rjmp	.-4      	; 0x2c2 <DHT_Response+0x3c>
	{
		
	}
	
	while(bit_is_set(DHT_PIN, DHT_BIT))										/* Når DHT11'eren har svaret bliver der retuneret 1 */
     2c6:	1b 99       	sbic	0x03, 3	; 3
     2c8:	04 c0       	rjmp	.+8      	; 0x2d2 <DHT_Response+0x4c>
	{
		return 1;
	}
}
     2ca:	05 c0       	rjmp	.+10     	; 0x2d6 <DHT_Response+0x50>
		_delay_us(2);
		counter += 2;
		
		if (counter >= 60)													/* Hvis det tager over 60 mikrosekunder og DHT11'eren ikke svarer, sker der en connection timeout, derefter bliver der returneret 0 */
		{
			return 0;
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DHT_Response+0x50>
		
	}
	
	while(bit_is_set(DHT_PIN, DHT_BIT))										/* Når DHT11'eren har svaret bliver der retuneret 1 */
	{
		return 1;
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     2d6:	ff 90       	pop	r15
     2d8:	ef 90       	pop	r14
     2da:	df 90       	pop	r13
     2dc:	cf 90       	pop	r12
     2de:	08 95       	ret

000002e0 <DHT_Decode_Data>:

//Decodes the data that the DHT11 sends to the MCU
void DHT_Decode_Data(int (*array)[8])
{
     2e0:	cf 93       	push	r28
	while(bit_is_set(DHT_PIN, DHT_BIT))										/* Venter på at DHT11'ereb sender data */
     2e2:	02 c0       	rjmp	.+4      	; 0x2e8 <DHT_Decode_Data+0x8>
	{
		if(bit_is_clear(DHT_PIN, DHT_BIT))									/* Stopper while løkken når der ikke er mere at sende */
     2e4:	1b 9b       	sbis	0x03, 3	; 3
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DHT_Decode_Data+0xc>
}

//Decodes the data that the DHT11 sends to the MCU
void DHT_Decode_Data(int (*array)[8])
{
	while(bit_is_set(DHT_PIN, DHT_BIT))										/* Venter på at DHT11'ereb sender data */
     2e8:	1b 99       	sbic	0x03, 3	; 3
     2ea:	fc cf       	rjmp	.-8      	; 0x2e4 <DHT_Decode_Data+0x4>
     2ec:	dc 01       	movw	r26, r24
     2ee:	80 5b       	subi	r24, 0xB0	; 176
     2f0:	9f 4f       	sbci	r25, 0xFF	; 255
				array[i][j] = 0;
			}
			
			if (timer > 60)													/* Hvis biten er logisk høj i mere end 60 us*/
			{
				array[i][j] = 1;
     2f2:	61 e0       	ldi	r22, 0x01	; 1
     2f4:	70 e0       	ldi	r23, 0x00	; 0
     2f6:	25 c0       	rjmp	.+74     	; 0x342 <DHT_Decode_Data+0x62>
													
		for (j = 0; j < 8; j++)												/* Looper igennem hvert enkelt bit */
		{
			int timer = 0;
			
			while(bit_is_clear(DHT_PIN, DHT_BIT))							/* Mens biten er logisk LAV */
     2f8:	1b 9b       	sbis	0x03, 3	; 3
     2fa:	fe cf       	rjmp	.-4      	; 0x2f8 <DHT_Decode_Data+0x18>
			{
				
			}
						
			while(bit_is_set(DHT_PIN, DHT_BIT))								/* Mens biten er logisk HØJ, begynd timer */
     2fc:	1b 9b       	sbis	0x03, 3	; 3
     2fe:	0e c0       	rjmp	.+28     	; 0x31c <DHT_Decode_Data+0x3c>
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	ca e0       	ldi	r28, 0x0A	; 10
     306:	ca 95       	dec	r28
     308:	f1 f7       	brne	.-4      	; 0x306 <DHT_Decode_Data+0x26>
     30a:	00 c0       	rjmp	.+0      	; 0x30c <DHT_Decode_Data+0x2c>
			{
				_delay_us(2);
				timer += 2;
     30c:	2e 5f       	subi	r18, 0xFE	; 254
     30e:	3f 4f       	sbci	r19, 0xFF	; 255
			while(bit_is_clear(DHT_PIN, DHT_BIT))							/* Mens biten er logisk LAV */
			{
				
			}
						
			while(bit_is_set(DHT_PIN, DHT_BIT))								/* Mens biten er logisk HØJ, begynd timer */
     310:	1b 99       	sbic	0x03, 3	; 3
     312:	f8 cf       	rjmp	.-16     	; 0x304 <DHT_Decode_Data+0x24>
			{
				_delay_us(2);
				timer += 2;
			}
			
			if (timer < 23 || timer == NULL)								/* Hvis biten er logisk høj i mindre end 23 mikrosekunder */
     314:	27 31       	cpi	r18, 0x17	; 23
     316:	31 05       	cpc	r19, r1
     318:	34 f4       	brge	.+12     	; 0x326 <DHT_Decode_Data+0x46>
     31a:	02 c0       	rjmp	.+4      	; 0x320 <DHT_Decode_Data+0x40>
			while(bit_is_clear(DHT_PIN, DHT_BIT))							/* Mens biten er logisk LAV */
			{
				
			}
						
			while(bit_is_set(DHT_PIN, DHT_BIT))								/* Mens biten er logisk HØJ, begynd timer */
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
				timer += 2;
			}
			
			if (timer < 23 || timer == NULL)								/* Hvis biten er logisk høj i mindre end 23 mikrosekunder */
			{
				array[i][j] = 0;
     320:	11 96       	adiw	r26, 0x01	; 1
     322:	1c 92       	st	X, r1
     324:	1e 92       	st	-X, r1
			}
			
			if (timer > 60)													/* Hvis biten er logisk høj i mere end 60 us*/
     326:	2d 33       	cpi	r18, 0x3D	; 61
     328:	31 05       	cpc	r19, r1
     32a:	14 f0       	brlt	.+4      	; 0x330 <DHT_Decode_Data+0x50>
			{
				array[i][j] = 1;
     32c:	71 83       	std	Z+1, r23	; 0x01
     32e:	60 83       	st	Z, r22
     330:	32 96       	adiw	r30, 0x02	; 2
     332:	12 96       	adiw	r26, 0x02	; 2
	int j;
													
	for (i = 0; i < 5; i++)													/* Looper igennem hvert enkelt byte */
	{
													
		for (j = 0; j < 8; j++)												/* Looper igennem hvert enkelt bit */
     334:	4e 17       	cp	r20, r30
     336:	5f 07       	cpc	r21, r31
     338:	f9 f6       	brne	.-66     	; 0x2f8 <DHT_Decode_Data+0x18>
     33a:	da 01       	movw	r26, r20
	}
	
	int i;
	int j;
													
	for (i = 0; i < 5; i++)													/* Looper igennem hvert enkelt byte */
     33c:	48 17       	cp	r20, r24
     33e:	59 07       	cpc	r21, r25
     340:	29 f0       	breq	.+10     	; 0x34c <DHT_Decode_Data+0x6c>
     342:	ad 01       	movw	r20, r26
     344:	40 5f       	subi	r20, 0xF0	; 240
     346:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}

//Decodes the data that the DHT11 sends to the MCU
void DHT_Decode_Data(int (*array)[8])
{
     348:	fd 01       	movw	r30, r26
     34a:	d6 cf       	rjmp	.-84     	; 0x2f8 <DHT_Decode_Data+0x18>
			{
				array[i][j] = 1;
			}
		}
	}
}
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <ConvertToDecimal>:
{
	int multiplier = 1, output = 0;
	//Runs through each bit in the selected byte LSB First
	for(int i = 7; i >= 0; i--)
	{
		output += (multiplier * array[byte - 1][i]);
     350:	ab 01       	movw	r20, r22
     352:	41 50       	subi	r20, 0x01	; 1
     354:	50 4f       	sbci	r21, 0xF0	; 240
     356:	42 95       	swap	r20
     358:	52 95       	swap	r21
     35a:	50 7f       	andi	r21, 0xF0	; 240
     35c:	54 27       	eor	r21, r20
     35e:	40 7f       	andi	r20, 0xF0	; 240
     360:	54 27       	eor	r21, r20
     362:	84 0f       	add	r24, r20
     364:	95 1f       	adc	r25, r21
     366:	fc 01       	movw	r30, r24
     368:	70 96       	adiw	r30, 0x10	; 16
     36a:	ac 01       	movw	r20, r24
}

//Converts the bytes in the array to Decimal
int ConvertToDecimal(int (*array)[8], int byte)
{
	int multiplier = 1, output = 0;
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	90 e0       	ldi	r25, 0x00	; 0
     370:	21 e0       	ldi	r18, 0x01	; 1
     372:	30 e0       	ldi	r19, 0x00	; 0
	//Runs through each bit in the selected byte LSB First
	for(int i = 7; i >= 0; i--)
	{
		output += (multiplier * array[byte - 1][i]);
     374:	b2 91       	ld	r27, -Z
     376:	a2 91       	ld	r26, -Z
     378:	2a 9f       	mul	r18, r26
     37a:	b0 01       	movw	r22, r0
     37c:	2b 9f       	mul	r18, r27
     37e:	70 0d       	add	r23, r0
     380:	3a 9f       	mul	r19, r26
     382:	70 0d       	add	r23, r0
     384:	11 24       	eor	r1, r1
     386:	86 0f       	add	r24, r22
     388:	97 1f       	adc	r25, r23
		//Decides what the bit will be multiplied by: 1->2->4->8->16->32->64->128
		multiplier *= 2;
     38a:	22 0f       	add	r18, r18
     38c:	33 1f       	adc	r19, r19
//Converts the bytes in the array to Decimal
int ConvertToDecimal(int (*array)[8], int byte)
{
	int multiplier = 1, output = 0;
	//Runs through each bit in the selected byte LSB First
	for(int i = 7; i >= 0; i--)
     38e:	e4 17       	cp	r30, r20
     390:	f5 07       	cpc	r31, r21
     392:	81 f7       	brne	.-32     	; 0x374 <ConvertToDecimal+0x24>
		output += (multiplier * array[byte - 1][i]);
		//Decides what the bit will be multiplied by: 1->2->4->8->16->32->64->128
		multiplier *= 2;
	}
	return output;
     394:	08 95       	ret

00000396 <Read_Response>:
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
	return len;
}
     396:	2f 92       	push	r2
     398:	3f 92       	push	r3
     39a:	4f 92       	push	r4
     39c:	5f 92       	push	r5
     39e:	6f 92       	push	r6
     3a0:	7f 92       	push	r7
     3a2:	8f 92       	push	r8
     3a4:	9f 92       	push	r9
     3a6:	af 92       	push	r10
     3a8:	bf 92       	push	r11
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	0f 93       	push	r16
     3b4:	1f 93       	push	r17
     3b6:	cf 93       	push	r28
     3b8:	df 93       	push	r29
     3ba:	cd b7       	in	r28, 0x3d	; 61
     3bc:	de b7       	in	r29, 0x3e	; 62
     3be:	2c 97       	sbiw	r28, 0x0c	; 12
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	de bf       	out	0x3e, r29	; 62
     3c6:	0f be       	out	0x3f, r0	; 63
     3c8:	cd bf       	out	0x3d, r28	; 61
     3ca:	9e 83       	std	Y+6, r25	; 0x06
     3cc:	8d 83       	std	Y+5, r24	; 0x05
     3ce:	2d b7       	in	r18, 0x3d	; 61
     3d0:	3e b7       	in	r19, 0x3e	; 62
     3d2:	3c 87       	std	Y+12, r19	; 0x0c
     3d4:	2b 87       	std	Y+11, r18	; 0x0b
     3d6:	fc 01       	movw	r30, r24
     3d8:	01 90       	ld	r0, Z+
     3da:	00 20       	and	r0, r0
     3dc:	e9 f7       	brne	.-6      	; 0x3d8 <Read_Response+0x42>
     3de:	31 97       	sbiw	r30, 0x01	; 1
     3e0:	5f 01       	movw	r10, r30
     3e2:	a8 1a       	sub	r10, r24
     3e4:	b9 0a       	sbc	r11, r25
     3e6:	bb 24       	eor	r11, r11
     3e8:	a5 01       	movw	r20, r10
     3ea:	41 50       	subi	r20, 0x01	; 1
     3ec:	51 09       	sbc	r21, r1
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	4f 83       	std	Y+7, r20	; 0x07
     3f2:	8d b7       	in	r24, 0x3d	; 61
     3f4:	9e b7       	in	r25, 0x3e	; 62
     3f6:	8a 19       	sub	r24, r10
     3f8:	9b 09       	sbc	r25, r11
     3fa:	0f b6       	in	r0, 0x3f	; 63
     3fc:	f8 94       	cli
     3fe:	9e bf       	out	0x3e, r25	; 62
     400:	0f be       	out	0x3f, r0	; 63
     402:	8d bf       	out	0x3d, r24	; 61
     404:	ad b7       	in	r26, 0x3d	; 61
     406:	be b7       	in	r27, 0x3e	; 62
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	4d 01       	movw	r8, r26
     40c:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
     410:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <__data_end+0x1>
     414:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <__data_end+0x2>
     418:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <__data_end+0x3>
     41c:	80 3f       	cpi	r24, 0xF0	; 240
     41e:	98 4d       	sbci	r25, 0xD8	; 216
     420:	af 4f       	sbci	r26, 0xFF	; 255
     422:	bf 4f       	sbci	r27, 0xFF	; 255
     424:	61 f4       	brne	.+24     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     426:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
     42a:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__data_end+0x1>
     42e:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <__data_end+0x2>
     432:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <__data_end+0x3>
     436:	82 e0       	ldi	r24, 0x02	; 2
     438:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Response_Status>
     43c:	99 c0       	rjmp	.+306    	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     43e:	19 82       	std	Y+1, r1	; 0x01
     440:	1a 82       	std	Y+2, r1	; 0x02
     442:	1b 82       	std	Y+3, r1	; 0x03
     444:	1c 82       	std	Y+4, r1	; 0x04
     446:	2f 80       	ldd	r2, Y+7	; 0x07
     448:	38 84       	ldd	r3, Y+8	; 0x08
     44a:	28 0c       	add	r2, r8
     44c:	39 1c       	adc	r3, r9
     44e:	94 01       	movw	r18, r8
     450:	2f 5f       	subi	r18, 0xFF	; 255
     452:	3f 4f       	sbci	r19, 0xFF	; 255
     454:	3a 87       	std	Y+10, r19	; 0x0a
     456:	29 87       	std	Y+9, r18	; 0x09
     458:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     45c:	84 30       	cpi	r24, 0x04	; 4
     45e:	11 f4       	brne	.+4      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     460:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <Response_Status>
     464:	e0 ef       	ldi	r30, 0xF0	; 240
     466:	f3 e0       	ldi	r31, 0x03	; 3
     468:	01 90       	ld	r0, Z+
     46a:	00 20       	and	r0, r0
     46c:	e9 f7       	brne	.-6      	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
     46e:	31 97       	sbiw	r30, 0x01	; 1
     470:	cf 01       	movw	r24, r30
     472:	80 5f       	subi	r24, 0xF0	; 240
     474:	93 40       	sbci	r25, 0x03	; 3
     476:	6c 01       	movw	r12, r24
     478:	e1 2c       	mov	r14, r1
     47a:	f1 2c       	mov	r15, r1
     47c:	c1 14       	cp	r12, r1
     47e:	d1 04       	cpc	r13, r1
     480:	e1 04       	cpc	r14, r1
     482:	f1 04       	cpc	r15, r1
     484:	09 f4       	brne	.+2      	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     486:	4f c0       	rjmp	.+158    	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     488:	8f e9       	ldi	r24, 0x9F	; 159
     48a:	9f e0       	ldi	r25, 0x0F	; 15
     48c:	01 97       	sbiw	r24, 0x01	; 1
     48e:	f1 f7       	brne	.-4      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     490:	00 c0       	rjmp	.+0      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     492:	00 00       	nop
     494:	29 81       	ldd	r18, Y+1	; 0x01
     496:	3a 81       	ldd	r19, Y+2	; 0x02
     498:	4b 81       	ldd	r20, Y+3	; 0x03
     49a:	5c 81       	ldd	r21, Y+4	; 0x04
     49c:	2f 5f       	subi	r18, 0xFF	; 255
     49e:	3f 4f       	sbci	r19, 0xFF	; 255
     4a0:	4f 4f       	sbci	r20, 0xFF	; 255
     4a2:	5f 4f       	sbci	r21, 0xFF	; 255
     4a4:	29 83       	std	Y+1, r18	; 0x01
     4a6:	3a 83       	std	Y+2, r19	; 0x02
     4a8:	4b 83       	std	Y+3, r20	; 0x03
     4aa:	5c 83       	std	Y+4, r21	; 0x04
     4ac:	e0 ef       	ldi	r30, 0xF0	; 240
     4ae:	f3 e0       	ldi	r31, 0x03	; 3
     4b0:	01 90       	ld	r0, Z+
     4b2:	00 20       	and	r0, r0
     4b4:	e9 f7       	brne	.-6      	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     4b6:	31 97       	sbiw	r30, 0x01	; 1
     4b8:	cf 01       	movw	r24, r30
     4ba:	80 5f       	subi	r24, 0xF0	; 240
     4bc:	93 40       	sbci	r25, 0x03	; 3
     4be:	a0 e0       	ldi	r26, 0x00	; 0
     4c0:	b0 e0       	ldi	r27, 0x00	; 0
     4c2:	c8 16       	cp	r12, r24
     4c4:	d9 06       	cpc	r13, r25
     4c6:	ea 06       	cpc	r14, r26
     4c8:	fb 06       	cpc	r15, r27
     4ca:	69 f5       	brne	.+90     	; 0x526 <__LOCK_REGION_LENGTH__+0x126>
     4cc:	00 ef       	ldi	r16, 0xF0	; 240
     4ce:	13 e0       	ldi	r17, 0x03	; 3
     4d0:	41 2c       	mov	r4, r1
     4d2:	51 2c       	mov	r5, r1
     4d4:	32 01       	movw	r6, r4
     4d6:	4f 81       	ldd	r20, Y+7	; 0x07
     4d8:	58 85       	ldd	r21, Y+8	; 0x08
     4da:	69 85       	ldd	r22, Y+9	; 0x09
     4dc:	7a 85       	ldd	r23, Y+10	; 0x0a
     4de:	c4 01       	movw	r24, r8
     4e0:	e0 d7       	rcall	.+4032   	; 0x14a2 <memmove>
     4e2:	d8 01       	movw	r26, r16
     4e4:	8d 91       	ld	r24, X+
     4e6:	8d 01       	movw	r16, r26
     4e8:	f1 01       	movw	r30, r2
     4ea:	80 83       	st	Z, r24
     4ec:	a5 01       	movw	r20, r10
     4ee:	6d 81       	ldd	r22, Y+5	; 0x05
     4f0:	7e 81       	ldd	r23, Y+6	; 0x06
     4f2:	c4 01       	movw	r24, r8
     4f4:	e7 d7       	rcall	.+4046   	; 0x14c4 <strncmp>
     4f6:	89 2b       	or	r24, r25
     4f8:	61 f4       	brne	.+24     	; 0x512 <__LOCK_REGION_LENGTH__+0x112>
     4fa:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
     4fe:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__data_end+0x1>
     502:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <__data_end+0x2>
     506:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <__data_end+0x3>
     50a:	81 e0       	ldi	r24, 0x01	; 1
     50c:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Response_Status>
     510:	2f c0       	rjmp	.+94     	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
     512:	ff ef       	ldi	r31, 0xFF	; 255
     514:	4f 1a       	sub	r4, r31
     516:	5f 0a       	sbc	r5, r31
     518:	6f 0a       	sbc	r6, r31
     51a:	7f 0a       	sbc	r7, r31
     51c:	4c 14       	cp	r4, r12
     51e:	5d 04       	cpc	r5, r13
     520:	6e 04       	cpc	r6, r14
     522:	7f 04       	cpc	r7, r15
     524:	c1 f6       	brne	.-80     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     526:	8f e9       	ldi	r24, 0x9F	; 159
     528:	9f e0       	ldi	r25, 0x0F	; 15
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	f1 f7       	brne	.-4      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
     52e:	00 c0       	rjmp	.+0      	; 0x530 <__LOCK_REGION_LENGTH__+0x130>
     530:	00 00       	nop
     532:	29 81       	ldd	r18, Y+1	; 0x01
     534:	3a 81       	ldd	r19, Y+2	; 0x02
     536:	4b 81       	ldd	r20, Y+3	; 0x03
     538:	5c 81       	ldd	r21, Y+4	; 0x04
     53a:	2f 5f       	subi	r18, 0xFF	; 255
     53c:	3f 4f       	sbci	r19, 0xFF	; 255
     53e:	4f 4f       	sbci	r20, 0xFF	; 255
     540:	5f 4f       	sbci	r21, 0xFF	; 255
     542:	29 83       	std	Y+1, r18	; 0x01
     544:	3a 83       	std	Y+2, r19	; 0x02
     546:	4b 83       	std	Y+3, r20	; 0x03
     548:	5c 83       	std	Y+4, r21	; 0x04
     54a:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
     54e:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <__data_end+0x1>
     552:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <__data_end+0x2>
     556:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <__data_end+0x3>
     55a:	80 5f       	subi	r24, 0xF0	; 240
     55c:	98 4d       	sbci	r25, 0xD8	; 216
     55e:	af 4f       	sbci	r26, 0xFF	; 255
     560:	bf 4f       	sbci	r27, 0xFF	; 255
     562:	28 17       	cp	r18, r24
     564:	39 07       	cpc	r19, r25
     566:	4a 07       	cpc	r20, r26
     568:	5b 07       	cpc	r21, r27
     56a:	08 f4       	brcc	.+2      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
     56c:	75 cf       	rjmp	.-278    	; 0x458 <__LOCK_REGION_LENGTH__+0x58>
     56e:	5b cf       	rjmp	.-330    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     570:	4b 85       	ldd	r20, Y+11	; 0x0b
     572:	5c 85       	ldd	r21, Y+12	; 0x0c
     574:	0f b6       	in	r0, 0x3f	; 63
     576:	f8 94       	cli
     578:	5e bf       	out	0x3e, r21	; 62
     57a:	0f be       	out	0x3f, r0	; 63
     57c:	4d bf       	out	0x3d, r20	; 61
     57e:	2c 96       	adiw	r28, 0x0c	; 12
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	1f 91       	pop	r17
     590:	0f 91       	pop	r16
     592:	ff 90       	pop	r15
     594:	ef 90       	pop	r14
     596:	df 90       	pop	r13
     598:	cf 90       	pop	r12
     59a:	bf 90       	pop	r11
     59c:	af 90       	pop	r10
     59e:	9f 90       	pop	r9
     5a0:	8f 90       	pop	r8
     5a2:	7f 90       	pop	r7
     5a4:	6f 90       	pop	r6
     5a6:	5f 90       	pop	r5
     5a8:	4f 90       	pop	r4
     5aa:	3f 90       	pop	r3
     5ac:	2f 90       	pop	r2
     5ae:	08 95       	ret

000005b0 <ESP8266_Clear>:
     5b0:	80 ea       	ldi	r24, 0xA0	; 160
     5b2:	e0 ef       	ldi	r30, 0xF0	; 240
     5b4:	f3 e0       	ldi	r31, 0x03	; 3
     5b6:	df 01       	movw	r26, r30
     5b8:	1d 92       	st	X+, r1
     5ba:	8a 95       	dec	r24
     5bc:	e9 f7       	brne	.-6      	; 0x5b8 <ESP8266_Clear+0x8>
     5be:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <Counter+0x1>
     5c2:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <Counter>
     5c6:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <pointer+0x1>
     5ca:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <pointer>
     5ce:	08 95       	ret

000005d0 <Start_Read_Response>:
     5d0:	cf 93       	push	r28
     5d2:	df 93       	push	r29
     5d4:	ec 01       	movw	r28, r24
     5d6:	84 e0       	ldi	r24, 0x04	; 4
     5d8:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Response_Status>
     5dc:	ce 01       	movw	r24, r28
     5de:	db de       	rcall	.-586    	; 0x396 <Read_Response>
     5e0:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     5e4:	88 23       	and	r24, r24
     5e6:	d1 f3       	breq	.-12     	; 0x5dc <Start_Read_Response+0xc>
     5e8:	df 91       	pop	r29
     5ea:	cf 91       	pop	r28
     5ec:	08 95       	ret

000005ee <WaitForExpectedResponse>:
     5ee:	f0 df       	rcall	.-32     	; 0x5d0 <Start_Read_Response>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <Response_Status>
     5f6:	92 30       	cpi	r25, 0x02	; 2
     5f8:	09 f4       	brne	.+2      	; 0x5fc <WaitForExpectedResponse+0xe>
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	08 95       	ret

000005fe <SendATandExpectResponse>:
     5fe:	0f 93       	push	r16
     600:	1f 93       	push	r17
     602:	cf 93       	push	r28
     604:	df 93       	push	r29
     606:	8c 01       	movw	r16, r24
     608:	eb 01       	movw	r28, r22
     60a:	d2 df       	rcall	.-92     	; 0x5b0 <ESP8266_Clear>
     60c:	c8 01       	movw	r24, r16
     60e:	d8 dd       	rcall	.-1104   	; 0x1c0 <USART_SendString>
     610:	80 e8       	ldi	r24, 0x80	; 128
     612:	92 e0       	ldi	r25, 0x02	; 2
     614:	d5 dd       	rcall	.-1110   	; 0x1c0 <USART_SendString>
     616:	ce 01       	movw	r24, r28
     618:	ea df       	rcall	.-44     	; 0x5ee <WaitForExpectedResponse>
     61a:	df 91       	pop	r29
     61c:	cf 91       	pop	r28
     61e:	1f 91       	pop	r17
     620:	0f 91       	pop	r16
     622:	08 95       	ret

00000624 <ESP8266_ApplicationMode>:
     624:	0f 93       	push	r16
     626:	1f 93       	push	r17
     628:	cf 93       	push	r28
     62a:	df 93       	push	r29
     62c:	cd b7       	in	r28, 0x3d	; 61
     62e:	de b7       	in	r29, 0x3e	; 62
     630:	64 97       	sbiw	r28, 0x14	; 20
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	de bf       	out	0x3e, r29	; 62
     638:	0f be       	out	0x3f, r0	; 63
     63a:	cd bf       	out	0x3d, r28	; 61
     63c:	8e 01       	movw	r16, r28
     63e:	0f 5f       	subi	r16, 0xFF	; 255
     640:	1f 4f       	sbci	r17, 0xFF	; 255
     642:	94 e1       	ldi	r25, 0x14	; 20
     644:	f8 01       	movw	r30, r16
     646:	11 92       	st	Z+, r1
     648:	9a 95       	dec	r25
     64a:	e9 f7       	brne	.-6      	; 0x646 <ESP8266_ApplicationMode+0x22>
     64c:	1f 92       	push	r1
     64e:	8f 93       	push	r24
     650:	8f e1       	ldi	r24, 0x1F	; 31
     652:	92 e0       	ldi	r25, 0x02	; 2
     654:	9f 93       	push	r25
     656:	8f 93       	push	r24
     658:	1f 93       	push	r17
     65a:	0f 93       	push	r16
     65c:	5b d7       	rcall	.+3766   	; 0x1514 <sprintf>
     65e:	1c 8a       	std	Y+20, r1	; 0x14
     660:	68 e1       	ldi	r22, 0x18	; 24
     662:	72 e0       	ldi	r23, 0x02	; 2
     664:	c8 01       	movw	r24, r16
     666:	cb df       	rcall	.-106    	; 0x5fe <SendATandExpectResponse>
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
     672:	0f 90       	pop	r0
     674:	64 96       	adiw	r28, 0x14	; 20
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	08 95       	ret

0000068a <ESP8266_ConnectionMode>:
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	64 97       	sbiw	r28, 0x14	; 20
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	8e 01       	movw	r16, r28
     6a4:	0f 5f       	subi	r16, 0xFF	; 255
     6a6:	1f 4f       	sbci	r17, 0xFF	; 255
     6a8:	94 e1       	ldi	r25, 0x14	; 20
     6aa:	f8 01       	movw	r30, r16
     6ac:	11 92       	st	Z+, r1
     6ae:	9a 95       	dec	r25
     6b0:	e9 f7       	brne	.-6      	; 0x6ac <ESP8266_ConnectionMode+0x22>
     6b2:	1f 92       	push	r1
     6b4:	8f 93       	push	r24
     6b6:	8d e2       	ldi	r24, 0x2D	; 45
     6b8:	92 e0       	ldi	r25, 0x02	; 2
     6ba:	9f 93       	push	r25
     6bc:	8f 93       	push	r24
     6be:	1f 93       	push	r17
     6c0:	0f 93       	push	r16
     6c2:	28 d7       	rcall	.+3664   	; 0x1514 <sprintf>
     6c4:	1c 8a       	std	Y+20, r1	; 0x14
     6c6:	68 e1       	ldi	r22, 0x18	; 24
     6c8:	72 e0       	ldi	r23, 0x02	; 2
     6ca:	c8 01       	movw	r24, r16
     6cc:	98 df       	rcall	.-208    	; 0x5fe <SendATandExpectResponse>
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	64 96       	adiw	r28, 0x14	; 20
     6dc:	0f b6       	in	r0, 0x3f	; 63
     6de:	f8 94       	cli
     6e0:	de bf       	out	0x3e, r29	; 62
     6e2:	0f be       	out	0x3f, r0	; 63
     6e4:	cd bf       	out	0x3d, r28	; 61
     6e6:	df 91       	pop	r29
     6e8:	cf 91       	pop	r28
     6ea:	1f 91       	pop	r17
     6ec:	0f 91       	pop	r16
     6ee:	08 95       	ret

000006f0 <ESP8266_Begin>:
     6f0:	cf 93       	push	r28
     6f2:	c5 e0       	ldi	r28, 0x05	; 5
     6f4:	68 e1       	ldi	r22, 0x18	; 24
     6f6:	72 e0       	ldi	r23, 0x02	; 2
     6f8:	8a e3       	ldi	r24, 0x3A	; 58
     6fa:	92 e0       	ldi	r25, 0x02	; 2
     6fc:	80 df       	rcall	.-256    	; 0x5fe <SendATandExpectResponse>
     6fe:	81 11       	cpse	r24, r1
     700:	09 c0       	rjmp	.+18     	; 0x714 <ESP8266_Begin+0x24>
     702:	68 e1       	ldi	r22, 0x18	; 24
     704:	72 e0       	ldi	r23, 0x02	; 2
     706:	8f e3       	ldi	r24, 0x3F	; 63
     708:	92 e0       	ldi	r25, 0x02	; 2
     70a:	79 df       	rcall	.-270    	; 0x5fe <SendATandExpectResponse>
     70c:	81 11       	cpse	r24, r1
     70e:	02 c0       	rjmp	.+4      	; 0x714 <ESP8266_Begin+0x24>
     710:	c1 50       	subi	r28, 0x01	; 1
     712:	81 f7       	brne	.-32     	; 0x6f4 <ESP8266_Begin+0x4>
     714:	cf 91       	pop	r28
     716:	08 95       	ret

00000718 <ESP8266_WIFIMode>:
     718:	0f 93       	push	r16
     71a:	1f 93       	push	r17
     71c:	cf 93       	push	r28
     71e:	df 93       	push	r29
     720:	cd b7       	in	r28, 0x3d	; 61
     722:	de b7       	in	r29, 0x3e	; 62
     724:	64 97       	sbiw	r28, 0x14	; 20
     726:	0f b6       	in	r0, 0x3f	; 63
     728:	f8 94       	cli
     72a:	de bf       	out	0x3e, r29	; 62
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	cd bf       	out	0x3d, r28	; 61
     730:	8e 01       	movw	r16, r28
     732:	0f 5f       	subi	r16, 0xFF	; 255
     734:	1f 4f       	sbci	r17, 0xFF	; 255
     736:	94 e1       	ldi	r25, 0x14	; 20
     738:	f8 01       	movw	r30, r16
     73a:	11 92       	st	Z+, r1
     73c:	9a 95       	dec	r25
     73e:	e9 f7       	brne	.-6      	; 0x73a <ESP8266_WIFIMode+0x22>
     740:	1f 92       	push	r1
     742:	8f 93       	push	r24
     744:	80 e5       	ldi	r24, 0x50	; 80
     746:	92 e0       	ldi	r25, 0x02	; 2
     748:	9f 93       	push	r25
     74a:	8f 93       	push	r24
     74c:	1f 93       	push	r17
     74e:	0f 93       	push	r16
     750:	e1 d6       	rcall	.+3522   	; 0x1514 <sprintf>
     752:	1c 8a       	std	Y+20, r1	; 0x14
     754:	68 e1       	ldi	r22, 0x18	; 24
     756:	72 e0       	ldi	r23, 0x02	; 2
     758:	c8 01       	movw	r24, r16
     75a:	51 df       	rcall	.-350    	; 0x5fe <SendATandExpectResponse>
     75c:	0f 90       	pop	r0
     75e:	0f 90       	pop	r0
     760:	0f 90       	pop	r0
     762:	0f 90       	pop	r0
     764:	0f 90       	pop	r0
     766:	0f 90       	pop	r0
     768:	64 96       	adiw	r28, 0x14	; 20
     76a:	0f b6       	in	r0, 0x3f	; 63
     76c:	f8 94       	cli
     76e:	de bf       	out	0x3e, r29	; 62
     770:	0f be       	out	0x3f, r0	; 63
     772:	cd bf       	out	0x3d, r28	; 61
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	08 95       	ret

0000077e <ESP8266_JoinAccessPoint>:
     77e:	0f 93       	push	r16
     780:	1f 93       	push	r17
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	ec 97       	sbiw	r28, 0x3c	; 60
     78c:	0f b6       	in	r0, 0x3f	; 63
     78e:	f8 94       	cli
     790:	de bf       	out	0x3e, r29	; 62
     792:	0f be       	out	0x3f, r0	; 63
     794:	cd bf       	out	0x3d, r28	; 61
     796:	8e 01       	movw	r16, r28
     798:	0f 5f       	subi	r16, 0xFF	; 255
     79a:	1f 4f       	sbci	r17, 0xFF	; 255
     79c:	2c e3       	ldi	r18, 0x3C	; 60
     79e:	f8 01       	movw	r30, r16
     7a0:	11 92       	st	Z+, r1
     7a2:	2a 95       	dec	r18
     7a4:	e9 f7       	brne	.-6      	; 0x7a0 <ESP8266_JoinAccessPoint+0x22>
     7a6:	7f 93       	push	r23
     7a8:	6f 93       	push	r22
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	8d e5       	ldi	r24, 0x5D	; 93
     7b0:	92 e0       	ldi	r25, 0x02	; 2
     7b2:	9f 93       	push	r25
     7b4:	8f 93       	push	r24
     7b6:	1f 93       	push	r17
     7b8:	0f 93       	push	r16
     7ba:	ac d6       	rcall	.+3416   	; 0x1514 <sprintf>
     7bc:	1c ae       	std	Y+60, r1	; 0x3c
     7be:	60 e7       	ldi	r22, 0x70	; 112
     7c0:	72 e0       	ldi	r23, 0x02	; 2
     7c2:	c8 01       	movw	r24, r16
     7c4:	1c df       	rcall	.-456    	; 0x5fe <SendATandExpectResponse>
     7c6:	0f b6       	in	r0, 0x3f	; 63
     7c8:	f8 94       	cli
     7ca:	de bf       	out	0x3e, r29	; 62
     7cc:	0f be       	out	0x3f, r0	; 63
     7ce:	cd bf       	out	0x3d, r28	; 61
     7d0:	81 11       	cpse	r24, r1
     7d2:	1e c0       	rjmp	.+60     	; 0x810 <ESP8266_JoinAccessPoint+0x92>
     7d4:	63 e8       	ldi	r22, 0x83	; 131
     7d6:	72 e0       	ldi	r23, 0x02	; 2
     7d8:	80 ef       	ldi	r24, 0xF0	; 240
     7da:	93 e0       	ldi	r25, 0x03	; 3
     7dc:	81 d6       	rcall	.+3330   	; 0x14e0 <strstr>
     7de:	89 2b       	or	r24, r25
     7e0:	c9 f4       	brne	.+50     	; 0x814 <ESP8266_JoinAccessPoint+0x96>
     7e2:	6c e8       	ldi	r22, 0x8C	; 140
     7e4:	72 e0       	ldi	r23, 0x02	; 2
     7e6:	80 ef       	ldi	r24, 0xF0	; 240
     7e8:	93 e0       	ldi	r25, 0x03	; 3
     7ea:	7a d6       	rcall	.+3316   	; 0x14e0 <strstr>
     7ec:	89 2b       	or	r24, r25
     7ee:	a1 f4       	brne	.+40     	; 0x818 <ESP8266_JoinAccessPoint+0x9a>
     7f0:	65 e9       	ldi	r22, 0x95	; 149
     7f2:	72 e0       	ldi	r23, 0x02	; 2
     7f4:	80 ef       	ldi	r24, 0xF0	; 240
     7f6:	93 e0       	ldi	r25, 0x03	; 3
     7f8:	73 d6       	rcall	.+3302   	; 0x14e0 <strstr>
     7fa:	89 2b       	or	r24, r25
     7fc:	79 f4       	brne	.+30     	; 0x81c <ESP8266_JoinAccessPoint+0x9e>
     7fe:	6e e9       	ldi	r22, 0x9E	; 158
     800:	72 e0       	ldi	r23, 0x02	; 2
     802:	80 ef       	ldi	r24, 0xF0	; 240
     804:	93 e0       	ldi	r25, 0x03	; 3
     806:	6c d6       	rcall	.+3288   	; 0x14e0 <strstr>
     808:	89 2b       	or	r24, r25
     80a:	51 f4       	brne	.+20     	; 0x820 <ESP8266_JoinAccessPoint+0xa2>
     80c:	85 e0       	ldi	r24, 0x05	; 5
     80e:	09 c0       	rjmp	.+18     	; 0x822 <ESP8266_JoinAccessPoint+0xa4>
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	07 c0       	rjmp	.+14     	; 0x822 <ESP8266_JoinAccessPoint+0xa4>
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	05 c0       	rjmp	.+10     	; 0x822 <ESP8266_JoinAccessPoint+0xa4>
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	03 c0       	rjmp	.+6      	; 0x822 <ESP8266_JoinAccessPoint+0xa4>
     81c:	83 e0       	ldi	r24, 0x03	; 3
     81e:	01 c0       	rjmp	.+2      	; 0x822 <ESP8266_JoinAccessPoint+0xa4>
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	ec 96       	adiw	r28, 0x3c	; 60
     824:	0f b6       	in	r0, 0x3f	; 63
     826:	f8 94       	cli
     828:	de bf       	out	0x3e, r29	; 62
     82a:	0f be       	out	0x3f, r0	; 63
     82c:	cd bf       	out	0x3d, r28	; 61
     82e:	df 91       	pop	r29
     830:	cf 91       	pop	r28
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	08 95       	ret

00000838 <ESP8266_connected>:
     838:	68 e1       	ldi	r22, 0x18	; 24
     83a:	72 e0       	ldi	r23, 0x02	; 2
     83c:	87 ea       	ldi	r24, 0xA7	; 167
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	de de       	rcall	.-580    	; 0x5fe <SendATandExpectResponse>
     842:	64 eb       	ldi	r22, 0xB4	; 180
     844:	72 e0       	ldi	r23, 0x02	; 2
     846:	80 ef       	ldi	r24, 0xF0	; 240
     848:	93 e0       	ldi	r25, 0x03	; 3
     84a:	4a d6       	rcall	.+3220   	; 0x14e0 <strstr>
     84c:	89 2b       	or	r24, r25
     84e:	b9 f4       	brne	.+46     	; 0x87e <ESP8266_connected+0x46>
     850:	6d eb       	ldi	r22, 0xBD	; 189
     852:	72 e0       	ldi	r23, 0x02	; 2
     854:	80 ef       	ldi	r24, 0xF0	; 240
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	43 d6       	rcall	.+3206   	; 0x14e0 <strstr>
     85a:	89 2b       	or	r24, r25
     85c:	91 f4       	brne	.+36     	; 0x882 <ESP8266_connected+0x4a>
     85e:	66 ec       	ldi	r22, 0xC6	; 198
     860:	72 e0       	ldi	r23, 0x02	; 2
     862:	80 ef       	ldi	r24, 0xF0	; 240
     864:	93 e0       	ldi	r25, 0x03	; 3
     866:	3c d6       	rcall	.+3192   	; 0x14e0 <strstr>
     868:	89 2b       	or	r24, r25
     86a:	69 f4       	brne	.+26     	; 0x886 <ESP8266_connected+0x4e>
     86c:	6f ec       	ldi	r22, 0xCF	; 207
     86e:	72 e0       	ldi	r23, 0x02	; 2
     870:	80 ef       	ldi	r24, 0xF0	; 240
     872:	93 e0       	ldi	r25, 0x03	; 3
     874:	35 d6       	rcall	.+3178   	; 0x14e0 <strstr>
     876:	89 2b       	or	r24, r25
     878:	41 f4       	brne	.+16     	; 0x88a <ESP8266_connected+0x52>
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	08 95       	ret
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	08 95       	ret
     882:	81 e0       	ldi	r24, 0x01	; 1
     884:	08 95       	ret
     886:	82 e0       	ldi	r24, 0x02	; 2
     888:	08 95       	ret
     88a:	83 e0       	ldi	r24, 0x03	; 3
     88c:	08 95       	ret

0000088e <ESP8266_Start>:
     88e:	df 92       	push	r13
     890:	ef 92       	push	r14
     892:	ff 92       	push	r15
     894:	0f 93       	push	r16
     896:	1f 93       	push	r17
     898:	cf 93       	push	r28
     89a:	df 93       	push	r29
     89c:	cd b7       	in	r28, 0x3d	; 61
     89e:	de b7       	in	r29, 0x3e	; 62
     8a0:	ec 97       	sbiw	r28, 0x3c	; 60
     8a2:	0f b6       	in	r0, 0x3f	; 63
     8a4:	f8 94       	cli
     8a6:	de bf       	out	0x3e, r29	; 62
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	cd bf       	out	0x3d, r28	; 61
     8ac:	d8 2e       	mov	r13, r24
     8ae:	16 2f       	mov	r17, r22
     8b0:	07 2f       	mov	r16, r23
     8b2:	f4 2e       	mov	r15, r20
     8b4:	e5 2e       	mov	r14, r21
     8b6:	fe 01       	movw	r30, r28
     8b8:	31 96       	adiw	r30, 0x01	; 1
     8ba:	8c e3       	ldi	r24, 0x3C	; 60
     8bc:	df 01       	movw	r26, r30
     8be:	1d 92       	st	X+, r1
     8c0:	8a 95       	dec	r24
     8c2:	e9 f7       	brne	.-6      	; 0x8be <ESP8266_Start+0x30>
     8c4:	68 ed       	ldi	r22, 0xD8	; 216
     8c6:	72 e0       	ldi	r23, 0x02	; 2
     8c8:	81 ee       	ldi	r24, 0xE1	; 225
     8ca:	92 e0       	ldi	r25, 0x02	; 2
     8cc:	98 de       	rcall	.-720    	; 0x5fe <SendATandExpectResponse>
     8ce:	88 23       	and	r24, r24
     8d0:	99 f0       	breq	.+38     	; 0x8f8 <ESP8266_Start+0x6a>
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	8c ee       	ldi	r24, 0xEC	; 236
     8dc:	92 e0       	ldi	r25, 0x02	; 2
     8de:	9f 93       	push	r25
     8e0:	8f 93       	push	r24
     8e2:	ce 01       	movw	r24, r28
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	14 d6       	rcall	.+3112   	; 0x1514 <sprintf>
     8ec:	0f b6       	in	r0, 0x3f	; 63
     8ee:	f8 94       	cli
     8f0:	de bf       	out	0x3e, r29	; 62
     8f2:	0f be       	out	0x3f, r0	; 63
     8f4:	cd bf       	out	0x3d, r28	; 61
     8f6:	14 c0       	rjmp	.+40     	; 0x920 <ESP8266_Start+0x92>
     8f8:	ef 92       	push	r14
     8fa:	ff 92       	push	r15
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	1f 92       	push	r1
     902:	df 92       	push	r13
     904:	86 e0       	ldi	r24, 0x06	; 6
     906:	93 e0       	ldi	r25, 0x03	; 3
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	ce 01       	movw	r24, r28
     90e:	01 96       	adiw	r24, 0x01	; 1
     910:	9f 93       	push	r25
     912:	8f 93       	push	r24
     914:	ff d5       	rcall	.+3070   	; 0x1514 <sprintf>
     916:	0f b6       	in	r0, 0x3f	; 63
     918:	f8 94       	cli
     91a:	de bf       	out	0x3e, r29	; 62
     91c:	0f be       	out	0x3f, r0	; 63
     91e:	cd bf       	out	0x3d, r28	; 61
     920:	65 e2       	ldi	r22, 0x25	; 37
     922:	73 e0       	ldi	r23, 0x03	; 3
     924:	ce 01       	movw	r24, r28
     926:	01 96       	adiw	r24, 0x01	; 1
     928:	6a de       	rcall	.-812    	; 0x5fe <SendATandExpectResponse>
     92a:	81 11       	cpse	r24, r1
     92c:	06 c0       	rjmp	.+12     	; 0x93a <ESP8266_Start+0xac>
     92e:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     932:	82 30       	cpi	r24, 0x02	; 2
     934:	21 f0       	breq	.+8      	; 0x93e <ESP8266_Start+0xb0>
     936:	85 e0       	ldi	r24, 0x05	; 5
     938:	03 c0       	rjmp	.+6      	; 0x940 <ESP8266_Start+0xb2>
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	01 c0       	rjmp	.+2      	; 0x940 <ESP8266_Start+0xb2>
     93e:	82 e0       	ldi	r24, 0x02	; 2
     940:	ec 96       	adiw	r28, 0x3c	; 60
     942:	0f b6       	in	r0, 0x3f	; 63
     944:	f8 94       	cli
     946:	de bf       	out	0x3e, r29	; 62
     948:	0f be       	out	0x3f, r0	; 63
     94a:	cd bf       	out	0x3d, r28	; 61
     94c:	df 91       	pop	r29
     94e:	cf 91       	pop	r28
     950:	1f 91       	pop	r17
     952:	0f 91       	pop	r16
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	08 95       	ret

0000095c <ESP8266_Send>:
     95c:	ef 92       	push	r14
     95e:	ff 92       	push	r15
     960:	0f 93       	push	r16
     962:	1f 93       	push	r17
     964:	cf 93       	push	r28
     966:	df 93       	push	r29
     968:	cd b7       	in	r28, 0x3d	; 61
     96a:	de b7       	in	r29, 0x3e	; 62
     96c:	64 97       	sbiw	r28, 0x14	; 20
     96e:	0f b6       	in	r0, 0x3f	; 63
     970:	f8 94       	cli
     972:	de bf       	out	0x3e, r29	; 62
     974:	0f be       	out	0x3f, r0	; 63
     976:	cd bf       	out	0x3d, r28	; 61
     978:	8c 01       	movw	r16, r24
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	7c 01       	movw	r14, r24
     980:	84 e1       	ldi	r24, 0x14	; 20
     982:	f7 01       	movw	r30, r14
     984:	11 92       	st	Z+, r1
     986:	8a 95       	dec	r24
     988:	e9 f7       	brne	.-6      	; 0x984 <ESP8266_Send+0x28>
     98a:	f8 01       	movw	r30, r16
     98c:	01 90       	ld	r0, Z+
     98e:	00 20       	and	r0, r0
     990:	e9 f7       	brne	.-6      	; 0x98c <ESP8266_Send+0x30>
     992:	cf 01       	movw	r24, r30
     994:	80 1b       	sub	r24, r16
     996:	91 0b       	sbc	r25, r17
     998:	01 96       	adiw	r24, 0x01	; 1
     99a:	9f 93       	push	r25
     99c:	8f 93       	push	r24
     99e:	8f e2       	ldi	r24, 0x2F	; 47
     9a0:	93 e0       	ldi	r25, 0x03	; 3
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	ff 92       	push	r15
     9a8:	ef 92       	push	r14
     9aa:	b4 d5       	rcall	.+2920   	; 0x1514 <sprintf>
     9ac:	1c 8a       	std	Y+20, r1	; 0x14
     9ae:	6d e3       	ldi	r22, 0x3D	; 61
     9b0:	73 e0       	ldi	r23, 0x03	; 3
     9b2:	c7 01       	movw	r24, r14
     9b4:	24 de       	rcall	.-952    	; 0x5fe <SendATandExpectResponse>
     9b6:	65 e4       	ldi	r22, 0x45	; 69
     9b8:	73 e0       	ldi	r23, 0x03	; 3
     9ba:	c8 01       	movw	r24, r16
     9bc:	20 de       	rcall	.-960    	; 0x5fe <SendATandExpectResponse>
     9be:	0f 90       	pop	r0
     9c0:	0f 90       	pop	r0
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	81 11       	cpse	r24, r1
     9cc:	06 c0       	rjmp	.+12     	; 0x9da <ESP8266_Send+0x7e>
     9ce:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     9d2:	82 30       	cpi	r24, 0x02	; 2
     9d4:	21 f0       	breq	.+8      	; 0x9de <ESP8266_Send+0x82>
     9d6:	85 e0       	ldi	r24, 0x05	; 5
     9d8:	03 c0       	rjmp	.+6      	; 0x9e0 <ESP8266_Send+0x84>
     9da:	81 e0       	ldi	r24, 0x01	; 1
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <ESP8266_Send+0x84>
     9de:	82 e0       	ldi	r24, 0x02	; 2
     9e0:	64 96       	adiw	r28, 0x14	; 20
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	df 91       	pop	r29
     9ee:	cf 91       	pop	r28
     9f0:	1f 91       	pop	r17
     9f2:	0f 91       	pop	r16
     9f4:	ff 90       	pop	r15
     9f6:	ef 90       	pop	r14
     9f8:	08 95       	ret

000009fa <__vector_36>:

ISR (USART1_RX_vect)									// Changed from "USART_RXC_vect"
{
     9fa:	1f 92       	push	r1
     9fc:	0f 92       	push	r0
     9fe:	0f b6       	in	r0, 0x3f	; 63
     a00:	0f 92       	push	r0
     a02:	11 24       	eor	r1, r1
     a04:	0b b6       	in	r0, 0x3b	; 59
     a06:	0f 92       	push	r0
     a08:	2f 93       	push	r18
     a0a:	8f 93       	push	r24
     a0c:	9f 93       	push	r25
     a0e:	ef 93       	push	r30
     a10:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     a12:	2f b7       	in	r18, 0x3f	; 63
	cli();
     a14:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR1;					// Was UDR
     a16:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <Counter>
     a1a:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <Counter+0x1>
     a1e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     a22:	e0 51       	subi	r30, 0x10	; 16
     a24:	fc 4f       	sbci	r31, 0xFC	; 252
     a26:	80 83       	st	Z, r24
	Counter++;
     a28:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <Counter>
     a2c:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <Counter+0x1>
     a30:	01 96       	adiw	r24, 0x01	; 1
     a32:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <Counter+0x1>
     a36:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
     a3a:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <Counter>
     a3e:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <Counter+0x1>
     a42:	80 3a       	cpi	r24, 0xA0	; 160
     a44:	91 05       	cpc	r25, r1
     a46:	41 f4       	brne	.+16     	; 0xa58 <__vector_36+0x5e>
		Counter = 0; pointer = 0;
     a48:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <Counter+0x1>
     a4c:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <Counter>
     a50:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <pointer+0x1>
     a54:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <pointer>
	}
	SREG = oldsrg;
     a58:	2f bf       	out	0x3f, r18	; 63
}
     a5a:	ff 91       	pop	r31
     a5c:	ef 91       	pop	r30
     a5e:	9f 91       	pop	r25
     a60:	8f 91       	pop	r24
     a62:	2f 91       	pop	r18
     a64:	0f 90       	pop	r0
     a66:	0b be       	out	0x3b, r0	; 59
     a68:	0f 90       	pop	r0
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	0f 90       	pop	r0
     a6e:	1f 90       	pop	r1
     a70:	18 95       	reti

00000a72 <Temperatur_choices>:
	
}

void Temperatur_choices(void)
{
	Pre_display();
     a72:	0a d5       	rcall	.+2580   	; 0x1488 <Pre_display>

	lcd_puts("Auto update:");
     a74:	81 e5       	ldi	r24, 0x51	; 81
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	b9 d4       	rcall	.+2418   	; 0x13ec <lcd_puts>
	lcd_gotoxy(13,0);
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	8d e0       	ldi	r24, 0x0D	; 13
     a7e:	99 d4       	rcall	.+2354   	; 0x13b2 <lcd_gotoxy>
	lcd_puts("1");
     a80:	8a e8       	ldi	r24, 0x8A	; 138
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	b3 d4       	rcall	.+2406   	; 0x13ec <lcd_puts>
	
	lcd_gotoxy(0,1);
     a86:	61 e0       	ldi	r22, 0x01	; 1
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	93 d4       	rcall	.+2342   	; 0x13b2 <lcd_gotoxy>
	
	lcd_puts("Read Once:");
     a8c:	8e e5       	ldi	r24, 0x5E	; 94
     a8e:	93 e0       	ldi	r25, 0x03	; 3
     a90:	ad d4       	rcall	.+2394   	; 0x13ec <lcd_puts>
	lcd_gotoxy(13, 1);
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	8d e0       	ldi	r24, 0x0D	; 13
     a96:	8d d4       	rcall	.+2330   	; 0x13b2 <lcd_gotoxy>
	lcd_puts("2");
     a98:	83 e9       	ldi	r24, 0x93	; 147
     a9a:	92 e0       	ldi	r25, 0x02	; 2
     a9c:	a7 d4       	rcall	.+2382   	; 0x13ec <lcd_puts>
     a9e:	61 e0       	ldi	r22, 0x01	; 1
	
	lcd_gotoxy(15, 1);
     aa0:	8f e0       	ldi	r24, 0x0F	; 15
     aa2:	87 c4       	rjmp	.+2318   	; 0x13b2 <lcd_gotoxy>
     aa4:	08 95       	ret

00000aa6 <PushToAPI>:
     aa6:	cf 92       	push	r12
     aa8:	df 92       	push	r13
		}
	}
}

void PushToAPI(int temperatur, int humidity)
{
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	1f 93       	push	r17
     ab2:	cf 93       	push	r28
     ab4:	df 93       	push	r29
     ab6:	cd b7       	in	r28, 0x3d	; 61
     ab8:	de b7       	in	r29, 0x3e	; 62
     aba:	c6 59       	subi	r28, 0x96	; 150
     abc:	d1 09       	sbc	r29, r1
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
     ac8:	f8 2e       	mov	r15, r24
     aca:	e9 2e       	mov	r14, r25
     acc:	d6 2e       	mov	r13, r22
     ace:	c7 2e       	mov	r12, r23
	char _buffer[150];
	uint8_t Connect_Status;
	while(!ESP8266_Begin());
     ad0:	0f de       	rcall	.-994    	; 0x6f0 <ESP8266_Begin>
     ad2:	88 23       	and	r24, r24
     ad4:	e9 f3       	breq	.-6      	; 0xad0 <PushToAPI+0x2a>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);						/* 3 = Both (AP and STA) */
     ad6:	83 e0       	ldi	r24, 0x03	; 3
     ad8:	1f de       	rcall	.-962    	; 0x718 <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);										/* 0 = Single; 1 = Multi */
     ada:	80 e0       	ldi	r24, 0x00	; 0
     adc:	d6 dd       	rcall	.-1108   	; 0x68a <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);									/* 0 = Normal Mode; 1 = Transperant Mode */
     ade:	80 e0       	ldi	r24, 0x00	; 0
     ae0:	a1 dd       	rcall	.-1214   	; 0x624 <ESP8266_ApplicationMode>
     ae2:	05 c0       	rjmp	.+10     	; 0xaee <PushToAPI+0x48>
	while(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)			// Mens ESP8266 ikke er tilsluttet til nettet, prøver den at oprette en forbindelse
     ae4:	69 e6       	ldi	r22, 0x69	; 105
	{
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     ae6:	73 e0       	ldi	r23, 0x03	; 3
     ae8:	83 e7       	ldi	r24, 0x73	; 115
     aea:	93 e0       	ldi	r25, 0x03	; 3
     aec:	48 de       	rcall	.-880    	; 0x77e <ESP8266_JoinAccessPoint>
	uint8_t Connect_Status;
	while(!ESP8266_Begin());
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);						/* 3 = Both (AP and STA) */
	ESP8266_ConnectionMode(SINGLE);										/* 0 = Single; 1 = Multi */
	ESP8266_ApplicationMode(NORMAL);									/* 0 = Normal Mode; 1 = Transperant Mode */
	while(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)			// Mens ESP8266 ikke er tilsluttet til nettet, prøver den at oprette en forbindelse
     aee:	a4 de       	rcall	.-696    	; 0x838 <ESP8266_connected>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	c1 f3       	breq	.-16     	; 0xae4 <PushToAPI+0x3e>
	{
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
	}
	ESP8266_Start(0, DOMAIN, PORT);										// Connect to API
     af4:	44 e8       	ldi	r20, 0x84	; 132
     af6:	53 e0       	ldi	r21, 0x03	; 3
     af8:	67 e8       	ldi	r22, 0x87	; 135
     afa:	73 e0       	ldi	r23, 0x03	; 3
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	c7 de       	rcall	.-626    	; 0x88e <ESP8266_Start>
     b00:	8e 01       	movw	r16, r28

	memset(_buffer, 0, 150);
     b02:	0f 5f       	subi	r16, 0xFF	; 255
     b04:	1f 4f       	sbci	r17, 0xFF	; 255
     b06:	86 e9       	ldi	r24, 0x96	; 150
     b08:	f8 01       	movw	r30, r16
     b0a:	11 92       	st	Z+, r1
     b0c:	8a 95       	dec	r24
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <PushToAPI+0x64>
     b10:	cf 92       	push	r12
	// Sender det nødvendige data, temperatur og fugtighed, til Thingspeaks API
	sprintf(_buffer, "GET /update?api_key=%s&field7=%i&field8=%i", API_WRITE_KEY, temperatur, humidity);
     b12:	df 92       	push	r13
     b14:	ef 92       	push	r14
     b16:	ff 92       	push	r15
     b18:	8a e9       	ldi	r24, 0x9A	; 154
     b1a:	93 e0       	ldi	r25, 0x03	; 3
     b1c:	9f 93       	push	r25
     b1e:	8f 93       	push	r24
     b20:	8b ea       	ldi	r24, 0xAB	; 171
     b22:	93 e0       	ldi	r25, 0x03	; 3
     b24:	9f 93       	push	r25
     b26:	8f 93       	push	r24
     b28:	1f 93       	push	r17
     b2a:	0f 93       	push	r16
     b2c:	f3 d4       	rcall	.+2534   	; 0x1514 <sprintf>
	ESP8266_Send(_buffer);
     b2e:	c8 01       	movw	r24, r16
     b30:	15 df       	rcall	.-470    	; 0x95c <ESP8266_Send>
     b32:	ff eb       	ldi	r31, 0xBF	; 191
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b34:	26 ec       	ldi	r18, 0xC6	; 198
     b36:	8d e2       	ldi	r24, 0x2D	; 45
     b38:	f1 50       	subi	r31, 0x01	; 1
     b3a:	20 40       	sbci	r18, 0x00	; 0
     b3c:	80 40       	sbci	r24, 0x00	; 0
     b3e:	e1 f7       	brne	.-8      	; 0xb38 <PushToAPI+0x92>
     b40:	00 c0       	rjmp	.+0      	; 0xb42 <PushToAPI+0x9c>
     b42:	00 00       	nop
     b44:	0f b6       	in	r0, 0x3f	; 63
	_delay_ms(15000);													/* Thingspeak server delay */	
}
     b46:	f8 94       	cli
     b48:	de bf       	out	0x3e, r29	; 62
     b4a:	0f be       	out	0x3f, r0	; 63
     b4c:	cd bf       	out	0x3d, r28	; 61
     b4e:	ca 56       	subi	r28, 0x6A	; 106
     b50:	df 4f       	sbci	r29, 0xFF	; 255
     b52:	0f b6       	in	r0, 0x3f	; 63
     b54:	f8 94       	cli
     b56:	de bf       	out	0x3e, r29	; 62
     b58:	0f be       	out	0x3f, r0	; 63
     b5a:	cd bf       	out	0x3d, r28	; 61
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	df 90       	pop	r13
     b6a:	cf 90       	pop	r12
     b6c:	08 95       	ret

00000b6e <Temperatur_display>:
     b6e:	ef 92       	push	r14

void Temperatur_display(int temperatur, int humidity)
{
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	cf 93       	push	r28
     b78:	df 93       	push	r29
     b7a:	cd b7       	in	r28, 0x3d	; 61
     b7c:	de b7       	in	r29, 0x3e	; 62
     b7e:	28 97       	sbiw	r28, 0x08	; 8
     b80:	0f b6       	in	r0, 0x3f	; 63
     b82:	f8 94       	cli
     b84:	de bf       	out	0x3e, r29	; 62
     b86:	0f be       	out	0x3f, r0	; 63
     b88:	cd bf       	out	0x3d, r28	; 61
     b8a:	18 2f       	mov	r17, r24
     b8c:	09 2f       	mov	r16, r25
     b8e:	f6 2e       	mov	r15, r22
     b90:	e7 2e       	mov	r14, r23
	char buffer[8];
	Pre_display();
     b92:	7a d4       	rcall	.+2292   	; 0x1488 <Pre_display>
	
	sprintf(buffer, "Temp: %d", temperatur);
     b94:	0f 93       	push	r16
     b96:	1f 93       	push	r17
     b98:	86 ed       	ldi	r24, 0xD6	; 214
     b9a:	93 e0       	ldi	r25, 0x03	; 3
     b9c:	9f 93       	push	r25
     b9e:	8f 93       	push	r24
     ba0:	8e 01       	movw	r16, r28
     ba2:	0f 5f       	subi	r16, 0xFF	; 255
     ba4:	1f 4f       	sbci	r17, 0xFF	; 255
     ba6:	1f 93       	push	r17
     ba8:	0f 93       	push	r16
     baa:	b4 d4       	rcall	.+2408   	; 0x1514 <sprintf>

	lcd_puts(buffer);
     bac:	c8 01       	movw	r24, r16
     bae:	1e d4       	rcall	.+2108   	; 0x13ec <lcd_puts>
	lcd_gotoxy(0,1);
     bb0:	61 e0       	ldi	r22, 0x01	; 1
     bb2:	80 e0       	ldi	r24, 0x00	; 0
     bb4:	fe d3       	rcall	.+2044   	; 0x13b2 <lcd_gotoxy>
     bb6:	ef 92       	push	r14
	
	sprintf(buffer, "Hum : %d", humidity);
     bb8:	ff 92       	push	r15
     bba:	8f ed       	ldi	r24, 0xDF	; 223
     bbc:	93 e0       	ldi	r25, 0x03	; 3
     bbe:	9f 93       	push	r25
     bc0:	8f 93       	push	r24
     bc2:	1f 93       	push	r17
     bc4:	0f 93       	push	r16
     bc6:	a6 d4       	rcall	.+2380   	; 0x1514 <sprintf>
	lcd_puts(buffer);
     bc8:	c8 01       	movw	r24, r16
     bca:	10 d4       	rcall	.+2080   	; 0x13ec <lcd_puts>
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	de bf       	out	0x3e, r29	; 62
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	cd bf       	out	0x3d, r28	; 61
     bd6:	28 96       	adiw	r28, 0x08	; 8
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	ff 90       	pop	r15
     bec:	ef 90       	pop	r14
     bee:	08 95       	ret

00000bf0 <Temperatur_ReadOnce>:
     bf0:	ef 92       	push	r14
		break;
	}
}

void Temperatur_ReadOnce(int loop)
{
     bf2:	ff 92       	push	r15
     bf4:	0f 93       	push	r16
     bf6:	1f 93       	push	r17
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	cd b7       	in	r28, 0x3d	; 61
     bfe:	de b7       	in	r29, 0x3e	; 62
     c00:	c0 55       	subi	r28, 0x50	; 80
     c02:	d1 09       	sbc	r29, r1
     c04:	0f b6       	in	r0, 0x3f	; 63
     c06:	f8 94       	cli
     c08:	de bf       	out	0x3e, r29	; 62
     c0a:	0f be       	out	0x3f, r0	; 63
     c0c:	cd bf       	out	0x3d, r28	; 61
	unsigned int column = 1;
	unsigned int row = 90;
	
	
	DHT_WakeUp();														/* Sender et signal ud til DHT11'eren for at se om der er forbindelse */
     c0e:	2d db       	rcall	.-2470   	; 0x26a <DHT_WakeUp>
	int array[5][8];
	if (DHT_Response())													/* Hvis der er forbindelse til en DHT11'ere, så bliver koden i IF'en kørt */
     c10:	3a db       	rcall	.-2444   	; 0x286 <DHT_Response>
     c12:	89 2b       	or	r24, r25
     c14:	09 f1       	breq	.+66     	; 0xc58 <Temperatur_ReadOnce+0x68>
     c16:	ce 01       	movw	r24, r28
	{
		DHT_Decode_Data(array);											/* Henter dataen fra DHT11'eren og gemmer den i et MULTIDIMENSIONELT array */
     c18:	01 96       	adiw	r24, 0x01	; 1
     c1a:	62 db       	rcall	.-2364   	; 0x2e0 <DHT_Decode_Data>
     c1c:	63 e0       	ldi	r22, 0x03	; 3
		
		int temp = ConvertToDecimal(array, 3);							/* Temperaturen og fugtigheden bliver gemt i en variabel, */
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	ce 01       	movw	r24, r28
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	95 db       	rcall	.-2262   	; 0x350 <ConvertToDecimal>
     c26:	8c 01       	movw	r16, r24
     c28:	61 e0       	ldi	r22, 0x01	; 1
		int hum = ConvertToDecimal(array, 1);							/* men inden skal den lige konventeres til decimal */
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	8f db       	rcall	.-2274   	; 0x350 <ConvertToDecimal>
     c32:	7c 01       	movw	r14, r24
		
		Temperatur_display(temp, hum);									/* Displayer temperaturen og fugtigheden på LCD displayet */
     c34:	bc 01       	movw	r22, r24
     c36:	c8 01       	movw	r24, r16
     c38:	9a df       	rcall	.-204    	; 0xb6e <Temperatur_display>
		
		PushToAPI(temp, hum);											/* Smider data ud mod Thingspeaks api, så det kan vises på en graf */
     c3a:	b7 01       	movw	r22, r14
     c3c:	c8 01       	movw	r24, r16
	}
}

void Temperatur_ReadOnce(int loop)
{
	unsigned int column = 1;
     c3e:	33 df       	rcall	.-410    	; 0xaa6 <PushToAPI>
     c40:	01 e0       	ldi	r16, 0x01	; 1
		Temperatur_display(temp, hum);									/* Displayer temperaturen og fugtigheden på LCD displayet */
		
		PushToAPI(temp, hum);											/* Smider data ud mod Thingspeaks api, så det kan vises på en graf */
		while(1)
		{
			column = ColumnScan(column);
     c42:	10 e0       	ldi	r17, 0x00	; 0
     c44:	c8 01       	movw	r24, r16
     c46:	a6 d2       	rcall	.+1356   	; 0x1194 <ColumnScan>
			row = ReadRow();
     c48:	8c 01       	movw	r16, r24
     c4a:	da d2       	rcall	.+1460   	; 0x1200 <ReadRow>
			
			if (column + row == 11)
     c4c:	80 0f       	add	r24, r16
     c4e:	91 1f       	adc	r25, r17
     c50:	0b 97       	sbiw	r24, 0x0b	; 11
     c52:	c1 f7       	brne	.-16     	; 0xc44 <Temperatur_ReadOnce+0x54>
			{
				main();
     c54:	02 db       	rcall	.-2556   	; 0x25a <main>
     c56:	f6 cf       	rjmp	.-20     	; 0xc44 <Temperatur_ReadOnce+0x54>
     c58:	c0 5b       	subi	r28, 0xB0	; 176
			}
			
		}
	}
}
     c5a:	df 4f       	sbci	r29, 0xFF	; 255
     c5c:	0f b6       	in	r0, 0x3f	; 63
     c5e:	f8 94       	cli
     c60:	de bf       	out	0x3e, r29	; 62
     c62:	0f be       	out	0x3f, r0	; 63
     c64:	cd bf       	out	0x3d, r28	; 61
     c66:	df 91       	pop	r29
     c68:	cf 91       	pop	r28
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	08 95       	ret

00000c74 <Temperatur_decoder>:
     c74:	86 0f       	add	r24, r22

void Temperatur_decoder(int column, int row)
{
	unsigned int choose = column + row;
	
	switch (choose)
     c76:	97 1f       	adc	r25, r23
     c78:	89 32       	cpi	r24, 0x29	; 41
     c7a:	91 05       	cpc	r25, r1
     c7c:	19 f0       	breq	.+6      	; 0xc84 <Temperatur_decoder+0x10>
     c7e:	8a 97       	sbiw	r24, 0x2a	; 42
     c80:	29 f0       	breq	.+10     	; 0xc8c <Temperatur_decoder+0x18>
     c82:	08 95       	ret
	{
		case 41:
		Temperatur_ReadOnce(1);
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	b3 cf       	rjmp	.-154    	; 0xbf0 <Temperatur_ReadOnce>
		break;
     c8a:	08 95       	ret
		
		case 42:
		Temperatur_ReadOnce(0);
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	af cf       	rjmp	.-162    	; 0xbf0 <Temperatur_ReadOnce>
     c92:	08 95       	ret

00000c94 <Temperatur>:
     c94:	2f e3       	ldi	r18, 0x3F	; 63
     c96:	8d e0       	ldi	r24, 0x0D	; 13
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	21 50       	subi	r18, 0x01	; 1
     c9c:	80 40       	sbci	r24, 0x00	; 0
     c9e:	90 40       	sbci	r25, 0x00	; 0
     ca0:	e1 f7       	brne	.-8      	; 0xc9a <Temperatur+0x6>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <Temperatur+0x10>
     ca4:	00 00       	nop
	_delay_ms(1000);
	
	unsigned int column = 1;
	unsigned int row = 90;
	
	Temperatur_choices();
     ca6:	e5 de       	rcall	.-566    	; 0xa72 <Temperatur_choices>

void Temperatur(void)
{
	_delay_ms(1000);
	
	unsigned int column = 1;
     ca8:	01 e0       	ldi	r16, 0x01	; 1
     caa:	10 e0       	ldi	r17, 0x00	; 0
	Temperatur_choices();
	
	while (1)
	{
		
		column = ColumnScan(column);
     cac:	c8 01       	movw	r24, r16
     cae:	72 d2       	rcall	.+1252   	; 0x1194 <ColumnScan>
		row = ReadRow();
     cb0:	8c 01       	movw	r16, r24
     cb2:	a6 d2       	rcall	.+1356   	; 0x1200 <ReadRow>
		
		Temperatur_decoder(column, row);
     cb4:	ec 01       	movw	r28, r24
     cb6:	bc 01       	movw	r22, r24
     cb8:	c8 01       	movw	r24, r16
     cba:	dc df       	rcall	.-72     	; 0xc74 <Temperatur_decoder>
		
		if (column + row == 11)
     cbc:	c0 0f       	add	r28, r16
     cbe:	d1 1f       	adc	r29, r17
     cc0:	2b 97       	sbiw	r28, 0x0b	; 11
		{
			main();
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <Temperatur+0x32>
     cc4:	ca da       	rcall	.-2668   	; 0x25a <main>
     cc6:	89 e6       	ldi	r24, 0x69	; 105
     cc8:	98 e1       	ldi	r25, 0x18	; 24
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <Temperatur+0x36>
     cce:	00 c0       	rjmp	.+0      	; 0xcd0 <Temperatur+0x3c>
     cd0:	00 00       	nop
     cd2:	ec cf       	rjmp	.-40     	; 0xcac <Temperatur+0x18>

00000cd4 <__subsf3>:
     cd4:	50 58       	subi	r21, 0x80	; 128

00000cd6 <__addsf3>:
     cd6:	bb 27       	eor	r27, r27
     cd8:	aa 27       	eor	r26, r26
     cda:	0e d0       	rcall	.+28     	; 0xcf8 <__addsf3x>
     cdc:	4d c1       	rjmp	.+666    	; 0xf78 <__fp_round>
     cde:	3e d1       	rcall	.+636    	; 0xf5c <__fp_pscA>
     ce0:	30 f0       	brcs	.+12     	; 0xcee <__addsf3+0x18>
     ce2:	43 d1       	rcall	.+646    	; 0xf6a <__fp_pscB>
     ce4:	20 f0       	brcs	.+8      	; 0xcee <__addsf3+0x18>
     ce6:	31 f4       	brne	.+12     	; 0xcf4 <__addsf3+0x1e>
     ce8:	9f 3f       	cpi	r25, 0xFF	; 255
     cea:	11 f4       	brne	.+4      	; 0xcf0 <__addsf3+0x1a>
     cec:	1e f4       	brtc	.+6      	; 0xcf4 <__addsf3+0x1e>
     cee:	33 c1       	rjmp	.+614    	; 0xf56 <__fp_nan>
     cf0:	0e f4       	brtc	.+2      	; 0xcf4 <__addsf3+0x1e>
     cf2:	e0 95       	com	r30
     cf4:	e7 fb       	bst	r30, 7
     cf6:	29 c1       	rjmp	.+594    	; 0xf4a <__fp_inf>

00000cf8 <__addsf3x>:
     cf8:	e9 2f       	mov	r30, r25
     cfa:	4f d1       	rcall	.+670    	; 0xf9a <__fp_split3>
     cfc:	80 f3       	brcs	.-32     	; 0xcde <__addsf3+0x8>
     cfe:	ba 17       	cp	r27, r26
     d00:	62 07       	cpc	r22, r18
     d02:	73 07       	cpc	r23, r19
     d04:	84 07       	cpc	r24, r20
     d06:	95 07       	cpc	r25, r21
     d08:	18 f0       	brcs	.+6      	; 0xd10 <__addsf3x+0x18>
     d0a:	71 f4       	brne	.+28     	; 0xd28 <__addsf3x+0x30>
     d0c:	9e f5       	brtc	.+102    	; 0xd74 <__addsf3x+0x7c>
     d0e:	67 c1       	rjmp	.+718    	; 0xfde <__fp_zero>
     d10:	0e f4       	brtc	.+2      	; 0xd14 <__addsf3x+0x1c>
     d12:	e0 95       	com	r30
     d14:	0b 2e       	mov	r0, r27
     d16:	ba 2f       	mov	r27, r26
     d18:	a0 2d       	mov	r26, r0
     d1a:	0b 01       	movw	r0, r22
     d1c:	b9 01       	movw	r22, r18
     d1e:	90 01       	movw	r18, r0
     d20:	0c 01       	movw	r0, r24
     d22:	ca 01       	movw	r24, r20
     d24:	a0 01       	movw	r20, r0
     d26:	11 24       	eor	r1, r1
     d28:	ff 27       	eor	r31, r31
     d2a:	59 1b       	sub	r21, r25
     d2c:	99 f0       	breq	.+38     	; 0xd54 <__addsf3x+0x5c>
     d2e:	59 3f       	cpi	r21, 0xF9	; 249
     d30:	50 f4       	brcc	.+20     	; 0xd46 <__addsf3x+0x4e>
     d32:	50 3e       	cpi	r21, 0xE0	; 224
     d34:	68 f1       	brcs	.+90     	; 0xd90 <__addsf3x+0x98>
     d36:	1a 16       	cp	r1, r26
     d38:	f0 40       	sbci	r31, 0x00	; 0
     d3a:	a2 2f       	mov	r26, r18
     d3c:	23 2f       	mov	r18, r19
     d3e:	34 2f       	mov	r19, r20
     d40:	44 27       	eor	r20, r20
     d42:	58 5f       	subi	r21, 0xF8	; 248
     d44:	f3 cf       	rjmp	.-26     	; 0xd2c <__addsf3x+0x34>
     d46:	46 95       	lsr	r20
     d48:	37 95       	ror	r19
     d4a:	27 95       	ror	r18
     d4c:	a7 95       	ror	r26
     d4e:	f0 40       	sbci	r31, 0x00	; 0
     d50:	53 95       	inc	r21
     d52:	c9 f7       	brne	.-14     	; 0xd46 <__addsf3x+0x4e>
     d54:	7e f4       	brtc	.+30     	; 0xd74 <__addsf3x+0x7c>
     d56:	1f 16       	cp	r1, r31
     d58:	ba 0b       	sbc	r27, r26
     d5a:	62 0b       	sbc	r22, r18
     d5c:	73 0b       	sbc	r23, r19
     d5e:	84 0b       	sbc	r24, r20
     d60:	ba f0       	brmi	.+46     	; 0xd90 <__addsf3x+0x98>
     d62:	91 50       	subi	r25, 0x01	; 1
     d64:	a1 f0       	breq	.+40     	; 0xd8e <__addsf3x+0x96>
     d66:	ff 0f       	add	r31, r31
     d68:	bb 1f       	adc	r27, r27
     d6a:	66 1f       	adc	r22, r22
     d6c:	77 1f       	adc	r23, r23
     d6e:	88 1f       	adc	r24, r24
     d70:	c2 f7       	brpl	.-16     	; 0xd62 <__addsf3x+0x6a>
     d72:	0e c0       	rjmp	.+28     	; 0xd90 <__addsf3x+0x98>
     d74:	ba 0f       	add	r27, r26
     d76:	62 1f       	adc	r22, r18
     d78:	73 1f       	adc	r23, r19
     d7a:	84 1f       	adc	r24, r20
     d7c:	48 f4       	brcc	.+18     	; 0xd90 <__addsf3x+0x98>
     d7e:	87 95       	ror	r24
     d80:	77 95       	ror	r23
     d82:	67 95       	ror	r22
     d84:	b7 95       	ror	r27
     d86:	f7 95       	ror	r31
     d88:	9e 3f       	cpi	r25, 0xFE	; 254
     d8a:	08 f0       	brcs	.+2      	; 0xd8e <__addsf3x+0x96>
     d8c:	b3 cf       	rjmp	.-154    	; 0xcf4 <__addsf3+0x1e>
     d8e:	93 95       	inc	r25
     d90:	88 0f       	add	r24, r24
     d92:	08 f0       	brcs	.+2      	; 0xd96 <__addsf3x+0x9e>
     d94:	99 27       	eor	r25, r25
     d96:	ee 0f       	add	r30, r30
     d98:	97 95       	ror	r25
     d9a:	87 95       	ror	r24
     d9c:	08 95       	ret

00000d9e <__divsf3>:
     d9e:	0c d0       	rcall	.+24     	; 0xdb8 <__divsf3x>
     da0:	eb c0       	rjmp	.+470    	; 0xf78 <__fp_round>
     da2:	e3 d0       	rcall	.+454    	; 0xf6a <__fp_pscB>
     da4:	40 f0       	brcs	.+16     	; 0xdb6 <__divsf3+0x18>
     da6:	da d0       	rcall	.+436    	; 0xf5c <__fp_pscA>
     da8:	30 f0       	brcs	.+12     	; 0xdb6 <__divsf3+0x18>
     daa:	21 f4       	brne	.+8      	; 0xdb4 <__divsf3+0x16>
     dac:	5f 3f       	cpi	r21, 0xFF	; 255
     dae:	19 f0       	breq	.+6      	; 0xdb6 <__divsf3+0x18>
     db0:	cc c0       	rjmp	.+408    	; 0xf4a <__fp_inf>
     db2:	51 11       	cpse	r21, r1
     db4:	15 c1       	rjmp	.+554    	; 0xfe0 <__fp_szero>
     db6:	cf c0       	rjmp	.+414    	; 0xf56 <__fp_nan>

00000db8 <__divsf3x>:
     db8:	f0 d0       	rcall	.+480    	; 0xf9a <__fp_split3>
     dba:	98 f3       	brcs	.-26     	; 0xda2 <__divsf3+0x4>

00000dbc <__divsf3_pse>:
     dbc:	99 23       	and	r25, r25
     dbe:	c9 f3       	breq	.-14     	; 0xdb2 <__divsf3+0x14>
     dc0:	55 23       	and	r21, r21
     dc2:	b1 f3       	breq	.-20     	; 0xdb0 <__divsf3+0x12>
     dc4:	95 1b       	sub	r25, r21
     dc6:	55 0b       	sbc	r21, r21
     dc8:	bb 27       	eor	r27, r27
     dca:	aa 27       	eor	r26, r26
     dcc:	62 17       	cp	r22, r18
     dce:	73 07       	cpc	r23, r19
     dd0:	84 07       	cpc	r24, r20
     dd2:	38 f0       	brcs	.+14     	; 0xde2 <__divsf3_pse+0x26>
     dd4:	9f 5f       	subi	r25, 0xFF	; 255
     dd6:	5f 4f       	sbci	r21, 0xFF	; 255
     dd8:	22 0f       	add	r18, r18
     dda:	33 1f       	adc	r19, r19
     ddc:	44 1f       	adc	r20, r20
     dde:	aa 1f       	adc	r26, r26
     de0:	a9 f3       	breq	.-22     	; 0xdcc <__divsf3_pse+0x10>
     de2:	33 d0       	rcall	.+102    	; 0xe4a <__divsf3_pse+0x8e>
     de4:	0e 2e       	mov	r0, r30
     de6:	3a f0       	brmi	.+14     	; 0xdf6 <__divsf3_pse+0x3a>
     de8:	e0 e8       	ldi	r30, 0x80	; 128
     dea:	30 d0       	rcall	.+96     	; 0xe4c <__divsf3_pse+0x90>
     dec:	91 50       	subi	r25, 0x01	; 1
     dee:	50 40       	sbci	r21, 0x00	; 0
     df0:	e6 95       	lsr	r30
     df2:	00 1c       	adc	r0, r0
     df4:	ca f7       	brpl	.-14     	; 0xde8 <__divsf3_pse+0x2c>
     df6:	29 d0       	rcall	.+82     	; 0xe4a <__divsf3_pse+0x8e>
     df8:	fe 2f       	mov	r31, r30
     dfa:	27 d0       	rcall	.+78     	; 0xe4a <__divsf3_pse+0x8e>
     dfc:	66 0f       	add	r22, r22
     dfe:	77 1f       	adc	r23, r23
     e00:	88 1f       	adc	r24, r24
     e02:	bb 1f       	adc	r27, r27
     e04:	26 17       	cp	r18, r22
     e06:	37 07       	cpc	r19, r23
     e08:	48 07       	cpc	r20, r24
     e0a:	ab 07       	cpc	r26, r27
     e0c:	b0 e8       	ldi	r27, 0x80	; 128
     e0e:	09 f0       	breq	.+2      	; 0xe12 <__divsf3_pse+0x56>
     e10:	bb 0b       	sbc	r27, r27
     e12:	80 2d       	mov	r24, r0
     e14:	bf 01       	movw	r22, r30
     e16:	ff 27       	eor	r31, r31
     e18:	93 58       	subi	r25, 0x83	; 131
     e1a:	5f 4f       	sbci	r21, 0xFF	; 255
     e1c:	2a f0       	brmi	.+10     	; 0xe28 <__divsf3_pse+0x6c>
     e1e:	9e 3f       	cpi	r25, 0xFE	; 254
     e20:	51 05       	cpc	r21, r1
     e22:	68 f0       	brcs	.+26     	; 0xe3e <__divsf3_pse+0x82>
     e24:	92 c0       	rjmp	.+292    	; 0xf4a <__fp_inf>
     e26:	dc c0       	rjmp	.+440    	; 0xfe0 <__fp_szero>
     e28:	5f 3f       	cpi	r21, 0xFF	; 255
     e2a:	ec f3       	brlt	.-6      	; 0xe26 <__divsf3_pse+0x6a>
     e2c:	98 3e       	cpi	r25, 0xE8	; 232
     e2e:	dc f3       	brlt	.-10     	; 0xe26 <__divsf3_pse+0x6a>
     e30:	86 95       	lsr	r24
     e32:	77 95       	ror	r23
     e34:	67 95       	ror	r22
     e36:	b7 95       	ror	r27
     e38:	f7 95       	ror	r31
     e3a:	9f 5f       	subi	r25, 0xFF	; 255
     e3c:	c9 f7       	brne	.-14     	; 0xe30 <__divsf3_pse+0x74>
     e3e:	88 0f       	add	r24, r24
     e40:	91 1d       	adc	r25, r1
     e42:	96 95       	lsr	r25
     e44:	87 95       	ror	r24
     e46:	97 f9       	bld	r25, 7
     e48:	08 95       	ret
     e4a:	e1 e0       	ldi	r30, 0x01	; 1
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	bb 1f       	adc	r27, r27
     e54:	62 17       	cp	r22, r18
     e56:	73 07       	cpc	r23, r19
     e58:	84 07       	cpc	r24, r20
     e5a:	ba 07       	cpc	r27, r26
     e5c:	20 f0       	brcs	.+8      	; 0xe66 <__divsf3_pse+0xaa>
     e5e:	62 1b       	sub	r22, r18
     e60:	73 0b       	sbc	r23, r19
     e62:	84 0b       	sbc	r24, r20
     e64:	ba 0b       	sbc	r27, r26
     e66:	ee 1f       	adc	r30, r30
     e68:	88 f7       	brcc	.-30     	; 0xe4c <__divsf3_pse+0x90>
     e6a:	e0 95       	com	r30
     e6c:	08 95       	ret

00000e6e <__fixsfsi>:
     e6e:	04 d0       	rcall	.+8      	; 0xe78 <__fixunssfsi>
     e70:	68 94       	set
     e72:	b1 11       	cpse	r27, r1
     e74:	b5 c0       	rjmp	.+362    	; 0xfe0 <__fp_szero>
     e76:	08 95       	ret

00000e78 <__fixunssfsi>:
     e78:	98 d0       	rcall	.+304    	; 0xfaa <__fp_splitA>
     e7a:	88 f0       	brcs	.+34     	; 0xe9e <__fixunssfsi+0x26>
     e7c:	9f 57       	subi	r25, 0x7F	; 127
     e7e:	90 f0       	brcs	.+36     	; 0xea4 <__fixunssfsi+0x2c>
     e80:	b9 2f       	mov	r27, r25
     e82:	99 27       	eor	r25, r25
     e84:	b7 51       	subi	r27, 0x17	; 23
     e86:	a0 f0       	brcs	.+40     	; 0xeb0 <__fixunssfsi+0x38>
     e88:	d1 f0       	breq	.+52     	; 0xebe <__fixunssfsi+0x46>
     e8a:	66 0f       	add	r22, r22
     e8c:	77 1f       	adc	r23, r23
     e8e:	88 1f       	adc	r24, r24
     e90:	99 1f       	adc	r25, r25
     e92:	1a f0       	brmi	.+6      	; 0xe9a <__fixunssfsi+0x22>
     e94:	ba 95       	dec	r27
     e96:	c9 f7       	brne	.-14     	; 0xe8a <__fixunssfsi+0x12>
     e98:	12 c0       	rjmp	.+36     	; 0xebe <__fixunssfsi+0x46>
     e9a:	b1 30       	cpi	r27, 0x01	; 1
     e9c:	81 f0       	breq	.+32     	; 0xebe <__fixunssfsi+0x46>
     e9e:	9f d0       	rcall	.+318    	; 0xfde <__fp_zero>
     ea0:	b1 e0       	ldi	r27, 0x01	; 1
     ea2:	08 95       	ret
     ea4:	9c c0       	rjmp	.+312    	; 0xfde <__fp_zero>
     ea6:	67 2f       	mov	r22, r23
     ea8:	78 2f       	mov	r23, r24
     eaa:	88 27       	eor	r24, r24
     eac:	b8 5f       	subi	r27, 0xF8	; 248
     eae:	39 f0       	breq	.+14     	; 0xebe <__fixunssfsi+0x46>
     eb0:	b9 3f       	cpi	r27, 0xF9	; 249
     eb2:	cc f3       	brlt	.-14     	; 0xea6 <__fixunssfsi+0x2e>
     eb4:	86 95       	lsr	r24
     eb6:	77 95       	ror	r23
     eb8:	67 95       	ror	r22
     eba:	b3 95       	inc	r27
     ebc:	d9 f7       	brne	.-10     	; 0xeb4 <__fixunssfsi+0x3c>
     ebe:	3e f4       	brtc	.+14     	; 0xece <__fixunssfsi+0x56>
     ec0:	90 95       	com	r25
     ec2:	80 95       	com	r24
     ec4:	70 95       	com	r23
     ec6:	61 95       	neg	r22
     ec8:	7f 4f       	sbci	r23, 0xFF	; 255
     eca:	8f 4f       	sbci	r24, 0xFF	; 255
     ecc:	9f 4f       	sbci	r25, 0xFF	; 255
     ece:	08 95       	ret

00000ed0 <__floatunsisf>:
     ed0:	e8 94       	clt
     ed2:	09 c0       	rjmp	.+18     	; 0xee6 <__floatsisf+0x12>

00000ed4 <__floatsisf>:
     ed4:	97 fb       	bst	r25, 7
     ed6:	3e f4       	brtc	.+14     	; 0xee6 <__floatsisf+0x12>
     ed8:	90 95       	com	r25
     eda:	80 95       	com	r24
     edc:	70 95       	com	r23
     ede:	61 95       	neg	r22
     ee0:	7f 4f       	sbci	r23, 0xFF	; 255
     ee2:	8f 4f       	sbci	r24, 0xFF	; 255
     ee4:	9f 4f       	sbci	r25, 0xFF	; 255
     ee6:	99 23       	and	r25, r25
     ee8:	a9 f0       	breq	.+42     	; 0xf14 <__floatsisf+0x40>
     eea:	f9 2f       	mov	r31, r25
     eec:	96 e9       	ldi	r25, 0x96	; 150
     eee:	bb 27       	eor	r27, r27
     ef0:	93 95       	inc	r25
     ef2:	f6 95       	lsr	r31
     ef4:	87 95       	ror	r24
     ef6:	77 95       	ror	r23
     ef8:	67 95       	ror	r22
     efa:	b7 95       	ror	r27
     efc:	f1 11       	cpse	r31, r1
     efe:	f8 cf       	rjmp	.-16     	; 0xef0 <__floatsisf+0x1c>
     f00:	fa f4       	brpl	.+62     	; 0xf40 <__floatsisf+0x6c>
     f02:	bb 0f       	add	r27, r27
     f04:	11 f4       	brne	.+4      	; 0xf0a <__floatsisf+0x36>
     f06:	60 ff       	sbrs	r22, 0
     f08:	1b c0       	rjmp	.+54     	; 0xf40 <__floatsisf+0x6c>
     f0a:	6f 5f       	subi	r22, 0xFF	; 255
     f0c:	7f 4f       	sbci	r23, 0xFF	; 255
     f0e:	8f 4f       	sbci	r24, 0xFF	; 255
     f10:	9f 4f       	sbci	r25, 0xFF	; 255
     f12:	16 c0       	rjmp	.+44     	; 0xf40 <__floatsisf+0x6c>
     f14:	88 23       	and	r24, r24
     f16:	11 f0       	breq	.+4      	; 0xf1c <__floatsisf+0x48>
     f18:	96 e9       	ldi	r25, 0x96	; 150
     f1a:	11 c0       	rjmp	.+34     	; 0xf3e <__floatsisf+0x6a>
     f1c:	77 23       	and	r23, r23
     f1e:	21 f0       	breq	.+8      	; 0xf28 <__floatsisf+0x54>
     f20:	9e e8       	ldi	r25, 0x8E	; 142
     f22:	87 2f       	mov	r24, r23
     f24:	76 2f       	mov	r23, r22
     f26:	05 c0       	rjmp	.+10     	; 0xf32 <__floatsisf+0x5e>
     f28:	66 23       	and	r22, r22
     f2a:	71 f0       	breq	.+28     	; 0xf48 <__floatsisf+0x74>
     f2c:	96 e8       	ldi	r25, 0x86	; 134
     f2e:	86 2f       	mov	r24, r22
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	60 e0       	ldi	r22, 0x00	; 0
     f34:	2a f0       	brmi	.+10     	; 0xf40 <__floatsisf+0x6c>
     f36:	9a 95       	dec	r25
     f38:	66 0f       	add	r22, r22
     f3a:	77 1f       	adc	r23, r23
     f3c:	88 1f       	adc	r24, r24
     f3e:	da f7       	brpl	.-10     	; 0xf36 <__floatsisf+0x62>
     f40:	88 0f       	add	r24, r24
     f42:	96 95       	lsr	r25
     f44:	87 95       	ror	r24
     f46:	97 f9       	bld	r25, 7
     f48:	08 95       	ret

00000f4a <__fp_inf>:
     f4a:	97 f9       	bld	r25, 7
     f4c:	9f 67       	ori	r25, 0x7F	; 127
     f4e:	80 e8       	ldi	r24, 0x80	; 128
     f50:	70 e0       	ldi	r23, 0x00	; 0
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	08 95       	ret

00000f56 <__fp_nan>:
     f56:	9f ef       	ldi	r25, 0xFF	; 255
     f58:	80 ec       	ldi	r24, 0xC0	; 192
     f5a:	08 95       	ret

00000f5c <__fp_pscA>:
     f5c:	00 24       	eor	r0, r0
     f5e:	0a 94       	dec	r0
     f60:	16 16       	cp	r1, r22
     f62:	17 06       	cpc	r1, r23
     f64:	18 06       	cpc	r1, r24
     f66:	09 06       	cpc	r0, r25
     f68:	08 95       	ret

00000f6a <__fp_pscB>:
     f6a:	00 24       	eor	r0, r0
     f6c:	0a 94       	dec	r0
     f6e:	12 16       	cp	r1, r18
     f70:	13 06       	cpc	r1, r19
     f72:	14 06       	cpc	r1, r20
     f74:	05 06       	cpc	r0, r21
     f76:	08 95       	ret

00000f78 <__fp_round>:
     f78:	09 2e       	mov	r0, r25
     f7a:	03 94       	inc	r0
     f7c:	00 0c       	add	r0, r0
     f7e:	11 f4       	brne	.+4      	; 0xf84 <__fp_round+0xc>
     f80:	88 23       	and	r24, r24
     f82:	52 f0       	brmi	.+20     	; 0xf98 <__fp_round+0x20>
     f84:	bb 0f       	add	r27, r27
     f86:	40 f4       	brcc	.+16     	; 0xf98 <__fp_round+0x20>
     f88:	bf 2b       	or	r27, r31
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__fp_round+0x18>
     f8c:	60 ff       	sbrs	r22, 0
     f8e:	04 c0       	rjmp	.+8      	; 0xf98 <__fp_round+0x20>
     f90:	6f 5f       	subi	r22, 0xFF	; 255
     f92:	7f 4f       	sbci	r23, 0xFF	; 255
     f94:	8f 4f       	sbci	r24, 0xFF	; 255
     f96:	9f 4f       	sbci	r25, 0xFF	; 255
     f98:	08 95       	ret

00000f9a <__fp_split3>:
     f9a:	57 fd       	sbrc	r21, 7
     f9c:	90 58       	subi	r25, 0x80	; 128
     f9e:	44 0f       	add	r20, r20
     fa0:	55 1f       	adc	r21, r21
     fa2:	59 f0       	breq	.+22     	; 0xfba <__fp_splitA+0x10>
     fa4:	5f 3f       	cpi	r21, 0xFF	; 255
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <__fp_splitA+0x1a>
     fa8:	47 95       	ror	r20

00000faa <__fp_splitA>:
     faa:	88 0f       	add	r24, r24
     fac:	97 fb       	bst	r25, 7
     fae:	99 1f       	adc	r25, r25
     fb0:	61 f0       	breq	.+24     	; 0xfca <__fp_splitA+0x20>
     fb2:	9f 3f       	cpi	r25, 0xFF	; 255
     fb4:	79 f0       	breq	.+30     	; 0xfd4 <__fp_splitA+0x2a>
     fb6:	87 95       	ror	r24
     fb8:	08 95       	ret
     fba:	12 16       	cp	r1, r18
     fbc:	13 06       	cpc	r1, r19
     fbe:	14 06       	cpc	r1, r20
     fc0:	55 1f       	adc	r21, r21
     fc2:	f2 cf       	rjmp	.-28     	; 0xfa8 <__fp_split3+0xe>
     fc4:	46 95       	lsr	r20
     fc6:	f1 df       	rcall	.-30     	; 0xfaa <__fp_splitA>
     fc8:	08 c0       	rjmp	.+16     	; 0xfda <__fp_splitA+0x30>
     fca:	16 16       	cp	r1, r22
     fcc:	17 06       	cpc	r1, r23
     fce:	18 06       	cpc	r1, r24
     fd0:	99 1f       	adc	r25, r25
     fd2:	f1 cf       	rjmp	.-30     	; 0xfb6 <__fp_splitA+0xc>
     fd4:	86 95       	lsr	r24
     fd6:	71 05       	cpc	r23, r1
     fd8:	61 05       	cpc	r22, r1
     fda:	08 94       	sec
     fdc:	08 95       	ret

00000fde <__fp_zero>:
     fde:	e8 94       	clt

00000fe0 <__fp_szero>:
     fe0:	bb 27       	eor	r27, r27
     fe2:	66 27       	eor	r22, r22
     fe4:	77 27       	eor	r23, r23
     fe6:	cb 01       	movw	r24, r22
     fe8:	97 f9       	bld	r25, 7
     fea:	08 95       	ret

00000fec <__gesf2>:
     fec:	86 d0       	rcall	.+268    	; 0x10fa <__fp_cmp>
     fee:	08 f4       	brcc	.+2      	; 0xff2 <__gesf2+0x6>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	08 95       	ret

00000ff4 <__mulsf3>:
     ff4:	0b d0       	rcall	.+22     	; 0x100c <__mulsf3x>
     ff6:	c0 cf       	rjmp	.-128    	; 0xf78 <__fp_round>
     ff8:	b1 df       	rcall	.-158    	; 0xf5c <__fp_pscA>
     ffa:	28 f0       	brcs	.+10     	; 0x1006 <__mulsf3+0x12>
     ffc:	b6 df       	rcall	.-148    	; 0xf6a <__fp_pscB>
     ffe:	18 f0       	brcs	.+6      	; 0x1006 <__mulsf3+0x12>
    1000:	95 23       	and	r25, r21
    1002:	09 f0       	breq	.+2      	; 0x1006 <__mulsf3+0x12>
    1004:	a2 cf       	rjmp	.-188    	; 0xf4a <__fp_inf>
    1006:	a7 cf       	rjmp	.-178    	; 0xf56 <__fp_nan>
    1008:	11 24       	eor	r1, r1
    100a:	ea cf       	rjmp	.-44     	; 0xfe0 <__fp_szero>

0000100c <__mulsf3x>:
    100c:	c6 df       	rcall	.-116    	; 0xf9a <__fp_split3>
    100e:	a0 f3       	brcs	.-24     	; 0xff8 <__mulsf3+0x4>

00001010 <__mulsf3_pse>:
    1010:	95 9f       	mul	r25, r21
    1012:	d1 f3       	breq	.-12     	; 0x1008 <__mulsf3+0x14>
    1014:	95 0f       	add	r25, r21
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	55 1f       	adc	r21, r21
    101a:	62 9f       	mul	r22, r18
    101c:	f0 01       	movw	r30, r0
    101e:	72 9f       	mul	r23, r18
    1020:	bb 27       	eor	r27, r27
    1022:	f0 0d       	add	r31, r0
    1024:	b1 1d       	adc	r27, r1
    1026:	63 9f       	mul	r22, r19
    1028:	aa 27       	eor	r26, r26
    102a:	f0 0d       	add	r31, r0
    102c:	b1 1d       	adc	r27, r1
    102e:	aa 1f       	adc	r26, r26
    1030:	64 9f       	mul	r22, r20
    1032:	66 27       	eor	r22, r22
    1034:	b0 0d       	add	r27, r0
    1036:	a1 1d       	adc	r26, r1
    1038:	66 1f       	adc	r22, r22
    103a:	82 9f       	mul	r24, r18
    103c:	22 27       	eor	r18, r18
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	62 1f       	adc	r22, r18
    1044:	73 9f       	mul	r23, r19
    1046:	b0 0d       	add	r27, r0
    1048:	a1 1d       	adc	r26, r1
    104a:	62 1f       	adc	r22, r18
    104c:	83 9f       	mul	r24, r19
    104e:	a0 0d       	add	r26, r0
    1050:	61 1d       	adc	r22, r1
    1052:	22 1f       	adc	r18, r18
    1054:	74 9f       	mul	r23, r20
    1056:	33 27       	eor	r19, r19
    1058:	a0 0d       	add	r26, r0
    105a:	61 1d       	adc	r22, r1
    105c:	23 1f       	adc	r18, r19
    105e:	84 9f       	mul	r24, r20
    1060:	60 0d       	add	r22, r0
    1062:	21 1d       	adc	r18, r1
    1064:	82 2f       	mov	r24, r18
    1066:	76 2f       	mov	r23, r22
    1068:	6a 2f       	mov	r22, r26
    106a:	11 24       	eor	r1, r1
    106c:	9f 57       	subi	r25, 0x7F	; 127
    106e:	50 40       	sbci	r21, 0x00	; 0
    1070:	8a f0       	brmi	.+34     	; 0x1094 <__mulsf3_pse+0x84>
    1072:	e1 f0       	breq	.+56     	; 0x10ac <__mulsf3_pse+0x9c>
    1074:	88 23       	and	r24, r24
    1076:	4a f0       	brmi	.+18     	; 0x108a <__mulsf3_pse+0x7a>
    1078:	ee 0f       	add	r30, r30
    107a:	ff 1f       	adc	r31, r31
    107c:	bb 1f       	adc	r27, r27
    107e:	66 1f       	adc	r22, r22
    1080:	77 1f       	adc	r23, r23
    1082:	88 1f       	adc	r24, r24
    1084:	91 50       	subi	r25, 0x01	; 1
    1086:	50 40       	sbci	r21, 0x00	; 0
    1088:	a9 f7       	brne	.-22     	; 0x1074 <__mulsf3_pse+0x64>
    108a:	9e 3f       	cpi	r25, 0xFE	; 254
    108c:	51 05       	cpc	r21, r1
    108e:	70 f0       	brcs	.+28     	; 0x10ac <__mulsf3_pse+0x9c>
    1090:	5c cf       	rjmp	.-328    	; 0xf4a <__fp_inf>
    1092:	a6 cf       	rjmp	.-180    	; 0xfe0 <__fp_szero>
    1094:	5f 3f       	cpi	r21, 0xFF	; 255
    1096:	ec f3       	brlt	.-6      	; 0x1092 <__mulsf3_pse+0x82>
    1098:	98 3e       	cpi	r25, 0xE8	; 232
    109a:	dc f3       	brlt	.-10     	; 0x1092 <__mulsf3_pse+0x82>
    109c:	86 95       	lsr	r24
    109e:	77 95       	ror	r23
    10a0:	67 95       	ror	r22
    10a2:	b7 95       	ror	r27
    10a4:	f7 95       	ror	r31
    10a6:	e7 95       	ror	r30
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	c1 f7       	brne	.-16     	; 0x109c <__mulsf3_pse+0x8c>
    10ac:	fe 2b       	or	r31, r30
    10ae:	88 0f       	add	r24, r24
    10b0:	91 1d       	adc	r25, r1
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	97 f9       	bld	r25, 7
    10b8:	08 95       	ret

000010ba <round>:
    10ba:	77 df       	rcall	.-274    	; 0xfaa <__fp_splitA>
    10bc:	e0 f0       	brcs	.+56     	; 0x10f6 <round+0x3c>
    10be:	9e 37       	cpi	r25, 0x7E	; 126
    10c0:	d8 f0       	brcs	.+54     	; 0x10f8 <round+0x3e>
    10c2:	96 39       	cpi	r25, 0x96	; 150
    10c4:	b8 f4       	brcc	.+46     	; 0x10f4 <round+0x3a>
    10c6:	9e 38       	cpi	r25, 0x8E	; 142
    10c8:	48 f4       	brcc	.+18     	; 0x10dc <round+0x22>
    10ca:	67 2f       	mov	r22, r23
    10cc:	78 2f       	mov	r23, r24
    10ce:	88 27       	eor	r24, r24
    10d0:	98 5f       	subi	r25, 0xF8	; 248
    10d2:	f9 cf       	rjmp	.-14     	; 0x10c6 <round+0xc>
    10d4:	86 95       	lsr	r24
    10d6:	77 95       	ror	r23
    10d8:	67 95       	ror	r22
    10da:	93 95       	inc	r25
    10dc:	95 39       	cpi	r25, 0x95	; 149
    10de:	d0 f3       	brcs	.-12     	; 0x10d4 <round+0x1a>
    10e0:	b6 2f       	mov	r27, r22
    10e2:	b1 70       	andi	r27, 0x01	; 1
    10e4:	6b 0f       	add	r22, r27
    10e6:	71 1d       	adc	r23, r1
    10e8:	81 1d       	adc	r24, r1
    10ea:	20 f4       	brcc	.+8      	; 0x10f4 <round+0x3a>
    10ec:	87 95       	ror	r24
    10ee:	77 95       	ror	r23
    10f0:	67 95       	ror	r22
    10f2:	93 95       	inc	r25
    10f4:	26 c0       	rjmp	.+76     	; 0x1142 <__fp_mintl>
    10f6:	40 c0       	rjmp	.+128    	; 0x1178 <__fp_mpack>
    10f8:	73 cf       	rjmp	.-282    	; 0xfe0 <__fp_szero>

000010fa <__fp_cmp>:
    10fa:	99 0f       	add	r25, r25
    10fc:	00 08       	sbc	r0, r0
    10fe:	55 0f       	add	r21, r21
    1100:	aa 0b       	sbc	r26, r26
    1102:	e0 e8       	ldi	r30, 0x80	; 128
    1104:	fe ef       	ldi	r31, 0xFE	; 254
    1106:	16 16       	cp	r1, r22
    1108:	17 06       	cpc	r1, r23
    110a:	e8 07       	cpc	r30, r24
    110c:	f9 07       	cpc	r31, r25
    110e:	c0 f0       	brcs	.+48     	; 0x1140 <__fp_cmp+0x46>
    1110:	12 16       	cp	r1, r18
    1112:	13 06       	cpc	r1, r19
    1114:	e4 07       	cpc	r30, r20
    1116:	f5 07       	cpc	r31, r21
    1118:	98 f0       	brcs	.+38     	; 0x1140 <__fp_cmp+0x46>
    111a:	62 1b       	sub	r22, r18
    111c:	73 0b       	sbc	r23, r19
    111e:	84 0b       	sbc	r24, r20
    1120:	95 0b       	sbc	r25, r21
    1122:	39 f4       	brne	.+14     	; 0x1132 <__fp_cmp+0x38>
    1124:	0a 26       	eor	r0, r26
    1126:	61 f0       	breq	.+24     	; 0x1140 <__fp_cmp+0x46>
    1128:	23 2b       	or	r18, r19
    112a:	24 2b       	or	r18, r20
    112c:	25 2b       	or	r18, r21
    112e:	21 f4       	brne	.+8      	; 0x1138 <__fp_cmp+0x3e>
    1130:	08 95       	ret
    1132:	0a 26       	eor	r0, r26
    1134:	09 f4       	brne	.+2      	; 0x1138 <__fp_cmp+0x3e>
    1136:	a1 40       	sbci	r26, 0x01	; 1
    1138:	a6 95       	lsr	r26
    113a:	8f ef       	ldi	r24, 0xFF	; 255
    113c:	81 1d       	adc	r24, r1
    113e:	81 1d       	adc	r24, r1
    1140:	08 95       	ret

00001142 <__fp_mintl>:
    1142:	88 23       	and	r24, r24
    1144:	71 f4       	brne	.+28     	; 0x1162 <__fp_mintl+0x20>
    1146:	77 23       	and	r23, r23
    1148:	21 f0       	breq	.+8      	; 0x1152 <__fp_mintl+0x10>
    114a:	98 50       	subi	r25, 0x08	; 8
    114c:	87 2b       	or	r24, r23
    114e:	76 2f       	mov	r23, r22
    1150:	07 c0       	rjmp	.+14     	; 0x1160 <__fp_mintl+0x1e>
    1152:	66 23       	and	r22, r22
    1154:	11 f4       	brne	.+4      	; 0x115a <__fp_mintl+0x18>
    1156:	99 27       	eor	r25, r25
    1158:	0d c0       	rjmp	.+26     	; 0x1174 <__fp_mintl+0x32>
    115a:	90 51       	subi	r25, 0x10	; 16
    115c:	86 2b       	or	r24, r22
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	60 e0       	ldi	r22, 0x00	; 0
    1162:	2a f0       	brmi	.+10     	; 0x116e <__fp_mintl+0x2c>
    1164:	9a 95       	dec	r25
    1166:	66 0f       	add	r22, r22
    1168:	77 1f       	adc	r23, r23
    116a:	88 1f       	adc	r24, r24
    116c:	da f7       	brpl	.-10     	; 0x1164 <__fp_mintl+0x22>
    116e:	88 0f       	add	r24, r24
    1170:	96 95       	lsr	r25
    1172:	87 95       	ror	r24
    1174:	97 f9       	bld	r25, 7
    1176:	08 95       	ret

00001178 <__fp_mpack>:
    1178:	9f 3f       	cpi	r25, 0xFF	; 255
    117a:	31 f0       	breq	.+12     	; 0x1188 <__fp_mpack_finite+0xc>

0000117c <__fp_mpack_finite>:
    117c:	91 50       	subi	r25, 0x01	; 1
    117e:	20 f4       	brcc	.+8      	; 0x1188 <__fp_mpack_finite+0xc>
    1180:	87 95       	ror	r24
    1182:	77 95       	ror	r23
    1184:	67 95       	ror	r22
    1186:	b7 95       	ror	r27
    1188:	88 0f       	add	r24, r24
    118a:	91 1d       	adc	r25, r1
    118c:	96 95       	lsr	r25
    118e:	87 95       	ror	r24
    1190:	97 f9       	bld	r25, 7
    1192:	08 95       	ret

00001194 <ColumnScan>:
char reset_char;

///ColumnScan kører alle Columns (Kolonner) igennem og sætter en efter en til lav, en efter en. Inden den næste Kollonne køres igennem, bliver alle kolonner sat til høj for at resette det.
int ColumnScan(int column){
	
	switch (column)
    1194:	82 30       	cpi	r24, 0x02	; 2
    1196:	91 05       	cpc	r25, r1
    1198:	41 f1       	breq	.+80     	; 0x11ea <ColumnScan+0x56>
    119a:	1c f4       	brge	.+6      	; 0x11a2 <ColumnScan+0xe>
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	39 f0       	breq	.+14     	; 0x11ae <ColumnScan+0x1a>
    11a0:	2e c0       	rjmp	.+92     	; 0x11fe <ColumnScan+0x6a>
    11a2:	83 30       	cpi	r24, 0x03	; 3
    11a4:	91 05       	cpc	r25, r1
    11a6:	b9 f0       	breq	.+46     	; 0x11d6 <ColumnScan+0x42>
    11a8:	04 97       	sbiw	r24, 0x04	; 4
    11aa:	59 f0       	breq	.+22     	; 0x11c2 <ColumnScan+0x2e>
    11ac:	28 c0       	rjmp	.+80     	; 0x11fe <ColumnScan+0x6a>
	{
		case 1:
		reset_char = PORTK & reset_col;
    11ae:	e8 e0       	ldi	r30, 0x08	; 8
    11b0:	f1 e0       	ldi	r31, 0x01	; 1
    11b2:	80 81       	ld	r24, Z
		reset_char |= col4;				// 1111 1110
    11b4:	8e ef       	ldi	r24, 0xFE	; 254
    11b6:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11ba:	80 83       	st	Z, r24
		return 4;
    11bc:	84 e0       	ldi	r24, 0x04	; 4
    11be:	90 e0       	ldi	r25, 0x00	; 0
    11c0:	08 95       	ret
		break;
		
		case 4:
		reset_char = PORTK & reset_col;
    11c2:	e8 e0       	ldi	r30, 0x08	; 8
    11c4:	f1 e0       	ldi	r31, 0x01	; 1
    11c6:	80 81       	ld	r24, Z
		reset_char |= col3;				// 1111 1011
    11c8:	8d ef       	ldi	r24, 0xFD	; 253
    11ca:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11ce:	80 83       	st	Z, r24
		return 3;
    11d0:	83 e0       	ldi	r24, 0x03	; 3
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	08 95       	ret
		break;
		
		case 3:
		reset_char = PORTK & reset_col;
    11d6:	e8 e0       	ldi	r30, 0x08	; 8
    11d8:	f1 e0       	ldi	r31, 0x01	; 1
    11da:	80 81       	ld	r24, Z
		reset_char |= col2;				// 1110 1111
    11dc:	8b ef       	ldi	r24, 0xFB	; 251
    11de:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11e2:	80 83       	st	Z, r24
		return 2;
    11e4:	82 e0       	ldi	r24, 0x02	; 2
    11e6:	90 e0       	ldi	r25, 0x00	; 0
    11e8:	08 95       	ret
		break;
		
		case 2:
		reset_char = PORTK & reset_col;
    11ea:	e8 e0       	ldi	r30, 0x08	; 8
    11ec:	f1 e0       	ldi	r31, 0x01	; 1
    11ee:	80 81       	ld	r24, Z
		reset_char |= col1;				// 1011 1111
    11f0:	87 ef       	ldi	r24, 0xF7	; 247
    11f2:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11f6:	80 83       	st	Z, r24
		return 1;
    11f8:	81 e0       	ldi	r24, 0x01	; 1
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	08 95       	ret
		break;
	}
	
    11fe:	08 95       	ret

00001200 <ReadRow>:
    1200:	8f e3       	ldi	r24, 0x3F	; 63
    1202:	9c e9       	ldi	r25, 0x9C	; 156
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	f1 f7       	brne	.-4      	; 0x1204 <ReadRow+0x4>
    1208:	00 c0       	rjmp	.+0      	; 0x120a <ReadRow+0xa>
    120a:	00 00       	nop
///ReadRow
/** ReadRow tjekker om en knap i en bestemt række bliver trykket på. Derefter returner den et nummer som så bliver brugt til at decoding af hvad der er blevet trykket på.
(f.eks. Den øverste række er 40, dvs. knap 43 er Række 4 (40) og Kolonne 3 (4) som så er [3] på Keyboardet */
int ReadRow(){
	_delay_ms(10);
	if (!(PINK & (1<<PINK4)))
    120c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1210:	84 ff       	sbrs	r24, 4
    1212:	0f c0       	rjmp	.+30     	; 0x1232 <ReadRow+0x32>
	{
		return 10;
	}
	if (!(PINK & (1<<PINK5)))
    1214:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1218:	85 ff       	sbrs	r24, 5
    121a:	0e c0       	rjmp	.+28     	; 0x1238 <ReadRow+0x38>
	{
		return 20;
	}
	if (!(PINK & (1<<PINK6)))
    121c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1220:	86 ff       	sbrs	r24, 6
    1222:	0d c0       	rjmp	.+26     	; 0x123e <ReadRow+0x3e>
	{
		return 30;
	}
	if (!(PINK & (1<<PINK7)))
    1224:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1228:	88 23       	and	r24, r24
    122a:	64 f4       	brge	.+24     	; 0x1244 <ReadRow+0x44>
	{
		return 40;
	}
	return 90;
    122c:	8a e5       	ldi	r24, 0x5A	; 90
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret
(f.eks. Den øverste række er 40, dvs. knap 43 er Række 4 (40) og Kolonne 3 (4) som så er [3] på Keyboardet */
int ReadRow(){
	_delay_ms(10);
	if (!(PINK & (1<<PINK4)))
	{
		return 10;
    1232:	8a e0       	ldi	r24, 0x0A	; 10
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	08 95       	ret
	}
	if (!(PINK & (1<<PINK5)))
	{
		return 20;
    1238:	84 e1       	ldi	r24, 0x14	; 20
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	08 95       	ret
	}
	if (!(PINK & (1<<PINK6)))
	{
		return 30;
    123e:	8e e1       	ldi	r24, 0x1E	; 30
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	08 95       	ret
	}
	if (!(PINK & (1<<PINK7)))
	{
		return 40;
    1244:	88 e2       	ldi	r24, 0x28	; 40
    1246:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 90;
    1248:	08 95       	ret

0000124a <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
    124a:	a5 9a       	sbi	0x14, 5	; 20
    124c:	00 00       	nop
    124e:	a5 98       	cbi	0x14, 5	; 20
    1250:	08 95       	ret

00001252 <lcd_write>:
    1252:	cf 93       	push	r28
    1254:	c8 2f       	mov	r28, r24
    1256:	66 23       	and	r22, r22
    1258:	11 f0       	breq	.+4      	; 0x125e <lcd_write+0xc>
    125a:	74 9a       	sbi	0x0e, 4	; 14
    125c:	01 c0       	rjmp	.+2      	; 0x1260 <lcd_write+0xe>
    125e:	74 98       	cbi	0x0e, 4	; 14
    1260:	75 98       	cbi	0x0e, 5	; 14
    1262:	6b 9a       	sbi	0x0d, 3	; 13
    1264:	e1 e0       	ldi	r30, 0x01	; 1
    1266:	f1 e0       	ldi	r31, 0x01	; 1
    1268:	80 81       	ld	r24, Z
    126a:	88 60       	ori	r24, 0x08	; 8
    126c:	80 83       	st	Z, r24
    126e:	80 81       	ld	r24, Z
    1270:	80 61       	ori	r24, 0x10	; 16
    1272:	80 83       	st	Z, r24
    1274:	80 81       	ld	r24, Z
    1276:	80 62       	ori	r24, 0x20	; 32
    1278:	80 83       	st	Z, r24
    127a:	e2 e0       	ldi	r30, 0x02	; 2
    127c:	f1 e0       	ldi	r31, 0x01	; 1
    127e:	80 81       	ld	r24, Z
    1280:	8f 7d       	andi	r24, 0xDF	; 223
    1282:	80 83       	st	Z, r24
    1284:	80 81       	ld	r24, Z
    1286:	8f 7e       	andi	r24, 0xEF	; 239
    1288:	80 83       	st	Z, r24
    128a:	80 81       	ld	r24, Z
    128c:	87 7f       	andi	r24, 0xF7	; 247
    128e:	80 83       	st	Z, r24
    1290:	73 98       	cbi	0x0e, 3	; 14
    1292:	cc 23       	and	r28, r28
    1294:	1c f4       	brge	.+6      	; 0x129c <lcd_write+0x4a>
    1296:	80 81       	ld	r24, Z
    1298:	80 62       	ori	r24, 0x20	; 32
    129a:	80 83       	st	Z, r24
    129c:	c6 ff       	sbrs	r28, 6
    129e:	05 c0       	rjmp	.+10     	; 0x12aa <lcd_write+0x58>
    12a0:	e2 e0       	ldi	r30, 0x02	; 2
    12a2:	f1 e0       	ldi	r31, 0x01	; 1
    12a4:	80 81       	ld	r24, Z
    12a6:	80 61       	ori	r24, 0x10	; 16
    12a8:	80 83       	st	Z, r24
    12aa:	c5 ff       	sbrs	r28, 5
    12ac:	05 c0       	rjmp	.+10     	; 0x12b8 <lcd_write+0x66>
    12ae:	e2 e0       	ldi	r30, 0x02	; 2
    12b0:	f1 e0       	ldi	r31, 0x01	; 1
    12b2:	80 81       	ld	r24, Z
    12b4:	88 60       	ori	r24, 0x08	; 8
    12b6:	80 83       	st	Z, r24
    12b8:	c4 fd       	sbrc	r28, 4
    12ba:	73 9a       	sbi	0x0e, 3	; 14
    12bc:	c6 df       	rcall	.-116    	; 0x124a <toggle_e>
    12be:	e2 e0       	ldi	r30, 0x02	; 2
    12c0:	f1 e0       	ldi	r31, 0x01	; 1
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 7d       	andi	r24, 0xDF	; 223
    12c6:	80 83       	st	Z, r24
    12c8:	80 81       	ld	r24, Z
    12ca:	8f 7e       	andi	r24, 0xEF	; 239
    12cc:	80 83       	st	Z, r24
    12ce:	80 81       	ld	r24, Z
    12d0:	87 7f       	andi	r24, 0xF7	; 247
    12d2:	80 83       	st	Z, r24
    12d4:	73 98       	cbi	0x0e, 3	; 14
    12d6:	c3 ff       	sbrs	r28, 3
    12d8:	03 c0       	rjmp	.+6      	; 0x12e0 <lcd_write+0x8e>
    12da:	80 81       	ld	r24, Z
    12dc:	80 62       	ori	r24, 0x20	; 32
    12de:	80 83       	st	Z, r24
    12e0:	c2 ff       	sbrs	r28, 2
    12e2:	05 c0       	rjmp	.+10     	; 0x12ee <lcd_write+0x9c>
    12e4:	e2 e0       	ldi	r30, 0x02	; 2
    12e6:	f1 e0       	ldi	r31, 0x01	; 1
    12e8:	80 81       	ld	r24, Z
    12ea:	80 61       	ori	r24, 0x10	; 16
    12ec:	80 83       	st	Z, r24
    12ee:	c1 ff       	sbrs	r28, 1
    12f0:	05 c0       	rjmp	.+10     	; 0x12fc <lcd_write+0xaa>
    12f2:	e2 e0       	ldi	r30, 0x02	; 2
    12f4:	f1 e0       	ldi	r31, 0x01	; 1
    12f6:	80 81       	ld	r24, Z
    12f8:	88 60       	ori	r24, 0x08	; 8
    12fa:	80 83       	st	Z, r24
    12fc:	c0 fd       	sbrc	r28, 0
    12fe:	73 9a       	sbi	0x0e, 3	; 14
    1300:	a4 df       	rcall	.-184    	; 0x124a <toggle_e>
    1302:	73 9a       	sbi	0x0e, 3	; 14
    1304:	e2 e0       	ldi	r30, 0x02	; 2
    1306:	f1 e0       	ldi	r31, 0x01	; 1
    1308:	80 81       	ld	r24, Z
    130a:	88 60       	ori	r24, 0x08	; 8
    130c:	80 83       	st	Z, r24
    130e:	80 81       	ld	r24, Z
    1310:	80 61       	ori	r24, 0x10	; 16
    1312:	80 83       	st	Z, r24
    1314:	80 81       	ld	r24, Z
    1316:	80 62       	ori	r24, 0x20	; 32
    1318:	80 83       	st	Z, r24
    131a:	cf 91       	pop	r28
    131c:	08 95       	ret

0000131e <lcd_read>:
    131e:	88 23       	and	r24, r24
    1320:	11 f0       	breq	.+4      	; 0x1326 <lcd_read+0x8>
    1322:	74 9a       	sbi	0x0e, 4	; 14
    1324:	01 c0       	rjmp	.+2      	; 0x1328 <lcd_read+0xa>
    1326:	74 98       	cbi	0x0e, 4	; 14
    1328:	75 9a       	sbi	0x0e, 5	; 14
    132a:	6b 98       	cbi	0x0d, 3	; 13
    132c:	e1 e0       	ldi	r30, 0x01	; 1
    132e:	f1 e0       	ldi	r31, 0x01	; 1
    1330:	80 81       	ld	r24, Z
    1332:	87 7f       	andi	r24, 0xF7	; 247
    1334:	80 83       	st	Z, r24
    1336:	80 81       	ld	r24, Z
    1338:	8f 7e       	andi	r24, 0xEF	; 239
    133a:	80 83       	st	Z, r24
    133c:	80 81       	ld	r24, Z
    133e:	8f 7d       	andi	r24, 0xDF	; 223
    1340:	80 83       	st	Z, r24
    1342:	a5 9a       	sbi	0x14, 5	; 20
    1344:	00 00       	nop
    1346:	63 9b       	sbis	0x0c, 3	; 12
    1348:	02 c0       	rjmp	.+4      	; 0x134e <lcd_read+0x30>
    134a:	80 e1       	ldi	r24, 0x10	; 16
    134c:	01 c0       	rjmp	.+2      	; 0x1350 <lcd_read+0x32>
    134e:	80 e0       	ldi	r24, 0x00	; 0
    1350:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1354:	93 fd       	sbrc	r25, 3
    1356:	80 62       	ori	r24, 0x20	; 32
    1358:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    135c:	94 fd       	sbrc	r25, 4
    135e:	80 64       	ori	r24, 0x40	; 64
    1360:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1364:	95 fd       	sbrc	r25, 5
    1366:	80 68       	ori	r24, 0x80	; 128
    1368:	a5 98       	cbi	0x14, 5	; 20
    136a:	00 00       	nop
    136c:	a5 9a       	sbi	0x14, 5	; 20
    136e:	00 00       	nop
    1370:	63 99       	sbic	0x0c, 3	; 12
    1372:	81 60       	ori	r24, 0x01	; 1
    1374:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1378:	93 fd       	sbrc	r25, 3
    137a:	82 60       	ori	r24, 0x02	; 2
    137c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1380:	94 fd       	sbrc	r25, 4
    1382:	84 60       	ori	r24, 0x04	; 4
    1384:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1388:	95 fd       	sbrc	r25, 5
    138a:	88 60       	ori	r24, 0x08	; 8
    138c:	a5 98       	cbi	0x14, 5	; 20
    138e:	08 95       	ret

00001390 <lcd_waitbusy>:
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	c5 df       	rcall	.-118    	; 0x131e <lcd_read>
    1394:	88 23       	and	r24, r24
    1396:	e4 f3       	brlt	.-8      	; 0x1390 <lcd_waitbusy>
    1398:	00 c0       	rjmp	.+0      	; 0x139a <lcd_waitbusy+0xa>
    139a:	00 c0       	rjmp	.+0      	; 0x139c <lcd_waitbusy+0xc>
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	bf cf       	rjmp	.-130    	; 0x131e <lcd_read>
    13a0:	08 95       	ret

000013a2 <lcd_command>:
    13a2:	cf 93       	push	r28
    13a4:	c8 2f       	mov	r28, r24
    13a6:	f4 df       	rcall	.-24     	; 0x1390 <lcd_waitbusy>
    13a8:	60 e0       	ldi	r22, 0x00	; 0
    13aa:	8c 2f       	mov	r24, r28
    13ac:	52 df       	rcall	.-348    	; 0x1252 <lcd_write>
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <lcd_gotoxy>:
    13b2:	61 11       	cpse	r22, r1
    13b4:	03 c0       	rjmp	.+6      	; 0x13bc <lcd_gotoxy+0xa>
    13b6:	80 58       	subi	r24, 0x80	; 128
    13b8:	f4 cf       	rjmp	.-24     	; 0x13a2 <lcd_command>
    13ba:	08 95       	ret
    13bc:	80 54       	subi	r24, 0x40	; 64
    13be:	f1 cf       	rjmp	.-30     	; 0x13a2 <lcd_command>
    13c0:	08 95       	ret

000013c2 <lcd_clrscr>:
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	ee cf       	rjmp	.-36     	; 0x13a2 <lcd_command>
    13c6:	08 95       	ret

000013c8 <lcd_putc>:
    13c8:	cf 93       	push	r28
    13ca:	c8 2f       	mov	r28, r24
    13cc:	e1 df       	rcall	.-62     	; 0x1390 <lcd_waitbusy>
    13ce:	ca 30       	cpi	r28, 0x0A	; 10
    13d0:	41 f4       	brne	.+16     	; 0x13e2 <lcd_putc+0x1a>
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	10 f0       	brcs	.+4      	; 0x13da <lcd_putc+0x12>
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	01 c0       	rjmp	.+2      	; 0x13dc <lcd_putc+0x14>
    13da:	80 e4       	ldi	r24, 0x40	; 64
    13dc:	80 58       	subi	r24, 0x80	; 128
    13de:	e1 df       	rcall	.-62     	; 0x13a2 <lcd_command>
    13e0:	03 c0       	rjmp	.+6      	; 0x13e8 <lcd_putc+0x20>
    13e2:	61 e0       	ldi	r22, 0x01	; 1
    13e4:	8c 2f       	mov	r24, r28
    13e6:	35 df       	rcall	.-406    	; 0x1252 <lcd_write>
    13e8:	cf 91       	pop	r28
    13ea:	08 95       	ret

000013ec <lcd_puts>:
    13ec:	cf 93       	push	r28
    13ee:	df 93       	push	r29
    13f0:	ec 01       	movw	r28, r24
    13f2:	21 96       	adiw	r28, 0x01	; 1
    13f4:	fc 01       	movw	r30, r24
    13f6:	80 81       	ld	r24, Z
    13f8:	88 23       	and	r24, r24
    13fa:	21 f0       	breq	.+8      	; 0x1404 <lcd_puts+0x18>
    13fc:	e5 df       	rcall	.-54     	; 0x13c8 <lcd_putc>
    13fe:	89 91       	ld	r24, Y+
    1400:	81 11       	cpse	r24, r1
    1402:	fc cf       	rjmp	.-8      	; 0x13fc <lcd_puts+0x10>
    1404:	df 91       	pop	r29
    1406:	cf 91       	pop	r28
    1408:	08 95       	ret

0000140a <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    140a:	cf 93       	push	r28
    140c:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    140e:	6c 9a       	sbi	0x0d, 4	; 13
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    1410:	6d 9a       	sbi	0x0d, 5	; 13
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    1412:	9d 9a       	sbi	0x13, 5	; 19
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    1414:	6b 9a       	sbi	0x0d, 3	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    1416:	e1 e0       	ldi	r30, 0x01	; 1
    1418:	f1 e0       	ldi	r31, 0x01	; 1
    141a:	80 81       	ld	r24, Z
    141c:	88 60       	ori	r24, 0x08	; 8
    141e:	80 83       	st	Z, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    1420:	80 81       	ld	r24, Z
    1422:	80 61       	ori	r24, 0x10	; 16
    1424:	80 83       	st	Z, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    1426:	80 81       	ld	r24, Z
    1428:	80 62       	ori	r24, 0x20	; 32
    142a:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    142c:	8f e9       	ldi	r24, 0x9F	; 159
    142e:	9f e0       	ldi	r25, 0x0F	; 15
    1430:	01 97       	sbiw	r24, 0x01	; 1
    1432:	f1 f7       	brne	.-4      	; 0x1430 <lcd_init+0x26>
    1434:	00 c0       	rjmp	.+0      	; 0x1436 <lcd_init+0x2c>
    1436:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
    1438:	e2 e0       	ldi	r30, 0x02	; 2
    143a:	f1 e0       	ldi	r31, 0x01	; 1
    143c:	80 81       	ld	r24, Z
    143e:	88 60       	ori	r24, 0x08	; 8
    1440:	80 83       	st	Z, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    1442:	73 9a       	sbi	0x0e, 3	; 14
    lcd_e_toggle();
    1444:	02 df       	rcall	.-508    	; 0x124a <toggle_e>
    1446:	81 ee       	ldi	r24, 0xE1	; 225
    1448:	94 e0       	ldi	r25, 0x04	; 4
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <lcd_init+0x40>
    144e:	00 c0       	rjmp	.+0      	; 0x1450 <lcd_init+0x46>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
    1450:	00 00       	nop
    1452:	fb de       	rcall	.-522    	; 0x124a <toggle_e>
    1454:	95 e1       	ldi	r25, 0x15	; 21
    1456:	9a 95       	dec	r25
    1458:	f1 f7       	brne	.-4      	; 0x1456 <lcd_init+0x4c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    145a:	00 00       	nop
    145c:	f6 de       	rcall	.-532    	; 0x124a <toggle_e>
    145e:	85 e1       	ldi	r24, 0x15	; 21
    1460:	8a 95       	dec	r24
    1462:	f1 f7       	brne	.-4      	; 0x1460 <lcd_init+0x56>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1464:	00 00       	nop
    lcd_e_toggle();
    1466:	73 98       	cbi	0x0e, 3	; 14
    1468:	f0 de       	rcall	.-544    	; 0x124a <toggle_e>
    146a:	95 e1       	ldi	r25, 0x15	; 21
    146c:	9a 95       	dec	r25
    146e:	f1 f7       	brne	.-4      	; 0x146c <lcd_init+0x62>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    1470:	00 00       	nop
    1472:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1474:	96 df       	rcall	.-212    	; 0x13a2 <lcd_command>
    1476:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
    1478:	94 df       	rcall	.-216    	; 0x13a2 <lcd_command>
    147a:	a3 df       	rcall	.-186    	; 0x13c2 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    147c:	86 e0       	ldi	r24, 0x06	; 6
    147e:	91 df       	rcall	.-222    	; 0x13a2 <lcd_command>
    1480:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
    1482:	8f df       	rcall	.-226    	; 0x13a2 <lcd_command>
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <Pre_display>:
#include "../lcd/lcd.h"

///Pre_display bliver kørt hver gang at LCD displayed skal bruges, dvs. den laver en clear screen og sætter LCD_DISP_ON_CURSOR_BLINK.
void Pre_display()
{
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1488:	8f e0       	ldi	r24, 0x0F	; 15
    148a:	bf df       	rcall	.-130    	; 0x140a <lcd_init>
	lcd_clrscr();
    148c:	9a cf       	rjmp	.-204    	; 0x13c2 <lcd_clrscr>
    148e:	08 95       	ret

00001490 <memcpy>:
    1490:	fb 01       	movw	r30, r22
    1492:	dc 01       	movw	r26, r24
    1494:	02 c0       	rjmp	.+4      	; 0x149a <memcpy+0xa>
    1496:	01 90       	ld	r0, Z+
    1498:	0d 92       	st	X+, r0
    149a:	41 50       	subi	r20, 0x01	; 1
    149c:	50 40       	sbci	r21, 0x00	; 0
    149e:	d8 f7       	brcc	.-10     	; 0x1496 <memcpy+0x6>
    14a0:	08 95       	ret

000014a2 <memmove>:
    14a2:	68 17       	cp	r22, r24
    14a4:	79 07       	cpc	r23, r25
    14a6:	68 f4       	brcc	.+26     	; 0x14c2 <memmove+0x20>
    14a8:	fb 01       	movw	r30, r22
    14aa:	dc 01       	movw	r26, r24
    14ac:	e4 0f       	add	r30, r20
    14ae:	f5 1f       	adc	r31, r21
    14b0:	a4 0f       	add	r26, r20
    14b2:	b5 1f       	adc	r27, r21
    14b4:	02 c0       	rjmp	.+4      	; 0x14ba <memmove+0x18>
    14b6:	02 90       	ld	r0, -Z
    14b8:	0e 92       	st	-X, r0
    14ba:	41 50       	subi	r20, 0x01	; 1
    14bc:	50 40       	sbci	r21, 0x00	; 0
    14be:	d8 f7       	brcc	.-10     	; 0x14b6 <memmove+0x14>
    14c0:	08 95       	ret
    14c2:	e6 cf       	rjmp	.-52     	; 0x1490 <memcpy>

000014c4 <strncmp>:
    14c4:	fb 01       	movw	r30, r22
    14c6:	dc 01       	movw	r26, r24
    14c8:	41 50       	subi	r20, 0x01	; 1
    14ca:	50 40       	sbci	r21, 0x00	; 0
    14cc:	30 f0       	brcs	.+12     	; 0x14da <strncmp+0x16>
    14ce:	8d 91       	ld	r24, X+
    14d0:	01 90       	ld	r0, Z+
    14d2:	80 19       	sub	r24, r0
    14d4:	19 f4       	brne	.+6      	; 0x14dc <strncmp+0x18>
    14d6:	00 20       	and	r0, r0
    14d8:	b9 f7       	brne	.-18     	; 0x14c8 <strncmp+0x4>
    14da:	88 1b       	sub	r24, r24
    14dc:	99 0b       	sbc	r25, r25
    14de:	08 95       	ret

000014e0 <strstr>:
    14e0:	fb 01       	movw	r30, r22
    14e2:	51 91       	ld	r21, Z+
    14e4:	55 23       	and	r21, r21
    14e6:	a9 f0       	breq	.+42     	; 0x1512 <strstr+0x32>
    14e8:	bf 01       	movw	r22, r30
    14ea:	dc 01       	movw	r26, r24
    14ec:	4d 91       	ld	r20, X+
    14ee:	45 17       	cp	r20, r21
    14f0:	41 11       	cpse	r20, r1
    14f2:	e1 f7       	brne	.-8      	; 0x14ec <strstr+0xc>
    14f4:	59 f4       	brne	.+22     	; 0x150c <strstr+0x2c>
    14f6:	cd 01       	movw	r24, r26
    14f8:	01 90       	ld	r0, Z+
    14fa:	00 20       	and	r0, r0
    14fc:	49 f0       	breq	.+18     	; 0x1510 <strstr+0x30>
    14fe:	4d 91       	ld	r20, X+
    1500:	40 15       	cp	r20, r0
    1502:	41 11       	cpse	r20, r1
    1504:	c9 f3       	breq	.-14     	; 0x14f8 <strstr+0x18>
    1506:	fb 01       	movw	r30, r22
    1508:	41 11       	cpse	r20, r1
    150a:	ef cf       	rjmp	.-34     	; 0x14ea <strstr+0xa>
    150c:	81 e0       	ldi	r24, 0x01	; 1
    150e:	90 e0       	ldi	r25, 0x00	; 0
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	08 95       	ret

00001514 <sprintf>:
    1514:	0f 93       	push	r16
    1516:	1f 93       	push	r17
    1518:	cf 93       	push	r28
    151a:	df 93       	push	r29
    151c:	cd b7       	in	r28, 0x3d	; 61
    151e:	de b7       	in	r29, 0x3e	; 62
    1520:	2e 97       	sbiw	r28, 0x0e	; 14
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	de bf       	out	0x3e, r29	; 62
    1528:	0f be       	out	0x3f, r0	; 63
    152a:	cd bf       	out	0x3d, r28	; 61
    152c:	0e 89       	ldd	r16, Y+22	; 0x16
    152e:	1f 89       	ldd	r17, Y+23	; 0x17
    1530:	86 e0       	ldi	r24, 0x06	; 6
    1532:	8c 83       	std	Y+4, r24	; 0x04
    1534:	1a 83       	std	Y+2, r17	; 0x02
    1536:	09 83       	std	Y+1, r16	; 0x01
    1538:	8f ef       	ldi	r24, 0xFF	; 255
    153a:	9f e7       	ldi	r25, 0x7F	; 127
    153c:	9e 83       	std	Y+6, r25	; 0x06
    153e:	8d 83       	std	Y+5, r24	; 0x05
    1540:	ae 01       	movw	r20, r28
    1542:	46 5e       	subi	r20, 0xE6	; 230
    1544:	5f 4f       	sbci	r21, 0xFF	; 255
    1546:	68 8d       	ldd	r22, Y+24	; 0x18
    1548:	79 8d       	ldd	r23, Y+25	; 0x19
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	10 d0       	rcall	.+32     	; 0x1570 <vfprintf>
    1550:	ef 81       	ldd	r30, Y+7	; 0x07
    1552:	f8 85       	ldd	r31, Y+8	; 0x08
    1554:	e0 0f       	add	r30, r16
    1556:	f1 1f       	adc	r31, r17
    1558:	10 82       	st	Z, r1
    155a:	2e 96       	adiw	r28, 0x0e	; 14
    155c:	0f b6       	in	r0, 0x3f	; 63
    155e:	f8 94       	cli
    1560:	de bf       	out	0x3e, r29	; 62
    1562:	0f be       	out	0x3f, r0	; 63
    1564:	cd bf       	out	0x3d, r28	; 61
    1566:	df 91       	pop	r29
    1568:	cf 91       	pop	r28
    156a:	1f 91       	pop	r17
    156c:	0f 91       	pop	r16
    156e:	08 95       	ret

00001570 <vfprintf>:
    1570:	2f 92       	push	r2
    1572:	3f 92       	push	r3
    1574:	4f 92       	push	r4
    1576:	5f 92       	push	r5
    1578:	6f 92       	push	r6
    157a:	7f 92       	push	r7
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	2b 97       	sbiw	r28, 0x0b	; 11
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	6c 01       	movw	r12, r24
    15a6:	7b 01       	movw	r14, r22
    15a8:	8a 01       	movw	r16, r20
    15aa:	fc 01       	movw	r30, r24
    15ac:	17 82       	std	Z+7, r1	; 0x07
    15ae:	16 82       	std	Z+6, r1	; 0x06
    15b0:	83 81       	ldd	r24, Z+3	; 0x03
    15b2:	81 ff       	sbrs	r24, 1
    15b4:	bf c1       	rjmp	.+894    	; 0x1934 <vfprintf+0x3c4>
    15b6:	ce 01       	movw	r24, r28
    15b8:	01 96       	adiw	r24, 0x01	; 1
    15ba:	3c 01       	movw	r6, r24
    15bc:	f6 01       	movw	r30, r12
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	f7 01       	movw	r30, r14
    15c2:	93 fd       	sbrc	r25, 3
    15c4:	85 91       	lpm	r24, Z+
    15c6:	93 ff       	sbrs	r25, 3
    15c8:	81 91       	ld	r24, Z+
    15ca:	7f 01       	movw	r14, r30
    15cc:	88 23       	and	r24, r24
    15ce:	09 f4       	brne	.+2      	; 0x15d2 <vfprintf+0x62>
    15d0:	ad c1       	rjmp	.+858    	; 0x192c <vfprintf+0x3bc>
    15d2:	85 32       	cpi	r24, 0x25	; 37
    15d4:	39 f4       	brne	.+14     	; 0x15e4 <vfprintf+0x74>
    15d6:	93 fd       	sbrc	r25, 3
    15d8:	85 91       	lpm	r24, Z+
    15da:	93 ff       	sbrs	r25, 3
    15dc:	81 91       	ld	r24, Z+
    15de:	7f 01       	movw	r14, r30
    15e0:	85 32       	cpi	r24, 0x25	; 37
    15e2:	21 f4       	brne	.+8      	; 0x15ec <vfprintf+0x7c>
    15e4:	b6 01       	movw	r22, r12
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	d6 d1       	rcall	.+940    	; 0x1996 <fputc>
    15ea:	e8 cf       	rjmp	.-48     	; 0x15bc <vfprintf+0x4c>
    15ec:	91 2c       	mov	r9, r1
    15ee:	21 2c       	mov	r2, r1
    15f0:	31 2c       	mov	r3, r1
    15f2:	ff e1       	ldi	r31, 0x1F	; 31
    15f4:	f3 15       	cp	r31, r3
    15f6:	d8 f0       	brcs	.+54     	; 0x162e <vfprintf+0xbe>
    15f8:	8b 32       	cpi	r24, 0x2B	; 43
    15fa:	79 f0       	breq	.+30     	; 0x161a <vfprintf+0xaa>
    15fc:	38 f4       	brcc	.+14     	; 0x160c <vfprintf+0x9c>
    15fe:	80 32       	cpi	r24, 0x20	; 32
    1600:	79 f0       	breq	.+30     	; 0x1620 <vfprintf+0xb0>
    1602:	83 32       	cpi	r24, 0x23	; 35
    1604:	a1 f4       	brne	.+40     	; 0x162e <vfprintf+0xbe>
    1606:	23 2d       	mov	r18, r3
    1608:	20 61       	ori	r18, 0x10	; 16
    160a:	1d c0       	rjmp	.+58     	; 0x1646 <vfprintf+0xd6>
    160c:	8d 32       	cpi	r24, 0x2D	; 45
    160e:	61 f0       	breq	.+24     	; 0x1628 <vfprintf+0xb8>
    1610:	80 33       	cpi	r24, 0x30	; 48
    1612:	69 f4       	brne	.+26     	; 0x162e <vfprintf+0xbe>
    1614:	23 2d       	mov	r18, r3
    1616:	21 60       	ori	r18, 0x01	; 1
    1618:	16 c0       	rjmp	.+44     	; 0x1646 <vfprintf+0xd6>
    161a:	83 2d       	mov	r24, r3
    161c:	82 60       	ori	r24, 0x02	; 2
    161e:	38 2e       	mov	r3, r24
    1620:	e3 2d       	mov	r30, r3
    1622:	e4 60       	ori	r30, 0x04	; 4
    1624:	3e 2e       	mov	r3, r30
    1626:	2a c0       	rjmp	.+84     	; 0x167c <vfprintf+0x10c>
    1628:	f3 2d       	mov	r31, r3
    162a:	f8 60       	ori	r31, 0x08	; 8
    162c:	1d c0       	rjmp	.+58     	; 0x1668 <vfprintf+0xf8>
    162e:	37 fc       	sbrc	r3, 7
    1630:	2d c0       	rjmp	.+90     	; 0x168c <vfprintf+0x11c>
    1632:	20 ed       	ldi	r18, 0xD0	; 208
    1634:	28 0f       	add	r18, r24
    1636:	2a 30       	cpi	r18, 0x0A	; 10
    1638:	40 f0       	brcs	.+16     	; 0x164a <vfprintf+0xda>
    163a:	8e 32       	cpi	r24, 0x2E	; 46
    163c:	b9 f4       	brne	.+46     	; 0x166c <vfprintf+0xfc>
    163e:	36 fc       	sbrc	r3, 6
    1640:	75 c1       	rjmp	.+746    	; 0x192c <vfprintf+0x3bc>
    1642:	23 2d       	mov	r18, r3
    1644:	20 64       	ori	r18, 0x40	; 64
    1646:	32 2e       	mov	r3, r18
    1648:	19 c0       	rjmp	.+50     	; 0x167c <vfprintf+0x10c>
    164a:	36 fe       	sbrs	r3, 6
    164c:	06 c0       	rjmp	.+12     	; 0x165a <vfprintf+0xea>
    164e:	8a e0       	ldi	r24, 0x0A	; 10
    1650:	98 9e       	mul	r9, r24
    1652:	20 0d       	add	r18, r0
    1654:	11 24       	eor	r1, r1
    1656:	92 2e       	mov	r9, r18
    1658:	11 c0       	rjmp	.+34     	; 0x167c <vfprintf+0x10c>
    165a:	ea e0       	ldi	r30, 0x0A	; 10
    165c:	2e 9e       	mul	r2, r30
    165e:	20 0d       	add	r18, r0
    1660:	11 24       	eor	r1, r1
    1662:	22 2e       	mov	r2, r18
    1664:	f3 2d       	mov	r31, r3
    1666:	f0 62       	ori	r31, 0x20	; 32
    1668:	3f 2e       	mov	r3, r31
    166a:	08 c0       	rjmp	.+16     	; 0x167c <vfprintf+0x10c>
    166c:	8c 36       	cpi	r24, 0x6C	; 108
    166e:	21 f4       	brne	.+8      	; 0x1678 <vfprintf+0x108>
    1670:	83 2d       	mov	r24, r3
    1672:	80 68       	ori	r24, 0x80	; 128
    1674:	38 2e       	mov	r3, r24
    1676:	02 c0       	rjmp	.+4      	; 0x167c <vfprintf+0x10c>
    1678:	88 36       	cpi	r24, 0x68	; 104
    167a:	41 f4       	brne	.+16     	; 0x168c <vfprintf+0x11c>
    167c:	f7 01       	movw	r30, r14
    167e:	93 fd       	sbrc	r25, 3
    1680:	85 91       	lpm	r24, Z+
    1682:	93 ff       	sbrs	r25, 3
    1684:	81 91       	ld	r24, Z+
    1686:	7f 01       	movw	r14, r30
    1688:	81 11       	cpse	r24, r1
    168a:	b3 cf       	rjmp	.-154    	; 0x15f2 <vfprintf+0x82>
    168c:	98 2f       	mov	r25, r24
    168e:	9f 7d       	andi	r25, 0xDF	; 223
    1690:	95 54       	subi	r25, 0x45	; 69
    1692:	93 30       	cpi	r25, 0x03	; 3
    1694:	28 f4       	brcc	.+10     	; 0x16a0 <vfprintf+0x130>
    1696:	0c 5f       	subi	r16, 0xFC	; 252
    1698:	1f 4f       	sbci	r17, 0xFF	; 255
    169a:	9f e3       	ldi	r25, 0x3F	; 63
    169c:	99 83       	std	Y+1, r25	; 0x01
    169e:	0d c0       	rjmp	.+26     	; 0x16ba <vfprintf+0x14a>
    16a0:	83 36       	cpi	r24, 0x63	; 99
    16a2:	31 f0       	breq	.+12     	; 0x16b0 <vfprintf+0x140>
    16a4:	83 37       	cpi	r24, 0x73	; 115
    16a6:	71 f0       	breq	.+28     	; 0x16c4 <vfprintf+0x154>
    16a8:	83 35       	cpi	r24, 0x53	; 83
    16aa:	09 f0       	breq	.+2      	; 0x16ae <vfprintf+0x13e>
    16ac:	55 c0       	rjmp	.+170    	; 0x1758 <vfprintf+0x1e8>
    16ae:	20 c0       	rjmp	.+64     	; 0x16f0 <vfprintf+0x180>
    16b0:	f8 01       	movw	r30, r16
    16b2:	80 81       	ld	r24, Z
    16b4:	89 83       	std	Y+1, r24	; 0x01
    16b6:	0e 5f       	subi	r16, 0xFE	; 254
    16b8:	1f 4f       	sbci	r17, 0xFF	; 255
    16ba:	88 24       	eor	r8, r8
    16bc:	83 94       	inc	r8
    16be:	91 2c       	mov	r9, r1
    16c0:	53 01       	movw	r10, r6
    16c2:	12 c0       	rjmp	.+36     	; 0x16e8 <vfprintf+0x178>
    16c4:	28 01       	movw	r4, r16
    16c6:	f2 e0       	ldi	r31, 0x02	; 2
    16c8:	4f 0e       	add	r4, r31
    16ca:	51 1c       	adc	r5, r1
    16cc:	f8 01       	movw	r30, r16
    16ce:	a0 80       	ld	r10, Z
    16d0:	b1 80       	ldd	r11, Z+1	; 0x01
    16d2:	36 fe       	sbrs	r3, 6
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <vfprintf+0x16c>
    16d6:	69 2d       	mov	r22, r9
    16d8:	70 e0       	ldi	r23, 0x00	; 0
    16da:	02 c0       	rjmp	.+4      	; 0x16e0 <vfprintf+0x170>
    16dc:	6f ef       	ldi	r22, 0xFF	; 255
    16de:	7f ef       	ldi	r23, 0xFF	; 255
    16e0:	c5 01       	movw	r24, r10
    16e2:	4e d1       	rcall	.+668    	; 0x1980 <strnlen>
    16e4:	4c 01       	movw	r8, r24
    16e6:	82 01       	movw	r16, r4
    16e8:	f3 2d       	mov	r31, r3
    16ea:	ff 77       	andi	r31, 0x7F	; 127
    16ec:	3f 2e       	mov	r3, r31
    16ee:	15 c0       	rjmp	.+42     	; 0x171a <vfprintf+0x1aa>
    16f0:	28 01       	movw	r4, r16
    16f2:	22 e0       	ldi	r18, 0x02	; 2
    16f4:	42 0e       	add	r4, r18
    16f6:	51 1c       	adc	r5, r1
    16f8:	f8 01       	movw	r30, r16
    16fa:	a0 80       	ld	r10, Z
    16fc:	b1 80       	ldd	r11, Z+1	; 0x01
    16fe:	36 fe       	sbrs	r3, 6
    1700:	03 c0       	rjmp	.+6      	; 0x1708 <vfprintf+0x198>
    1702:	69 2d       	mov	r22, r9
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	02 c0       	rjmp	.+4      	; 0x170c <vfprintf+0x19c>
    1708:	6f ef       	ldi	r22, 0xFF	; 255
    170a:	7f ef       	ldi	r23, 0xFF	; 255
    170c:	c5 01       	movw	r24, r10
    170e:	2d d1       	rcall	.+602    	; 0x196a <strnlen_P>
    1710:	4c 01       	movw	r8, r24
    1712:	f3 2d       	mov	r31, r3
    1714:	f0 68       	ori	r31, 0x80	; 128
    1716:	3f 2e       	mov	r3, r31
    1718:	82 01       	movw	r16, r4
    171a:	33 fc       	sbrc	r3, 3
    171c:	19 c0       	rjmp	.+50     	; 0x1750 <vfprintf+0x1e0>
    171e:	82 2d       	mov	r24, r2
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	88 16       	cp	r8, r24
    1724:	99 06       	cpc	r9, r25
    1726:	a0 f4       	brcc	.+40     	; 0x1750 <vfprintf+0x1e0>
    1728:	b6 01       	movw	r22, r12
    172a:	80 e2       	ldi	r24, 0x20	; 32
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	33 d1       	rcall	.+614    	; 0x1996 <fputc>
    1730:	2a 94       	dec	r2
    1732:	f5 cf       	rjmp	.-22     	; 0x171e <vfprintf+0x1ae>
    1734:	f5 01       	movw	r30, r10
    1736:	37 fc       	sbrc	r3, 7
    1738:	85 91       	lpm	r24, Z+
    173a:	37 fe       	sbrs	r3, 7
    173c:	81 91       	ld	r24, Z+
    173e:	5f 01       	movw	r10, r30
    1740:	b6 01       	movw	r22, r12
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	28 d1       	rcall	.+592    	; 0x1996 <fputc>
    1746:	21 10       	cpse	r2, r1
    1748:	2a 94       	dec	r2
    174a:	21 e0       	ldi	r18, 0x01	; 1
    174c:	82 1a       	sub	r8, r18
    174e:	91 08       	sbc	r9, r1
    1750:	81 14       	cp	r8, r1
    1752:	91 04       	cpc	r9, r1
    1754:	79 f7       	brne	.-34     	; 0x1734 <vfprintf+0x1c4>
    1756:	e1 c0       	rjmp	.+450    	; 0x191a <vfprintf+0x3aa>
    1758:	84 36       	cpi	r24, 0x64	; 100
    175a:	11 f0       	breq	.+4      	; 0x1760 <vfprintf+0x1f0>
    175c:	89 36       	cpi	r24, 0x69	; 105
    175e:	39 f5       	brne	.+78     	; 0x17ae <vfprintf+0x23e>
    1760:	f8 01       	movw	r30, r16
    1762:	37 fe       	sbrs	r3, 7
    1764:	07 c0       	rjmp	.+14     	; 0x1774 <vfprintf+0x204>
    1766:	60 81       	ld	r22, Z
    1768:	71 81       	ldd	r23, Z+1	; 0x01
    176a:	82 81       	ldd	r24, Z+2	; 0x02
    176c:	93 81       	ldd	r25, Z+3	; 0x03
    176e:	0c 5f       	subi	r16, 0xFC	; 252
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	08 c0       	rjmp	.+16     	; 0x1784 <vfprintf+0x214>
    1774:	60 81       	ld	r22, Z
    1776:	71 81       	ldd	r23, Z+1	; 0x01
    1778:	07 2e       	mov	r0, r23
    177a:	00 0c       	add	r0, r0
    177c:	88 0b       	sbc	r24, r24
    177e:	99 0b       	sbc	r25, r25
    1780:	0e 5f       	subi	r16, 0xFE	; 254
    1782:	1f 4f       	sbci	r17, 0xFF	; 255
    1784:	f3 2d       	mov	r31, r3
    1786:	ff 76       	andi	r31, 0x6F	; 111
    1788:	3f 2e       	mov	r3, r31
    178a:	97 ff       	sbrs	r25, 7
    178c:	09 c0       	rjmp	.+18     	; 0x17a0 <vfprintf+0x230>
    178e:	90 95       	com	r25
    1790:	80 95       	com	r24
    1792:	70 95       	com	r23
    1794:	61 95       	neg	r22
    1796:	7f 4f       	sbci	r23, 0xFF	; 255
    1798:	8f 4f       	sbci	r24, 0xFF	; 255
    179a:	9f 4f       	sbci	r25, 0xFF	; 255
    179c:	f0 68       	ori	r31, 0x80	; 128
    179e:	3f 2e       	mov	r3, r31
    17a0:	2a e0       	ldi	r18, 0x0A	; 10
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	a3 01       	movw	r20, r6
    17a6:	33 d1       	rcall	.+614    	; 0x1a0e <__ultoa_invert>
    17a8:	88 2e       	mov	r8, r24
    17aa:	86 18       	sub	r8, r6
    17ac:	44 c0       	rjmp	.+136    	; 0x1836 <vfprintf+0x2c6>
    17ae:	85 37       	cpi	r24, 0x75	; 117
    17b0:	31 f4       	brne	.+12     	; 0x17be <vfprintf+0x24e>
    17b2:	23 2d       	mov	r18, r3
    17b4:	2f 7e       	andi	r18, 0xEF	; 239
    17b6:	b2 2e       	mov	r11, r18
    17b8:	2a e0       	ldi	r18, 0x0A	; 10
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	25 c0       	rjmp	.+74     	; 0x1808 <vfprintf+0x298>
    17be:	93 2d       	mov	r25, r3
    17c0:	99 7f       	andi	r25, 0xF9	; 249
    17c2:	b9 2e       	mov	r11, r25
    17c4:	8f 36       	cpi	r24, 0x6F	; 111
    17c6:	c1 f0       	breq	.+48     	; 0x17f8 <vfprintf+0x288>
    17c8:	18 f4       	brcc	.+6      	; 0x17d0 <vfprintf+0x260>
    17ca:	88 35       	cpi	r24, 0x58	; 88
    17cc:	79 f0       	breq	.+30     	; 0x17ec <vfprintf+0x27c>
    17ce:	ae c0       	rjmp	.+348    	; 0x192c <vfprintf+0x3bc>
    17d0:	80 37       	cpi	r24, 0x70	; 112
    17d2:	19 f0       	breq	.+6      	; 0x17da <vfprintf+0x26a>
    17d4:	88 37       	cpi	r24, 0x78	; 120
    17d6:	21 f0       	breq	.+8      	; 0x17e0 <vfprintf+0x270>
    17d8:	a9 c0       	rjmp	.+338    	; 0x192c <vfprintf+0x3bc>
    17da:	e9 2f       	mov	r30, r25
    17dc:	e0 61       	ori	r30, 0x10	; 16
    17de:	be 2e       	mov	r11, r30
    17e0:	b4 fe       	sbrs	r11, 4
    17e2:	0d c0       	rjmp	.+26     	; 0x17fe <vfprintf+0x28e>
    17e4:	fb 2d       	mov	r31, r11
    17e6:	f4 60       	ori	r31, 0x04	; 4
    17e8:	bf 2e       	mov	r11, r31
    17ea:	09 c0       	rjmp	.+18     	; 0x17fe <vfprintf+0x28e>
    17ec:	34 fe       	sbrs	r3, 4
    17ee:	0a c0       	rjmp	.+20     	; 0x1804 <vfprintf+0x294>
    17f0:	29 2f       	mov	r18, r25
    17f2:	26 60       	ori	r18, 0x06	; 6
    17f4:	b2 2e       	mov	r11, r18
    17f6:	06 c0       	rjmp	.+12     	; 0x1804 <vfprintf+0x294>
    17f8:	28 e0       	ldi	r18, 0x08	; 8
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	05 c0       	rjmp	.+10     	; 0x1808 <vfprintf+0x298>
    17fe:	20 e1       	ldi	r18, 0x10	; 16
    1800:	30 e0       	ldi	r19, 0x00	; 0
    1802:	02 c0       	rjmp	.+4      	; 0x1808 <vfprintf+0x298>
    1804:	20 e1       	ldi	r18, 0x10	; 16
    1806:	32 e0       	ldi	r19, 0x02	; 2
    1808:	f8 01       	movw	r30, r16
    180a:	b7 fe       	sbrs	r11, 7
    180c:	07 c0       	rjmp	.+14     	; 0x181c <vfprintf+0x2ac>
    180e:	60 81       	ld	r22, Z
    1810:	71 81       	ldd	r23, Z+1	; 0x01
    1812:	82 81       	ldd	r24, Z+2	; 0x02
    1814:	93 81       	ldd	r25, Z+3	; 0x03
    1816:	0c 5f       	subi	r16, 0xFC	; 252
    1818:	1f 4f       	sbci	r17, 0xFF	; 255
    181a:	06 c0       	rjmp	.+12     	; 0x1828 <vfprintf+0x2b8>
    181c:	60 81       	ld	r22, Z
    181e:	71 81       	ldd	r23, Z+1	; 0x01
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	0e 5f       	subi	r16, 0xFE	; 254
    1826:	1f 4f       	sbci	r17, 0xFF	; 255
    1828:	a3 01       	movw	r20, r6
    182a:	f1 d0       	rcall	.+482    	; 0x1a0e <__ultoa_invert>
    182c:	88 2e       	mov	r8, r24
    182e:	86 18       	sub	r8, r6
    1830:	fb 2d       	mov	r31, r11
    1832:	ff 77       	andi	r31, 0x7F	; 127
    1834:	3f 2e       	mov	r3, r31
    1836:	36 fe       	sbrs	r3, 6
    1838:	0d c0       	rjmp	.+26     	; 0x1854 <vfprintf+0x2e4>
    183a:	23 2d       	mov	r18, r3
    183c:	2e 7f       	andi	r18, 0xFE	; 254
    183e:	a2 2e       	mov	r10, r18
    1840:	89 14       	cp	r8, r9
    1842:	58 f4       	brcc	.+22     	; 0x185a <vfprintf+0x2ea>
    1844:	34 fe       	sbrs	r3, 4
    1846:	0b c0       	rjmp	.+22     	; 0x185e <vfprintf+0x2ee>
    1848:	32 fc       	sbrc	r3, 2
    184a:	09 c0       	rjmp	.+18     	; 0x185e <vfprintf+0x2ee>
    184c:	83 2d       	mov	r24, r3
    184e:	8e 7e       	andi	r24, 0xEE	; 238
    1850:	a8 2e       	mov	r10, r24
    1852:	05 c0       	rjmp	.+10     	; 0x185e <vfprintf+0x2ee>
    1854:	b8 2c       	mov	r11, r8
    1856:	a3 2c       	mov	r10, r3
    1858:	03 c0       	rjmp	.+6      	; 0x1860 <vfprintf+0x2f0>
    185a:	b8 2c       	mov	r11, r8
    185c:	01 c0       	rjmp	.+2      	; 0x1860 <vfprintf+0x2f0>
    185e:	b9 2c       	mov	r11, r9
    1860:	a4 fe       	sbrs	r10, 4
    1862:	0f c0       	rjmp	.+30     	; 0x1882 <vfprintf+0x312>
    1864:	fe 01       	movw	r30, r28
    1866:	e8 0d       	add	r30, r8
    1868:	f1 1d       	adc	r31, r1
    186a:	80 81       	ld	r24, Z
    186c:	80 33       	cpi	r24, 0x30	; 48
    186e:	21 f4       	brne	.+8      	; 0x1878 <vfprintf+0x308>
    1870:	9a 2d       	mov	r25, r10
    1872:	99 7e       	andi	r25, 0xE9	; 233
    1874:	a9 2e       	mov	r10, r25
    1876:	09 c0       	rjmp	.+18     	; 0x188a <vfprintf+0x31a>
    1878:	a2 fe       	sbrs	r10, 2
    187a:	06 c0       	rjmp	.+12     	; 0x1888 <vfprintf+0x318>
    187c:	b3 94       	inc	r11
    187e:	b3 94       	inc	r11
    1880:	04 c0       	rjmp	.+8      	; 0x188a <vfprintf+0x31a>
    1882:	8a 2d       	mov	r24, r10
    1884:	86 78       	andi	r24, 0x86	; 134
    1886:	09 f0       	breq	.+2      	; 0x188a <vfprintf+0x31a>
    1888:	b3 94       	inc	r11
    188a:	a3 fc       	sbrc	r10, 3
    188c:	10 c0       	rjmp	.+32     	; 0x18ae <vfprintf+0x33e>
    188e:	a0 fe       	sbrs	r10, 0
    1890:	06 c0       	rjmp	.+12     	; 0x189e <vfprintf+0x32e>
    1892:	b2 14       	cp	r11, r2
    1894:	80 f4       	brcc	.+32     	; 0x18b6 <vfprintf+0x346>
    1896:	28 0c       	add	r2, r8
    1898:	92 2c       	mov	r9, r2
    189a:	9b 18       	sub	r9, r11
    189c:	0d c0       	rjmp	.+26     	; 0x18b8 <vfprintf+0x348>
    189e:	b2 14       	cp	r11, r2
    18a0:	58 f4       	brcc	.+22     	; 0x18b8 <vfprintf+0x348>
    18a2:	b6 01       	movw	r22, r12
    18a4:	80 e2       	ldi	r24, 0x20	; 32
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	76 d0       	rcall	.+236    	; 0x1996 <fputc>
    18aa:	b3 94       	inc	r11
    18ac:	f8 cf       	rjmp	.-16     	; 0x189e <vfprintf+0x32e>
    18ae:	b2 14       	cp	r11, r2
    18b0:	18 f4       	brcc	.+6      	; 0x18b8 <vfprintf+0x348>
    18b2:	2b 18       	sub	r2, r11
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <vfprintf+0x34a>
    18b6:	98 2c       	mov	r9, r8
    18b8:	21 2c       	mov	r2, r1
    18ba:	a4 fe       	sbrs	r10, 4
    18bc:	0f c0       	rjmp	.+30     	; 0x18dc <vfprintf+0x36c>
    18be:	b6 01       	movw	r22, r12
    18c0:	80 e3       	ldi	r24, 0x30	; 48
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	68 d0       	rcall	.+208    	; 0x1996 <fputc>
    18c6:	a2 fe       	sbrs	r10, 2
    18c8:	16 c0       	rjmp	.+44     	; 0x18f6 <vfprintf+0x386>
    18ca:	a1 fc       	sbrc	r10, 1
    18cc:	03 c0       	rjmp	.+6      	; 0x18d4 <vfprintf+0x364>
    18ce:	88 e7       	ldi	r24, 0x78	; 120
    18d0:	90 e0       	ldi	r25, 0x00	; 0
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <vfprintf+0x368>
    18d4:	88 e5       	ldi	r24, 0x58	; 88
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	b6 01       	movw	r22, r12
    18da:	0c c0       	rjmp	.+24     	; 0x18f4 <vfprintf+0x384>
    18dc:	8a 2d       	mov	r24, r10
    18de:	86 78       	andi	r24, 0x86	; 134
    18e0:	51 f0       	breq	.+20     	; 0x18f6 <vfprintf+0x386>
    18e2:	a1 fe       	sbrs	r10, 1
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <vfprintf+0x37a>
    18e6:	8b e2       	ldi	r24, 0x2B	; 43
    18e8:	01 c0       	rjmp	.+2      	; 0x18ec <vfprintf+0x37c>
    18ea:	80 e2       	ldi	r24, 0x20	; 32
    18ec:	a7 fc       	sbrc	r10, 7
    18ee:	8d e2       	ldi	r24, 0x2D	; 45
    18f0:	b6 01       	movw	r22, r12
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	50 d0       	rcall	.+160    	; 0x1996 <fputc>
    18f6:	89 14       	cp	r8, r9
    18f8:	30 f4       	brcc	.+12     	; 0x1906 <vfprintf+0x396>
    18fa:	b6 01       	movw	r22, r12
    18fc:	80 e3       	ldi	r24, 0x30	; 48
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	4a d0       	rcall	.+148    	; 0x1996 <fputc>
    1902:	9a 94       	dec	r9
    1904:	f8 cf       	rjmp	.-16     	; 0x18f6 <vfprintf+0x386>
    1906:	8a 94       	dec	r8
    1908:	f3 01       	movw	r30, r6
    190a:	e8 0d       	add	r30, r8
    190c:	f1 1d       	adc	r31, r1
    190e:	80 81       	ld	r24, Z
    1910:	b6 01       	movw	r22, r12
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	40 d0       	rcall	.+128    	; 0x1996 <fputc>
    1916:	81 10       	cpse	r8, r1
    1918:	f6 cf       	rjmp	.-20     	; 0x1906 <vfprintf+0x396>
    191a:	22 20       	and	r2, r2
    191c:	09 f4       	brne	.+2      	; 0x1920 <vfprintf+0x3b0>
    191e:	4e ce       	rjmp	.-868    	; 0x15bc <vfprintf+0x4c>
    1920:	b6 01       	movw	r22, r12
    1922:	80 e2       	ldi	r24, 0x20	; 32
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	37 d0       	rcall	.+110    	; 0x1996 <fputc>
    1928:	2a 94       	dec	r2
    192a:	f7 cf       	rjmp	.-18     	; 0x191a <vfprintf+0x3aa>
    192c:	f6 01       	movw	r30, r12
    192e:	86 81       	ldd	r24, Z+6	; 0x06
    1930:	97 81       	ldd	r25, Z+7	; 0x07
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <vfprintf+0x3c8>
    1934:	8f ef       	ldi	r24, 0xFF	; 255
    1936:	9f ef       	ldi	r25, 0xFF	; 255
    1938:	2b 96       	adiw	r28, 0x0b	; 11
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	7f 90       	pop	r7
    195e:	6f 90       	pop	r6
    1960:	5f 90       	pop	r5
    1962:	4f 90       	pop	r4
    1964:	3f 90       	pop	r3
    1966:	2f 90       	pop	r2
    1968:	08 95       	ret

0000196a <strnlen_P>:
    196a:	fc 01       	movw	r30, r24
    196c:	05 90       	lpm	r0, Z+
    196e:	61 50       	subi	r22, 0x01	; 1
    1970:	70 40       	sbci	r23, 0x00	; 0
    1972:	01 10       	cpse	r0, r1
    1974:	d8 f7       	brcc	.-10     	; 0x196c <strnlen_P+0x2>
    1976:	80 95       	com	r24
    1978:	90 95       	com	r25
    197a:	8e 0f       	add	r24, r30
    197c:	9f 1f       	adc	r25, r31
    197e:	08 95       	ret

00001980 <strnlen>:
    1980:	fc 01       	movw	r30, r24
    1982:	61 50       	subi	r22, 0x01	; 1
    1984:	70 40       	sbci	r23, 0x00	; 0
    1986:	01 90       	ld	r0, Z+
    1988:	01 10       	cpse	r0, r1
    198a:	d8 f7       	brcc	.-10     	; 0x1982 <strnlen+0x2>
    198c:	80 95       	com	r24
    198e:	90 95       	com	r25
    1990:	8e 0f       	add	r24, r30
    1992:	9f 1f       	adc	r25, r31
    1994:	08 95       	ret

00001996 <fputc>:
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	cf 93       	push	r28
    199c:	df 93       	push	r29
    199e:	fb 01       	movw	r30, r22
    19a0:	23 81       	ldd	r18, Z+3	; 0x03
    19a2:	21 fd       	sbrc	r18, 1
    19a4:	03 c0       	rjmp	.+6      	; 0x19ac <fputc+0x16>
    19a6:	8f ef       	ldi	r24, 0xFF	; 255
    19a8:	9f ef       	ldi	r25, 0xFF	; 255
    19aa:	2c c0       	rjmp	.+88     	; 0x1a04 <fputc+0x6e>
    19ac:	22 ff       	sbrs	r18, 2
    19ae:	16 c0       	rjmp	.+44     	; 0x19dc <fputc+0x46>
    19b0:	46 81       	ldd	r20, Z+6	; 0x06
    19b2:	57 81       	ldd	r21, Z+7	; 0x07
    19b4:	24 81       	ldd	r18, Z+4	; 0x04
    19b6:	35 81       	ldd	r19, Z+5	; 0x05
    19b8:	42 17       	cp	r20, r18
    19ba:	53 07       	cpc	r21, r19
    19bc:	44 f4       	brge	.+16     	; 0x19ce <fputc+0x38>
    19be:	a0 81       	ld	r26, Z
    19c0:	b1 81       	ldd	r27, Z+1	; 0x01
    19c2:	9d 01       	movw	r18, r26
    19c4:	2f 5f       	subi	r18, 0xFF	; 255
    19c6:	3f 4f       	sbci	r19, 0xFF	; 255
    19c8:	31 83       	std	Z+1, r19	; 0x01
    19ca:	20 83       	st	Z, r18
    19cc:	8c 93       	st	X, r24
    19ce:	26 81       	ldd	r18, Z+6	; 0x06
    19d0:	37 81       	ldd	r19, Z+7	; 0x07
    19d2:	2f 5f       	subi	r18, 0xFF	; 255
    19d4:	3f 4f       	sbci	r19, 0xFF	; 255
    19d6:	37 83       	std	Z+7, r19	; 0x07
    19d8:	26 83       	std	Z+6, r18	; 0x06
    19da:	14 c0       	rjmp	.+40     	; 0x1a04 <fputc+0x6e>
    19dc:	8b 01       	movw	r16, r22
    19de:	ec 01       	movw	r28, r24
    19e0:	fb 01       	movw	r30, r22
    19e2:	00 84       	ldd	r0, Z+8	; 0x08
    19e4:	f1 85       	ldd	r31, Z+9	; 0x09
    19e6:	e0 2d       	mov	r30, r0
    19e8:	19 95       	eicall
    19ea:	89 2b       	or	r24, r25
    19ec:	e1 f6       	brne	.-72     	; 0x19a6 <fputc+0x10>
    19ee:	d8 01       	movw	r26, r16
    19f0:	16 96       	adiw	r26, 0x06	; 6
    19f2:	8d 91       	ld	r24, X+
    19f4:	9c 91       	ld	r25, X
    19f6:	17 97       	sbiw	r26, 0x07	; 7
    19f8:	01 96       	adiw	r24, 0x01	; 1
    19fa:	17 96       	adiw	r26, 0x07	; 7
    19fc:	9c 93       	st	X, r25
    19fe:	8e 93       	st	-X, r24
    1a00:	16 97       	sbiw	r26, 0x06	; 6
    1a02:	ce 01       	movw	r24, r28
    1a04:	df 91       	pop	r29
    1a06:	cf 91       	pop	r28
    1a08:	1f 91       	pop	r17
    1a0a:	0f 91       	pop	r16
    1a0c:	08 95       	ret

00001a0e <__ultoa_invert>:
    1a0e:	fa 01       	movw	r30, r20
    1a10:	aa 27       	eor	r26, r26
    1a12:	28 30       	cpi	r18, 0x08	; 8
    1a14:	51 f1       	breq	.+84     	; 0x1a6a <__ultoa_invert+0x5c>
    1a16:	20 31       	cpi	r18, 0x10	; 16
    1a18:	81 f1       	breq	.+96     	; 0x1a7a <__ultoa_invert+0x6c>
    1a1a:	e8 94       	clt
    1a1c:	6f 93       	push	r22
    1a1e:	6e 7f       	andi	r22, 0xFE	; 254
    1a20:	6e 5f       	subi	r22, 0xFE	; 254
    1a22:	7f 4f       	sbci	r23, 0xFF	; 255
    1a24:	8f 4f       	sbci	r24, 0xFF	; 255
    1a26:	9f 4f       	sbci	r25, 0xFF	; 255
    1a28:	af 4f       	sbci	r26, 0xFF	; 255
    1a2a:	b1 e0       	ldi	r27, 0x01	; 1
    1a2c:	3e d0       	rcall	.+124    	; 0x1aaa <__ultoa_invert+0x9c>
    1a2e:	b4 e0       	ldi	r27, 0x04	; 4
    1a30:	3c d0       	rcall	.+120    	; 0x1aaa <__ultoa_invert+0x9c>
    1a32:	67 0f       	add	r22, r23
    1a34:	78 1f       	adc	r23, r24
    1a36:	89 1f       	adc	r24, r25
    1a38:	9a 1f       	adc	r25, r26
    1a3a:	a1 1d       	adc	r26, r1
    1a3c:	68 0f       	add	r22, r24
    1a3e:	79 1f       	adc	r23, r25
    1a40:	8a 1f       	adc	r24, r26
    1a42:	91 1d       	adc	r25, r1
    1a44:	a1 1d       	adc	r26, r1
    1a46:	6a 0f       	add	r22, r26
    1a48:	71 1d       	adc	r23, r1
    1a4a:	81 1d       	adc	r24, r1
    1a4c:	91 1d       	adc	r25, r1
    1a4e:	a1 1d       	adc	r26, r1
    1a50:	20 d0       	rcall	.+64     	; 0x1a92 <__ultoa_invert+0x84>
    1a52:	09 f4       	brne	.+2      	; 0x1a56 <__ultoa_invert+0x48>
    1a54:	68 94       	set
    1a56:	3f 91       	pop	r19
    1a58:	2a e0       	ldi	r18, 0x0A	; 10
    1a5a:	26 9f       	mul	r18, r22
    1a5c:	11 24       	eor	r1, r1
    1a5e:	30 19       	sub	r19, r0
    1a60:	30 5d       	subi	r19, 0xD0	; 208
    1a62:	31 93       	st	Z+, r19
    1a64:	de f6       	brtc	.-74     	; 0x1a1c <__ultoa_invert+0xe>
    1a66:	cf 01       	movw	r24, r30
    1a68:	08 95       	ret
    1a6a:	46 2f       	mov	r20, r22
    1a6c:	47 70       	andi	r20, 0x07	; 7
    1a6e:	40 5d       	subi	r20, 0xD0	; 208
    1a70:	41 93       	st	Z+, r20
    1a72:	b3 e0       	ldi	r27, 0x03	; 3
    1a74:	0f d0       	rcall	.+30     	; 0x1a94 <__ultoa_invert+0x86>
    1a76:	c9 f7       	brne	.-14     	; 0x1a6a <__ultoa_invert+0x5c>
    1a78:	f6 cf       	rjmp	.-20     	; 0x1a66 <__ultoa_invert+0x58>
    1a7a:	46 2f       	mov	r20, r22
    1a7c:	4f 70       	andi	r20, 0x0F	; 15
    1a7e:	40 5d       	subi	r20, 0xD0	; 208
    1a80:	4a 33       	cpi	r20, 0x3A	; 58
    1a82:	18 f0       	brcs	.+6      	; 0x1a8a <__ultoa_invert+0x7c>
    1a84:	49 5d       	subi	r20, 0xD9	; 217
    1a86:	31 fd       	sbrc	r19, 1
    1a88:	40 52       	subi	r20, 0x20	; 32
    1a8a:	41 93       	st	Z+, r20
    1a8c:	02 d0       	rcall	.+4      	; 0x1a92 <__ultoa_invert+0x84>
    1a8e:	a9 f7       	brne	.-22     	; 0x1a7a <__ultoa_invert+0x6c>
    1a90:	ea cf       	rjmp	.-44     	; 0x1a66 <__ultoa_invert+0x58>
    1a92:	b4 e0       	ldi	r27, 0x04	; 4
    1a94:	a6 95       	lsr	r26
    1a96:	97 95       	ror	r25
    1a98:	87 95       	ror	r24
    1a9a:	77 95       	ror	r23
    1a9c:	67 95       	ror	r22
    1a9e:	ba 95       	dec	r27
    1aa0:	c9 f7       	brne	.-14     	; 0x1a94 <__ultoa_invert+0x86>
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 05       	cpc	r22, r1
    1aa6:	71 05       	cpc	r23, r1
    1aa8:	08 95       	ret
    1aaa:	9b 01       	movw	r18, r22
    1aac:	ac 01       	movw	r20, r24
    1aae:	0a 2e       	mov	r0, r26
    1ab0:	06 94       	lsr	r0
    1ab2:	57 95       	ror	r21
    1ab4:	47 95       	ror	r20
    1ab6:	37 95       	ror	r19
    1ab8:	27 95       	ror	r18
    1aba:	ba 95       	dec	r27
    1abc:	c9 f7       	brne	.-14     	; 0x1ab0 <__ultoa_invert+0xa2>
    1abe:	62 0f       	add	r22, r18
    1ac0:	73 1f       	adc	r23, r19
    1ac2:	84 1f       	adc	r24, r20
    1ac4:	95 1f       	adc	r25, r21
    1ac6:	a0 1d       	adc	r26, r0
    1ac8:	08 95       	ret

00001aca <_exit>:
    1aca:	f8 94       	cli

00001acc <__stop_program>:
    1acc:	ff cf       	rjmp	.-2      	; 0x1acc <__stop_program>
