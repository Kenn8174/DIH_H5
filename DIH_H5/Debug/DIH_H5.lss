
DIH_H5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e8  00800200  00001b48  00001bdc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b48  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000aa  008003e8  008003e8  00001dc4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001dc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001e20  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000348  00000000  00000000  00001e60  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003981  00000000  00000000  000021a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001aa6  00000000  00000000  00005b29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000020d3  00000000  00000000  000075cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000814  00000000  00000000  000096a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000f5b  00000000  00000000  00009eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001f76  00000000  00000000  0000ae13  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002e8  00000000  00000000  0000cd89  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	6f c0       	rjmp	.+222    	; 0x124 <__bad_interrupt>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	ba c4       	rjmp	.+2420   	; 0xa06 <__vector_36>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e8 e4       	ldi	r30, 0x48	; 72
      fc:	fb e1       	ldi	r31, 0x1B	; 27
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3e       	cpi	r26, 0xE8	; 232
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	24 e0       	ldi	r18, 0x04	; 4
     110:	a8 ee       	ldi	r26, 0xE8	; 232
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a2 39       	cpi	r26, 0x92	; 146
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	9d d0       	rcall	.+314    	; 0x25a <main>
     120:	0c 94 a2 0d 	jmp	0x1b44	; 0x1b44 <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <Init>:

void Init(void)
{
	/* Matrix Keyboard */
	// Column sat til høj
	DDRK |= (1<<PK0);
     126:	e7 e0       	ldi	r30, 0x07	; 7
     128:	f1 e0       	ldi	r31, 0x01	; 1
     12a:	80 81       	ld	r24, Z
     12c:	81 60       	ori	r24, 0x01	; 1
     12e:	80 83       	st	Z, r24
	DDRK |= (1<<PK1);
     130:	80 81       	ld	r24, Z
     132:	82 60       	ori	r24, 0x02	; 2
     134:	80 83       	st	Z, r24
	DDRK |= (1<<PK2);
     136:	80 81       	ld	r24, Z
     138:	84 60       	ori	r24, 0x04	; 4
     13a:	80 83       	st	Z, r24
	DDRK |= (1<<PK3);
     13c:	80 81       	ld	r24, Z
     13e:	88 60       	ori	r24, 0x08	; 8
     140:	80 83       	st	Z, r24

	// Row sat til input
	PORTK |= (1<<PK4);
     142:	e8 e0       	ldi	r30, 0x08	; 8
     144:	f1 e0       	ldi	r31, 0x01	; 1
     146:	80 81       	ld	r24, Z
     148:	80 61       	ori	r24, 0x10	; 16
     14a:	80 83       	st	Z, r24
	PORTK |= (1<<PK5);
     14c:	80 81       	ld	r24, Z
     14e:	80 62       	ori	r24, 0x20	; 32
     150:	80 83       	st	Z, r24
	PORTK |= (1<<PK6);
     152:	80 81       	ld	r24, Z
     154:	80 64       	ori	r24, 0x40	; 64
     156:	80 83       	st	Z, r24
	PORTK |= (1<<PK7);
     158:	80 81       	ld	r24, Z
     15a:	80 68       	ori	r24, 0x80	; 128
     15c:	80 83       	st	Z, r24
     15e:	08 95       	ret

00000160 <USART_Init>:

char USART_RxChar()									/* Data receiving function */
{
	while (!(UCSR1A & (1 << RXC1)));					/* Wait until new data receive */
	return(UDR1);									/* Get and return received data */ 
}
     160:	e8 ec       	ldi	r30, 0xC8	; 200
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	20 81       	ld	r18, Z
     166:	22 60       	ori	r18, 0x02	; 2
     168:	20 83       	st	Z, r18
     16a:	e9 ec       	ldi	r30, 0xC9	; 201
     16c:	f0 e0       	ldi	r31, 0x00	; 0
     16e:	20 81       	ld	r18, Z
     170:	28 69       	ori	r18, 0x98	; 152
     172:	20 83       	st	Z, r18
     174:	ea ec       	ldi	r30, 0xCA	; 202
     176:	f0 e0       	ldi	r31, 0x00	; 0
     178:	20 81       	ld	r18, Z
     17a:	24 60       	ori	r18, 0x04	; 4
     17c:	20 83       	st	Z, r18
     17e:	ae d6       	rcall	.+3420   	; 0xedc <__floatunsisf>
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	40 e0       	ldi	r20, 0x00	; 0
     186:	51 e4       	ldi	r21, 0x41	; 65
     188:	3b d7       	rcall	.+3702   	; 0x1000 <__mulsf3>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
     18e:	60 e0       	ldi	r22, 0x00	; 0
     190:	74 e2       	ldi	r23, 0x24	; 36
     192:	84 e7       	ldi	r24, 0x74	; 116
     194:	9b e4       	ldi	r25, 0x4B	; 75
     196:	09 d6       	rcall	.+3090   	; 0xdaa <__divsf3>
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e8       	ldi	r20, 0x80	; 128
     19e:	5f e3       	ldi	r21, 0x3F	; 63
     1a0:	9f d5       	rcall	.+2878   	; 0xce0 <__subsf3>
     1a2:	91 d7       	rcall	.+3874   	; 0x10c6 <round>
     1a4:	6a d6       	rcall	.+3284   	; 0xe7a <__fixsfsi>
     1a6:	60 93 cc 00 	sts	0x00CC, r22	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7000cc>
     1aa:	70 93 cd 00 	sts	0x00CD, r23	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7000cd>
     1ae:	08 95       	ret

000001b0 <USART_TxChar>:

void USART_TxChar(char data)						/* Data transmitting function */
{
	UDR1 = data;										/* Write data to be transmitting in UDR */
     1b0:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
	while (!(UCSR1A & (1<<UDRE1)));					/* Wait until data transmit and buffer get empty */
     1b4:	e8 ec       	ldi	r30, 0xC8	; 200
     1b6:	f0 e0       	ldi	r31, 0x00	; 0
     1b8:	80 81       	ld	r24, Z
     1ba:	85 ff       	sbrs	r24, 5
     1bc:	fd cf       	rjmp	.-6      	; 0x1b8 <USART_TxChar+0x8>
}
     1be:	08 95       	ret

000001c0 <USART_SendString>:

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
     1c0:	cf 93       	push	r28
     1c2:	df 93       	push	r29
     1c4:	ec 01       	movw	r28, r24
	int i=0;																	
	while (str[i]!=0)
     1c6:	88 81       	ld	r24, Y
     1c8:	88 23       	and	r24, r24
     1ca:	29 f0       	breq	.+10     	; 0x1d6 <USART_SendString+0x16>
     1cc:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
     1ce:	f0 df       	rcall	.-32     	; 0x1b0 <USART_TxChar>
}

void USART_SendString(char *str)					/* Send string of USART data function */ 
{
	int i=0;																	
	while (str[i]!=0)
     1d0:	89 91       	ld	r24, Y+
     1d2:	81 11       	cpse	r24, r1
     1d4:	fc cf       	rjmp	.-8      	; 0x1ce <USART_SendString+0xe>
	{
		USART_TxChar(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
     1d6:	df 91       	pop	r29
     1d8:	cf 91       	pop	r28
     1da:	08 95       	ret

000001dc <Menu_choices>:
	
}

void Menu_choices(void)
{
	Pre_display();
     1dc:	0e 94 4a 0a 	call	0x1494	; 0x1494 <Pre_display>
	
	lcd_puts("Date");
     1e0:	80 e0       	ldi	r24, 0x00	; 0
     1e2:	92 e0       	ldi	r25, 0x02	; 2
     1e4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <lcd_puts>
	lcd_gotoxy(10,0);
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	8a e0       	ldi	r24, 0x0A	; 10
     1ec:	0e 94 df 09 	call	0x13be	; 0x13be <lcd_gotoxy>
	lcd_puts(": A\n");
     1f0:	85 e0       	ldi	r24, 0x05	; 5
     1f2:	92 e0       	ldi	r25, 0x02	; 2
     1f4:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <lcd_puts>
	lcd_puts("Temperatur: B");
     1f8:	8a e0       	ldi	r24, 0x0A	; 10
     1fa:	92 e0       	ldi	r25, 0x02	; 2
     1fc:	0e 94 fc 09 	call	0x13f8	; 0x13f8 <lcd_puts>
	lcd_gotoxy(15, 1);
     200:	61 e0       	ldi	r22, 0x01	; 1
     202:	8f e0       	ldi	r24, 0x0F	; 15
     204:	0c 94 df 09 	jmp	0x13be	; 0x13be <lcd_gotoxy>
     208:	08 95       	ret

0000020a <Menu_decoder>:

void Menu_decoder(int column, int row)
{
	unsigned int chosen = column + row;
	
	switch (chosen)
     20a:	86 0f       	add	r24, r22
     20c:	97 1f       	adc	r25, r23
     20e:	82 32       	cpi	r24, 0x22	; 34
     210:	91 05       	cpc	r25, r1
     212:	21 f0       	breq	.+8      	; 0x21c <Menu_decoder+0x12>
     214:	8c 97       	sbiw	r24, 0x2c	; 44
     216:	19 f4       	brne	.+6      	; 0x21e <Menu_decoder+0x14>
	{
		case 44:
		//Afstand();
		//Date();
		main();
     218:	20 c0       	rjmp	.+64     	; 0x25a <main>
		break;
		
		case 34:
		//Temp_menu();
		Temperatur();
     21a:	08 95       	ret
     21c:	41 c5       	rjmp	.+2690   	; 0xca0 <Temperatur>
     21e:	08 95       	ret

00000220 <Menu>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     220:	2f ef       	ldi	r18, 0xFF	; 255
     222:	83 ed       	ldi	r24, 0xD3	; 211
     224:	90 e3       	ldi	r25, 0x30	; 48
     226:	21 50       	subi	r18, 0x01	; 1
     228:	80 40       	sbci	r24, 0x00	; 0
     22a:	90 40       	sbci	r25, 0x00	; 0
     22c:	e1 f7       	brne	.-8      	; 0x226 <Menu+0x6>
     22e:	00 c0       	rjmp	.+0      	; 0x230 <Menu+0x10>
     230:	00 00       	nop
{
	_delay_ms(1000);
	unsigned int column = 1;
	unsigned int row = 90;
	
	Menu_choices();
     232:	d4 df       	rcall	.-88     	; 0x1dc <Menu_choices>
}

void Menu(void)
{
	_delay_ms(1000);
	unsigned int column = 1;
     234:	c1 e0       	ldi	r28, 0x01	; 1
     236:	d0 e0       	ldi	r29, 0x00	; 0
	
	Menu_choices();
	
	while (1)
	{
		column = ColumnScan(column);
     238:	ce 01       	movw	r24, r28
     23a:	b2 d7       	rcall	.+3940   	; 0x11a0 <ColumnScan>
		row = ReadRow();
     23c:	ec 01       	movw	r28, r24
     23e:	e6 d7       	rcall	.+4044   	; 0x120c <ReadRow>
		
		Menu_decoder(column, row);
     240:	bc 01       	movw	r22, r24
     242:	ce 01       	movw	r24, r28
     244:	e2 df       	rcall	.-60     	; 0x20a <Menu_decoder>
     246:	2f e7       	ldi	r18, 0x7F	; 127
     248:	88 e3       	ldi	r24, 0x38	; 56
     24a:	91 e0       	ldi	r25, 0x01	; 1
     24c:	21 50       	subi	r18, 0x01	; 1
     24e:	80 40       	sbci	r24, 0x00	; 0
     250:	90 40       	sbci	r25, 0x00	; 0
     252:	e1 f7       	brne	.-8      	; 0x24c <Menu+0x2c>
     254:	00 c0       	rjmp	.+0      	; 0x256 <Menu+0x36>
     256:	00 00       	nop
     258:	ef cf       	rjmp	.-34     	; 0x238 <Menu+0x18>

0000025a <main>:
#include "DS3231/ds3231.h"


int main(void)
{
	Init();
     25a:	65 df       	rcall	.-310    	; 0x126 <Init>
	i2c_init();
     25c:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <i2c_init>
	init_ds3231();
     260:	0e 94 4e 0a 	call	0x149c	; 0x149c <init_ds3231>
	USART_Init(115200);
     264:	60 e0       	ldi	r22, 0x00	; 0
     266:	72 ec       	ldi	r23, 0xC2	; 194
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	79 df       	rcall	.-270    	; 0x160 <USART_Init>
	sei();															/* Start global interrupt */
     26e:	78 94       	sei
	
	
    while (1) 
    {
		Menu();
     270:	d7 df       	rcall	.-82     	; 0x220 <Menu>

00000272 <DHT_WakeUp>:
     272:	2b 98       	cbi	0x05, 3	; 5

//Used for the initial Wakeup/connection between the DHT11 and the MCU
void DHT_WakeUp(void)
{
	clear_bit(DHT_PORT, DHT_BIT);	//Pulls the bit HIGH
	set_bit(DHT_DDR, DHT_BIT);		//Pulls the bit LOW
     274:	23 9a       	sbi	0x04, 3	; 4
     276:	2f ef       	ldi	r18, 0xFF	; 255
     278:	80 ee       	ldi	r24, 0xE0	; 224
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	21 50       	subi	r18, 0x01	; 1
     27e:	80 40       	sbci	r24, 0x00	; 0
     280:	90 40       	sbci	r25, 0x00	; 0
     282:	e1 f7       	brne	.-8      	; 0x27c <DHT_WakeUp+0xa>
     284:	00 c0       	rjmp	.+0      	; 0x286 <DHT_WakeUp+0x14>
     286:	00 00       	nop
	_delay_ms(18);					//Delay to let the DHT Detect the signal
	set_bit(DHT_PORT, DHT_BIT);		//Enabels buildin Pullup resistance
     288:	2b 9a       	sbi	0x05, 3	; 5
	clear_bit(DHT_DDR, DHT_BIT);	//Clears the bit so it will go HIGH via the pullup
     28a:	23 98       	cbi	0x04, 3	; 4
     28c:	08 95       	ret

0000028e <DHT_Response>:
}

//Checks if the DHT Responds
int DHT_Response(void)
{
     28e:	cf 92       	push	r12
     290:	df 92       	push	r13
     292:	ef 92       	push	r14
     294:	ff 92       	push	r15
	double counter = 0;
     296:	c1 2c       	mov	r12, r1
     298:	d1 2c       	mov	r13, r1
     29a:	76 01       	movw	r14, r12
	//Waits for the DHT11 to response
	while(bit_is_set(DHT_PIN, DHT_BIT))
     29c:	14 c0       	rjmp	.+40     	; 0x2c6 <DHT_Response+0x38>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     29e:	8a e0       	ldi	r24, 0x0A	; 10
     2a0:	8a 95       	dec	r24
     2a2:	f1 f7       	brne	.-4      	; 0x2a0 <DHT_Response+0x12>
     2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <DHT_Response+0x18>
	{
		_delay_us(2);
		counter += 2;
     2a6:	20 e0       	ldi	r18, 0x00	; 0
     2a8:	30 e0       	ldi	r19, 0x00	; 0
     2aa:	40 e0       	ldi	r20, 0x00	; 0
     2ac:	50 e4       	ldi	r21, 0x40	; 64
     2ae:	c7 01       	movw	r24, r14
     2b0:	b6 01       	movw	r22, r12
     2b2:	17 d5       	rcall	.+2606   	; 0xce2 <__addsf3>
     2b4:	6b 01       	movw	r12, r22
     2b6:	7c 01       	movw	r14, r24
		//If the DHT11 takes over 60 us the connection timeouts
		if (counter >= 60)
     2b8:	20 e0       	ldi	r18, 0x00	; 0
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e7       	ldi	r20, 0x70	; 112
     2be:	52 e4       	ldi	r21, 0x42	; 66
     2c0:	9b d6       	rcall	.+3382   	; 0xff8 <__gesf2>
     2c2:	88 23       	and	r24, r24
     2c4:	3c f4       	brge	.+14     	; 0x2d4 <DHT_Response+0x46>
//Checks if the DHT Responds
int DHT_Response(void)
{
	double counter = 0;
	//Waits for the DHT11 to response
	while(bit_is_set(DHT_PIN, DHT_BIT))
     2c6:	1b 99       	sbic	0x03, 3	; 3
     2c8:	ea cf       	rjmp	.-44     	; 0x29e <DHT_Response+0x10>
		//If the DHT11 takes over 60 us the connection timeouts
		if (counter >= 60)
		return 0;
	}
	//Waits for the DHT11 response to end
	while(bit_is_clear(DHT_PIN, DHT_BIT))
     2ca:	1b 9b       	sbis	0x03, 3	; 3
     2cc:	fe cf       	rjmp	.-4      	; 0x2ca <DHT_Response+0x3c>
	{
	}
	//Returns when the DHT11 gets ready to transmitt data
	while(bit_is_set(DHT_PIN, DHT_BIT))
     2ce:	1b 99       	sbic	0x03, 3	; 3
     2d0:	04 c0       	rjmp	.+8      	; 0x2da <DHT_Response+0x4c>
	{
		return 1;
	}
}
     2d2:	05 c0       	rjmp	.+10     	; 0x2de <DHT_Response+0x50>
	{
		_delay_us(2);
		counter += 2;
		//If the DHT11 takes over 60 us the connection timeouts
		if (counter >= 60)
		return 0;
     2d4:	80 e0       	ldi	r24, 0x00	; 0
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	02 c0       	rjmp	.+4      	; 0x2de <DHT_Response+0x50>
	{
	}
	//Returns when the DHT11 gets ready to transmitt data
	while(bit_is_set(DHT_PIN, DHT_BIT))
	{
		return 1;
     2da:	81 e0       	ldi	r24, 0x01	; 1
     2dc:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     2de:	ff 90       	pop	r15
     2e0:	ef 90       	pop	r14
     2e2:	df 90       	pop	r13
     2e4:	cf 90       	pop	r12
     2e6:	08 95       	ret

000002e8 <DHT_Decode_Data>:

//Decodes the data that the DHT11 sends to the MCU
void DHT_Decode_Data(int (*array)[8])
{
     2e8:	cf 93       	push	r28
	//Waits for the DHT11 to start transmitting
	while(bit_is_set(DHT_PIN, DHT_BIT))
     2ea:	02 c0       	rjmp	.+4      	; 0x2f0 <DHT_Decode_Data+0x8>
	{
		//Breaks when the DHT11 start transmitting
		if(bit_is_clear(DHT_PIN, DHT_BIT))
     2ec:	1b 9b       	sbis	0x03, 3	; 3
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <DHT_Decode_Data+0xc>

//Decodes the data that the DHT11 sends to the MCU
void DHT_Decode_Data(int (*array)[8])
{
	//Waits for the DHT11 to start transmitting
	while(bit_is_set(DHT_PIN, DHT_BIT))
     2f0:	1b 99       	sbic	0x03, 3	; 3
     2f2:	fc cf       	rjmp	.-8      	; 0x2ec <DHT_Decode_Data+0x4>
     2f4:	dc 01       	movw	r26, r24
     2f6:	80 5b       	subi	r24, 0xB0	; 176
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
				array[i][j] = 0;
			}
			//If the bit is HIGH for more than 60us the bit is Logic 1/HIGH
			if (timer > 60)
			{
				array[i][j] = 1;
     2fa:	61 e0       	ldi	r22, 0x01	; 1
     2fc:	70 e0       	ldi	r23, 0x00	; 0
     2fe:	25 c0       	rjmp	.+74     	; 0x34a <DHT_Decode_Data+0x62>
	for (i = 0; i < 5; i++){
		//Loop for each bit
		for (j = 0; j < 8; j++){
			int timer = 0;
			//Waits for the LOW part of the transmission to end
			while(bit_is_clear(DHT_PIN, DHT_BIT)){}
     300:	1b 9b       	sbis	0x03, 3	; 3
     302:	fe cf       	rjmp	.-4      	; 0x300 <DHT_Decode_Data+0x18>
			
			//Begins counting the time the bit is HIGH
			while(bit_is_set(DHT_PIN, DHT_BIT)){
     304:	1b 9b       	sbis	0x03, 3	; 3
     306:	0e c0       	rjmp	.+28     	; 0x324 <DHT_Decode_Data+0x3c>
     308:	20 e0       	ldi	r18, 0x00	; 0
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	ca e0       	ldi	r28, 0x0A	; 10
     30e:	ca 95       	dec	r28
     310:	f1 f7       	brne	.-4      	; 0x30e <DHT_Decode_Data+0x26>
     312:	00 c0       	rjmp	.+0      	; 0x314 <DHT_Decode_Data+0x2c>
				_delay_us(2);
				timer += 2;
     314:	2e 5f       	subi	r18, 0xFE	; 254
     316:	3f 4f       	sbci	r19, 0xFF	; 255
			int timer = 0;
			//Waits for the LOW part of the transmission to end
			while(bit_is_clear(DHT_PIN, DHT_BIT)){}
			
			//Begins counting the time the bit is HIGH
			while(bit_is_set(DHT_PIN, DHT_BIT)){
     318:	1b 99       	sbic	0x03, 3	; 3
     31a:	f8 cf       	rjmp	.-16     	; 0x30c <DHT_Decode_Data+0x24>
				_delay_us(2);
				timer += 2;
			}
			//If the bit is HIGH for less than 23us the bit is Logic 0/LOW
			if (timer < 23 || timer == NULL)
     31c:	27 31       	cpi	r18, 0x17	; 23
     31e:	31 05       	cpc	r19, r1
     320:	34 f4       	brge	.+12     	; 0x32e <DHT_Decode_Data+0x46>
     322:	02 c0       	rjmp	.+4      	; 0x328 <DHT_Decode_Data+0x40>
			int timer = 0;
			//Waits for the LOW part of the transmission to end
			while(bit_is_clear(DHT_PIN, DHT_BIT)){}
			
			//Begins counting the time the bit is HIGH
			while(bit_is_set(DHT_PIN, DHT_BIT)){
     324:	20 e0       	ldi	r18, 0x00	; 0
     326:	30 e0       	ldi	r19, 0x00	; 0
				timer += 2;
			}
			//If the bit is HIGH for less than 23us the bit is Logic 0/LOW
			if (timer < 23 || timer == NULL)
			{
				array[i][j] = 0;
     328:	11 96       	adiw	r26, 0x01	; 1
     32a:	1c 92       	st	X, r1
     32c:	1e 92       	st	-X, r1
			}
			//If the bit is HIGH for more than 60us the bit is Logic 1/HIGH
			if (timer > 60)
     32e:	2d 33       	cpi	r18, 0x3D	; 61
     330:	31 05       	cpc	r19, r1
     332:	14 f0       	brlt	.+4      	; 0x338 <DHT_Decode_Data+0x50>
			{
				array[i][j] = 1;
     334:	71 83       	std	Z+1, r23	; 0x01
     336:	60 83       	st	Z, r22
     338:	32 96       	adiw	r30, 0x02	; 2
     33a:	12 96       	adiw	r26, 0x02	; 2
	int i;
	int j;
	//Loop for each byte
	for (i = 0; i < 5; i++){
		//Loop for each bit
		for (j = 0; j < 8; j++){
     33c:	4e 17       	cp	r20, r30
     33e:	5f 07       	cpc	r21, r31
     340:	f9 f6       	brne	.-66     	; 0x300 <DHT_Decode_Data+0x18>
     342:	da 01       	movw	r26, r20
		break;
	}
	int i;
	int j;
	//Loop for each byte
	for (i = 0; i < 5; i++){
     344:	48 17       	cp	r20, r24
     346:	59 07       	cpc	r21, r25
     348:	29 f0       	breq	.+10     	; 0x354 <DHT_Decode_Data+0x6c>
     34a:	ad 01       	movw	r20, r26
     34c:	40 5f       	subi	r20, 0xF0	; 240
     34e:	5f 4f       	sbci	r21, 0xFF	; 255
	}
}

//Decodes the data that the DHT11 sends to the MCU
void DHT_Decode_Data(int (*array)[8])
{
     350:	fd 01       	movw	r30, r26
     352:	d6 cf       	rjmp	.-84     	; 0x300 <DHT_Decode_Data+0x18>
			{
				array[i][j] = 1;
			}
		}
	}
}
     354:	cf 91       	pop	r28
     356:	08 95       	ret

00000358 <ConvertToDecimal>:
{
	int multiplier = 1, output = 0;
	//Runs through each bit in the selected byte LSB First
	for(int i = 7; i >= 0; i--)
	{
		output += (multiplier * array[byte - 1][i]);
     358:	ab 01       	movw	r20, r22
     35a:	41 50       	subi	r20, 0x01	; 1
     35c:	50 4f       	sbci	r21, 0xF0	; 240
     35e:	42 95       	swap	r20
     360:	52 95       	swap	r21
     362:	50 7f       	andi	r21, 0xF0	; 240
     364:	54 27       	eor	r21, r20
     366:	40 7f       	andi	r20, 0xF0	; 240
     368:	54 27       	eor	r21, r20
     36a:	84 0f       	add	r24, r20
     36c:	95 1f       	adc	r25, r21
     36e:	fc 01       	movw	r30, r24
     370:	70 96       	adiw	r30, 0x10	; 16
     372:	ac 01       	movw	r20, r24
}

//Converts the bytes in the array to Decimal
int ConvertToDecimal(int (*array)[8], int byte)
{
	int multiplier = 1, output = 0;
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	21 e0       	ldi	r18, 0x01	; 1
     37a:	30 e0       	ldi	r19, 0x00	; 0
	//Runs through each bit in the selected byte LSB First
	for(int i = 7; i >= 0; i--)
	{
		output += (multiplier * array[byte - 1][i]);
     37c:	b2 91       	ld	r27, -Z
     37e:	a2 91       	ld	r26, -Z
     380:	2a 9f       	mul	r18, r26
     382:	b0 01       	movw	r22, r0
     384:	2b 9f       	mul	r18, r27
     386:	70 0d       	add	r23, r0
     388:	3a 9f       	mul	r19, r26
     38a:	70 0d       	add	r23, r0
     38c:	11 24       	eor	r1, r1
     38e:	86 0f       	add	r24, r22
     390:	97 1f       	adc	r25, r23
		//Decides what the bit will be multiplied by: 1->2->4->8->16->32->64->128
		multiplier *= 2;
     392:	22 0f       	add	r18, r18
     394:	33 1f       	adc	r19, r19
//Converts the bytes in the array to Decimal
int ConvertToDecimal(int (*array)[8], int byte)
{
	int multiplier = 1, output = 0;
	//Runs through each bit in the selected byte LSB First
	for(int i = 7; i >= 0; i--)
     396:	e4 17       	cp	r30, r20
     398:	f5 07       	cpc	r31, r21
     39a:	81 f7       	brne	.-32     	; 0x37c <ConvertToDecimal+0x24>
		output += (multiplier * array[byte - 1][i]);
		//Decides what the bit will be multiplied by: 1->2->4->8->16->32->64->128
		multiplier *= 2;
	}
	return output;
     39c:	08 95       	ret

0000039e <Read_Response>:
	uint16_t len = 0;
	_delay_ms(100);
	while(ESP8266_DataAvailable() > 0)
	_buffer[len++] = ESP8266_DataRead();
	return len;
}
     39e:	2f 92       	push	r2
     3a0:	3f 92       	push	r3
     3a2:	4f 92       	push	r4
     3a4:	5f 92       	push	r5
     3a6:	6f 92       	push	r6
     3a8:	7f 92       	push	r7
     3aa:	8f 92       	push	r8
     3ac:	9f 92       	push	r9
     3ae:	af 92       	push	r10
     3b0:	bf 92       	push	r11
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	cd b7       	in	r28, 0x3d	; 61
     3c4:	de b7       	in	r29, 0x3e	; 62
     3c6:	2c 97       	sbiw	r28, 0x0c	; 12
     3c8:	0f b6       	in	r0, 0x3f	; 63
     3ca:	f8 94       	cli
     3cc:	de bf       	out	0x3e, r29	; 62
     3ce:	0f be       	out	0x3f, r0	; 63
     3d0:	cd bf       	out	0x3d, r28	; 61
     3d2:	9e 83       	std	Y+6, r25	; 0x06
     3d4:	8d 83       	std	Y+5, r24	; 0x05
     3d6:	2d b7       	in	r18, 0x3d	; 61
     3d8:	3e b7       	in	r19, 0x3e	; 62
     3da:	3c 87       	std	Y+12, r19	; 0x0c
     3dc:	2b 87       	std	Y+11, r18	; 0x0b
     3de:	fc 01       	movw	r30, r24
     3e0:	01 90       	ld	r0, Z+
     3e2:	00 20       	and	r0, r0
     3e4:	e9 f7       	brne	.-6      	; 0x3e0 <Read_Response+0x42>
     3e6:	31 97       	sbiw	r30, 0x01	; 1
     3e8:	5f 01       	movw	r10, r30
     3ea:	a8 1a       	sub	r10, r24
     3ec:	b9 0a       	sbc	r11, r25
     3ee:	bb 24       	eor	r11, r11
     3f0:	a5 01       	movw	r20, r10
     3f2:	41 50       	subi	r20, 0x01	; 1
     3f4:	51 09       	sbc	r21, r1
     3f6:	58 87       	std	Y+8, r21	; 0x08
     3f8:	4f 83       	std	Y+7, r20	; 0x07
     3fa:	8d b7       	in	r24, 0x3d	; 61
     3fc:	9e b7       	in	r25, 0x3e	; 62
     3fe:	8a 19       	sub	r24, r10
     400:	9b 09       	sbc	r25, r11
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	9e bf       	out	0x3e, r25	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	8d bf       	out	0x3d, r24	; 61
     40c:	ad b7       	in	r26, 0x3d	; 61
     40e:	be b7       	in	r27, 0x3e	; 62
     410:	11 96       	adiw	r26, 0x01	; 1
     412:	4d 01       	movw	r8, r26
     414:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
     418:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <__data_end+0x1>
     41c:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <__data_end+0x2>
     420:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <__data_end+0x3>
     424:	80 3f       	cpi	r24, 0xF0	; 240
     426:	98 4d       	sbci	r25, 0xD8	; 216
     428:	af 4f       	sbci	r26, 0xFF	; 255
     42a:	bf 4f       	sbci	r27, 0xFF	; 255
     42c:	61 f4       	brne	.+24     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     42e:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
     432:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__data_end+0x1>
     436:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <__data_end+0x2>
     43a:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <__data_end+0x3>
     43e:	82 e0       	ldi	r24, 0x02	; 2
     440:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Response_Status>
     444:	9b c0       	rjmp	.+310    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     446:	19 82       	std	Y+1, r1	; 0x01
     448:	1a 82       	std	Y+2, r1	; 0x02
     44a:	1b 82       	std	Y+3, r1	; 0x03
     44c:	1c 82       	std	Y+4, r1	; 0x04
     44e:	2f 80       	ldd	r2, Y+7	; 0x07
     450:	38 84       	ldd	r3, Y+8	; 0x08
     452:	28 0c       	add	r2, r8
     454:	39 1c       	adc	r3, r9
     456:	94 01       	movw	r18, r8
     458:	2f 5f       	subi	r18, 0xFF	; 255
     45a:	3f 4f       	sbci	r19, 0xFF	; 255
     45c:	3a 87       	std	Y+10, r19	; 0x0a
     45e:	29 87       	std	Y+9, r18	; 0x09
     460:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     464:	84 30       	cpi	r24, 0x04	; 4
     466:	11 f4       	brne	.+4      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
     468:	10 92 90 04 	sts	0x0490, r1	; 0x800490 <Response_Status>
     46c:	e0 ef       	ldi	r30, 0xF0	; 240
     46e:	f3 e0       	ldi	r31, 0x03	; 3
     470:	01 90       	ld	r0, Z+
     472:	00 20       	and	r0, r0
     474:	e9 f7       	brne	.-6      	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
     476:	31 97       	sbiw	r30, 0x01	; 1
     478:	cf 01       	movw	r24, r30
     47a:	80 5f       	subi	r24, 0xF0	; 240
     47c:	93 40       	sbci	r25, 0x03	; 3
     47e:	6c 01       	movw	r12, r24
     480:	e1 2c       	mov	r14, r1
     482:	f1 2c       	mov	r15, r1
     484:	c1 14       	cp	r12, r1
     486:	d1 04       	cpc	r13, r1
     488:	e1 04       	cpc	r14, r1
     48a:	f1 04       	cpc	r15, r1
     48c:	09 f4       	brne	.+2      	; 0x490 <__LOCK_REGION_LENGTH__+0x90>
     48e:	51 c0       	rjmp	.+162    	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     490:	8f e9       	ldi	r24, 0x9F	; 159
     492:	9f e0       	ldi	r25, 0x0F	; 15
     494:	01 97       	sbiw	r24, 0x01	; 1
     496:	f1 f7       	brne	.-4      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     498:	00 c0       	rjmp	.+0      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     49a:	00 00       	nop
     49c:	29 81       	ldd	r18, Y+1	; 0x01
     49e:	3a 81       	ldd	r19, Y+2	; 0x02
     4a0:	4b 81       	ldd	r20, Y+3	; 0x03
     4a2:	5c 81       	ldd	r21, Y+4	; 0x04
     4a4:	2f 5f       	subi	r18, 0xFF	; 255
     4a6:	3f 4f       	sbci	r19, 0xFF	; 255
     4a8:	4f 4f       	sbci	r20, 0xFF	; 255
     4aa:	5f 4f       	sbci	r21, 0xFF	; 255
     4ac:	29 83       	std	Y+1, r18	; 0x01
     4ae:	3a 83       	std	Y+2, r19	; 0x02
     4b0:	4b 83       	std	Y+3, r20	; 0x03
     4b2:	5c 83       	std	Y+4, r21	; 0x04
     4b4:	e0 ef       	ldi	r30, 0xF0	; 240
     4b6:	f3 e0       	ldi	r31, 0x03	; 3
     4b8:	01 90       	ld	r0, Z+
     4ba:	00 20       	and	r0, r0
     4bc:	e9 f7       	brne	.-6      	; 0x4b8 <__LOCK_REGION_LENGTH__+0xb8>
     4be:	31 97       	sbiw	r30, 0x01	; 1
     4c0:	cf 01       	movw	r24, r30
     4c2:	80 5f       	subi	r24, 0xF0	; 240
     4c4:	93 40       	sbci	r25, 0x03	; 3
     4c6:	a0 e0       	ldi	r26, 0x00	; 0
     4c8:	b0 e0       	ldi	r27, 0x00	; 0
     4ca:	c8 16       	cp	r12, r24
     4cc:	d9 06       	cpc	r13, r25
     4ce:	ea 06       	cpc	r14, r26
     4d0:	fb 06       	cpc	r15, r27
     4d2:	79 f5       	brne	.+94     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     4d4:	00 ef       	ldi	r16, 0xF0	; 240
     4d6:	13 e0       	ldi	r17, 0x03	; 3
     4d8:	41 2c       	mov	r4, r1
     4da:	51 2c       	mov	r5, r1
     4dc:	32 01       	movw	r6, r4
     4de:	4f 81       	ldd	r20, Y+7	; 0x07
     4e0:	58 85       	ldd	r21, Y+8	; 0x08
     4e2:	69 85       	ldd	r22, Y+9	; 0x09
     4e4:	7a 85       	ldd	r23, Y+10	; 0x0a
     4e6:	c4 01       	movw	r24, r8
     4e8:	0e 94 8e 0a 	call	0x151c	; 0x151c <memmove>
     4ec:	d8 01       	movw	r26, r16
     4ee:	8d 91       	ld	r24, X+
     4f0:	8d 01       	movw	r16, r26
     4f2:	f1 01       	movw	r30, r2
     4f4:	80 83       	st	Z, r24
     4f6:	a5 01       	movw	r20, r10
     4f8:	6d 81       	ldd	r22, Y+5	; 0x05
     4fa:	7e 81       	ldd	r23, Y+6	; 0x06
     4fc:	c4 01       	movw	r24, r8
     4fe:	0e 94 9f 0a 	call	0x153e	; 0x153e <strncmp>
     502:	89 2b       	or	r24, r25
     504:	61 f4       	brne	.+24     	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     506:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
     50a:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__data_end+0x1>
     50e:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <__data_end+0x2>
     512:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <__data_end+0x3>
     516:	81 e0       	ldi	r24, 0x01	; 1
     518:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Response_Status>
     51c:	2f c0       	rjmp	.+94     	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     51e:	ff ef       	ldi	r31, 0xFF	; 255
     520:	4f 1a       	sub	r4, r31
     522:	5f 0a       	sbc	r5, r31
     524:	6f 0a       	sbc	r6, r31
     526:	7f 0a       	sbc	r7, r31
     528:	4c 14       	cp	r4, r12
     52a:	5d 04       	cpc	r5, r13
     52c:	6e 04       	cpc	r6, r14
     52e:	7f 04       	cpc	r7, r15
     530:	b1 f6       	brne	.-84     	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     532:	8f e9       	ldi	r24, 0x9F	; 159
     534:	9f e0       	ldi	r25, 0x0F	; 15
     536:	01 97       	sbiw	r24, 0x01	; 1
     538:	f1 f7       	brne	.-4      	; 0x536 <__LOCK_REGION_LENGTH__+0x136>
     53a:	00 c0       	rjmp	.+0      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     53c:	00 00       	nop
     53e:	29 81       	ldd	r18, Y+1	; 0x01
     540:	3a 81       	ldd	r19, Y+2	; 0x02
     542:	4b 81       	ldd	r20, Y+3	; 0x03
     544:	5c 81       	ldd	r21, Y+4	; 0x04
     546:	2f 5f       	subi	r18, 0xFF	; 255
     548:	3f 4f       	sbci	r19, 0xFF	; 255
     54a:	4f 4f       	sbci	r20, 0xFF	; 255
     54c:	5f 4f       	sbci	r21, 0xFF	; 255
     54e:	29 83       	std	Y+1, r18	; 0x01
     550:	3a 83       	std	Y+2, r19	; 0x02
     552:	4b 83       	std	Y+3, r20	; 0x03
     554:	5c 83       	std	Y+4, r21	; 0x04
     556:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
     55a:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <__data_end+0x1>
     55e:	a0 91 ea 03 	lds	r26, 0x03EA	; 0x8003ea <__data_end+0x2>
     562:	b0 91 eb 03 	lds	r27, 0x03EB	; 0x8003eb <__data_end+0x3>
     566:	80 5f       	subi	r24, 0xF0	; 240
     568:	98 4d       	sbci	r25, 0xD8	; 216
     56a:	af 4f       	sbci	r26, 0xFF	; 255
     56c:	bf 4f       	sbci	r27, 0xFF	; 255
     56e:	28 17       	cp	r18, r24
     570:	39 07       	cpc	r19, r25
     572:	4a 07       	cpc	r20, r26
     574:	5b 07       	cpc	r21, r27
     576:	08 f4       	brcc	.+2      	; 0x57a <__LOCK_REGION_LENGTH__+0x17a>
     578:	73 cf       	rjmp	.-282    	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     57a:	59 cf       	rjmp	.-334    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
     57c:	4b 85       	ldd	r20, Y+11	; 0x0b
     57e:	5c 85       	ldd	r21, Y+12	; 0x0c
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	5e bf       	out	0x3e, r21	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	4d bf       	out	0x3d, r20	; 61
     58a:	2c 96       	adiw	r28, 0x0c	; 12
     58c:	0f b6       	in	r0, 0x3f	; 63
     58e:	f8 94       	cli
     590:	de bf       	out	0x3e, r29	; 62
     592:	0f be       	out	0x3f, r0	; 63
     594:	cd bf       	out	0x3d, r28	; 61
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	5f 90       	pop	r5
     5b4:	4f 90       	pop	r4
     5b6:	3f 90       	pop	r3
     5b8:	2f 90       	pop	r2
     5ba:	08 95       	ret

000005bc <ESP8266_Clear>:
     5bc:	80 ea       	ldi	r24, 0xA0	; 160
     5be:	e0 ef       	ldi	r30, 0xF0	; 240
     5c0:	f3 e0       	ldi	r31, 0x03	; 3
     5c2:	df 01       	movw	r26, r30
     5c4:	1d 92       	st	X+, r1
     5c6:	8a 95       	dec	r24
     5c8:	e9 f7       	brne	.-6      	; 0x5c4 <ESP8266_Clear+0x8>
     5ca:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <Counter+0x1>
     5ce:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <Counter>
     5d2:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <pointer+0x1>
     5d6:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <pointer>
     5da:	08 95       	ret

000005dc <Start_Read_Response>:
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	ec 01       	movw	r28, r24
     5e2:	84 e0       	ldi	r24, 0x04	; 4
     5e4:	80 93 90 04 	sts	0x0490, r24	; 0x800490 <Response_Status>
     5e8:	ce 01       	movw	r24, r28
     5ea:	d9 de       	rcall	.-590    	; 0x39e <Read_Response>
     5ec:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     5f0:	88 23       	and	r24, r24
     5f2:	d1 f3       	breq	.-12     	; 0x5e8 <Start_Read_Response+0xc>
     5f4:	df 91       	pop	r29
     5f6:	cf 91       	pop	r28
     5f8:	08 95       	ret

000005fa <WaitForExpectedResponse>:
     5fa:	f0 df       	rcall	.-32     	; 0x5dc <Start_Read_Response>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	90 91 90 04 	lds	r25, 0x0490	; 0x800490 <Response_Status>
     602:	92 30       	cpi	r25, 0x02	; 2
     604:	09 f4       	brne	.+2      	; 0x608 <WaitForExpectedResponse+0xe>
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	08 95       	ret

0000060a <SendATandExpectResponse>:
     60a:	0f 93       	push	r16
     60c:	1f 93       	push	r17
     60e:	cf 93       	push	r28
     610:	df 93       	push	r29
     612:	8c 01       	movw	r16, r24
     614:	eb 01       	movw	r28, r22
     616:	d2 df       	rcall	.-92     	; 0x5bc <ESP8266_Clear>
     618:	c8 01       	movw	r24, r16
     61a:	d2 dd       	rcall	.-1116   	; 0x1c0 <USART_SendString>
     61c:	80 e8       	ldi	r24, 0x80	; 128
     61e:	92 e0       	ldi	r25, 0x02	; 2
     620:	cf dd       	rcall	.-1122   	; 0x1c0 <USART_SendString>
     622:	ce 01       	movw	r24, r28
     624:	ea df       	rcall	.-44     	; 0x5fa <WaitForExpectedResponse>
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	08 95       	ret

00000630 <ESP8266_ApplicationMode>:
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	64 97       	sbiw	r28, 0x14	; 20
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	8e 01       	movw	r16, r28
     64a:	0f 5f       	subi	r16, 0xFF	; 255
     64c:	1f 4f       	sbci	r17, 0xFF	; 255
     64e:	94 e1       	ldi	r25, 0x14	; 20
     650:	f8 01       	movw	r30, r16
     652:	11 92       	st	Z+, r1
     654:	9a 95       	dec	r25
     656:	e9 f7       	brne	.-6      	; 0x652 <ESP8266_ApplicationMode+0x22>
     658:	1f 92       	push	r1
     65a:	8f 93       	push	r24
     65c:	8f e1       	ldi	r24, 0x1F	; 31
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	1f 93       	push	r17
     666:	0f 93       	push	r16
     668:	92 d7       	rcall	.+3876   	; 0x158e <sprintf>
     66a:	1c 8a       	std	Y+20, r1	; 0x14
     66c:	68 e1       	ldi	r22, 0x18	; 24
     66e:	72 e0       	ldi	r23, 0x02	; 2
     670:	c8 01       	movw	r24, r16
     672:	cb df       	rcall	.-106    	; 0x60a <SendATandExpectResponse>
     674:	0f 90       	pop	r0
     676:	0f 90       	pop	r0
     678:	0f 90       	pop	r0
     67a:	0f 90       	pop	r0
     67c:	0f 90       	pop	r0
     67e:	0f 90       	pop	r0
     680:	64 96       	adiw	r28, 0x14	; 20
     682:	0f b6       	in	r0, 0x3f	; 63
     684:	f8 94       	cli
     686:	de bf       	out	0x3e, r29	; 62
     688:	0f be       	out	0x3f, r0	; 63
     68a:	cd bf       	out	0x3d, r28	; 61
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	08 95       	ret

00000696 <ESP8266_ConnectionMode>:
     696:	0f 93       	push	r16
     698:	1f 93       	push	r17
     69a:	cf 93       	push	r28
     69c:	df 93       	push	r29
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	64 97       	sbiw	r28, 0x14	; 20
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	8e 01       	movw	r16, r28
     6b0:	0f 5f       	subi	r16, 0xFF	; 255
     6b2:	1f 4f       	sbci	r17, 0xFF	; 255
     6b4:	94 e1       	ldi	r25, 0x14	; 20
     6b6:	f8 01       	movw	r30, r16
     6b8:	11 92       	st	Z+, r1
     6ba:	9a 95       	dec	r25
     6bc:	e9 f7       	brne	.-6      	; 0x6b8 <ESP8266_ConnectionMode+0x22>
     6be:	1f 92       	push	r1
     6c0:	8f 93       	push	r24
     6c2:	8d e2       	ldi	r24, 0x2D	; 45
     6c4:	92 e0       	ldi	r25, 0x02	; 2
     6c6:	9f 93       	push	r25
     6c8:	8f 93       	push	r24
     6ca:	1f 93       	push	r17
     6cc:	0f 93       	push	r16
     6ce:	5f d7       	rcall	.+3774   	; 0x158e <sprintf>
     6d0:	1c 8a       	std	Y+20, r1	; 0x14
     6d2:	68 e1       	ldi	r22, 0x18	; 24
     6d4:	72 e0       	ldi	r23, 0x02	; 2
     6d6:	c8 01       	movw	r24, r16
     6d8:	98 df       	rcall	.-208    	; 0x60a <SendATandExpectResponse>
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	0f 90       	pop	r0
     6e0:	0f 90       	pop	r0
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	64 96       	adiw	r28, 0x14	; 20
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	08 95       	ret

000006fc <ESP8266_Begin>:
     6fc:	cf 93       	push	r28
     6fe:	c5 e0       	ldi	r28, 0x05	; 5
     700:	68 e1       	ldi	r22, 0x18	; 24
     702:	72 e0       	ldi	r23, 0x02	; 2
     704:	8a e3       	ldi	r24, 0x3A	; 58
     706:	92 e0       	ldi	r25, 0x02	; 2
     708:	80 df       	rcall	.-256    	; 0x60a <SendATandExpectResponse>
     70a:	81 11       	cpse	r24, r1
     70c:	09 c0       	rjmp	.+18     	; 0x720 <ESP8266_Begin+0x24>
     70e:	68 e1       	ldi	r22, 0x18	; 24
     710:	72 e0       	ldi	r23, 0x02	; 2
     712:	8f e3       	ldi	r24, 0x3F	; 63
     714:	92 e0       	ldi	r25, 0x02	; 2
     716:	79 df       	rcall	.-270    	; 0x60a <SendATandExpectResponse>
     718:	81 11       	cpse	r24, r1
     71a:	02 c0       	rjmp	.+4      	; 0x720 <ESP8266_Begin+0x24>
     71c:	c1 50       	subi	r28, 0x01	; 1
     71e:	81 f7       	brne	.-32     	; 0x700 <ESP8266_Begin+0x4>
     720:	cf 91       	pop	r28
     722:	08 95       	ret

00000724 <ESP8266_WIFIMode>:
     724:	0f 93       	push	r16
     726:	1f 93       	push	r17
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
     730:	64 97       	sbiw	r28, 0x14	; 20
     732:	0f b6       	in	r0, 0x3f	; 63
     734:	f8 94       	cli
     736:	de bf       	out	0x3e, r29	; 62
     738:	0f be       	out	0x3f, r0	; 63
     73a:	cd bf       	out	0x3d, r28	; 61
     73c:	8e 01       	movw	r16, r28
     73e:	0f 5f       	subi	r16, 0xFF	; 255
     740:	1f 4f       	sbci	r17, 0xFF	; 255
     742:	94 e1       	ldi	r25, 0x14	; 20
     744:	f8 01       	movw	r30, r16
     746:	11 92       	st	Z+, r1
     748:	9a 95       	dec	r25
     74a:	e9 f7       	brne	.-6      	; 0x746 <ESP8266_WIFIMode+0x22>
     74c:	1f 92       	push	r1
     74e:	8f 93       	push	r24
     750:	80 e5       	ldi	r24, 0x50	; 80
     752:	92 e0       	ldi	r25, 0x02	; 2
     754:	9f 93       	push	r25
     756:	8f 93       	push	r24
     758:	1f 93       	push	r17
     75a:	0f 93       	push	r16
     75c:	18 d7       	rcall	.+3632   	; 0x158e <sprintf>
     75e:	1c 8a       	std	Y+20, r1	; 0x14
     760:	68 e1       	ldi	r22, 0x18	; 24
     762:	72 e0       	ldi	r23, 0x02	; 2
     764:	c8 01       	movw	r24, r16
     766:	51 df       	rcall	.-350    	; 0x60a <SendATandExpectResponse>
     768:	0f 90       	pop	r0
     76a:	0f 90       	pop	r0
     76c:	0f 90       	pop	r0
     76e:	0f 90       	pop	r0
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	64 96       	adiw	r28, 0x14	; 20
     776:	0f b6       	in	r0, 0x3f	; 63
     778:	f8 94       	cli
     77a:	de bf       	out	0x3e, r29	; 62
     77c:	0f be       	out	0x3f, r0	; 63
     77e:	cd bf       	out	0x3d, r28	; 61
     780:	df 91       	pop	r29
     782:	cf 91       	pop	r28
     784:	1f 91       	pop	r17
     786:	0f 91       	pop	r16
     788:	08 95       	ret

0000078a <ESP8266_JoinAccessPoint>:
     78a:	0f 93       	push	r16
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	ec 97       	sbiw	r28, 0x3c	; 60
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
     7a2:	8e 01       	movw	r16, r28
     7a4:	0f 5f       	subi	r16, 0xFF	; 255
     7a6:	1f 4f       	sbci	r17, 0xFF	; 255
     7a8:	2c e3       	ldi	r18, 0x3C	; 60
     7aa:	f8 01       	movw	r30, r16
     7ac:	11 92       	st	Z+, r1
     7ae:	2a 95       	dec	r18
     7b0:	e9 f7       	brne	.-6      	; 0x7ac <ESP8266_JoinAccessPoint+0x22>
     7b2:	7f 93       	push	r23
     7b4:	6f 93       	push	r22
     7b6:	9f 93       	push	r25
     7b8:	8f 93       	push	r24
     7ba:	8d e5       	ldi	r24, 0x5D	; 93
     7bc:	92 e0       	ldi	r25, 0x02	; 2
     7be:	9f 93       	push	r25
     7c0:	8f 93       	push	r24
     7c2:	1f 93       	push	r17
     7c4:	0f 93       	push	r16
     7c6:	e3 d6       	rcall	.+3526   	; 0x158e <sprintf>
     7c8:	1c ae       	std	Y+60, r1	; 0x3c
     7ca:	60 e7       	ldi	r22, 0x70	; 112
     7cc:	72 e0       	ldi	r23, 0x02	; 2
     7ce:	c8 01       	movw	r24, r16
     7d0:	1c df       	rcall	.-456    	; 0x60a <SendATandExpectResponse>
     7d2:	0f b6       	in	r0, 0x3f	; 63
     7d4:	f8 94       	cli
     7d6:	de bf       	out	0x3e, r29	; 62
     7d8:	0f be       	out	0x3f, r0	; 63
     7da:	cd bf       	out	0x3d, r28	; 61
     7dc:	81 11       	cpse	r24, r1
     7de:	1e c0       	rjmp	.+60     	; 0x81c <ESP8266_JoinAccessPoint+0x92>
     7e0:	63 e8       	ldi	r22, 0x83	; 131
     7e2:	72 e0       	ldi	r23, 0x02	; 2
     7e4:	80 ef       	ldi	r24, 0xF0	; 240
     7e6:	93 e0       	ldi	r25, 0x03	; 3
     7e8:	b8 d6       	rcall	.+3440   	; 0x155a <strstr>
     7ea:	89 2b       	or	r24, r25
     7ec:	c9 f4       	brne	.+50     	; 0x820 <ESP8266_JoinAccessPoint+0x96>
     7ee:	6c e8       	ldi	r22, 0x8C	; 140
     7f0:	72 e0       	ldi	r23, 0x02	; 2
     7f2:	80 ef       	ldi	r24, 0xF0	; 240
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	b1 d6       	rcall	.+3426   	; 0x155a <strstr>
     7f8:	89 2b       	or	r24, r25
     7fa:	a1 f4       	brne	.+40     	; 0x824 <ESP8266_JoinAccessPoint+0x9a>
     7fc:	65 e9       	ldi	r22, 0x95	; 149
     7fe:	72 e0       	ldi	r23, 0x02	; 2
     800:	80 ef       	ldi	r24, 0xF0	; 240
     802:	93 e0       	ldi	r25, 0x03	; 3
     804:	aa d6       	rcall	.+3412   	; 0x155a <strstr>
     806:	89 2b       	or	r24, r25
     808:	79 f4       	brne	.+30     	; 0x828 <ESP8266_JoinAccessPoint+0x9e>
     80a:	6e e9       	ldi	r22, 0x9E	; 158
     80c:	72 e0       	ldi	r23, 0x02	; 2
     80e:	80 ef       	ldi	r24, 0xF0	; 240
     810:	93 e0       	ldi	r25, 0x03	; 3
     812:	a3 d6       	rcall	.+3398   	; 0x155a <strstr>
     814:	89 2b       	or	r24, r25
     816:	51 f4       	brne	.+20     	; 0x82c <ESP8266_JoinAccessPoint+0xa2>
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	09 c0       	rjmp	.+18     	; 0x82e <ESP8266_JoinAccessPoint+0xa4>
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	07 c0       	rjmp	.+14     	; 0x82e <ESP8266_JoinAccessPoint+0xa4>
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	05 c0       	rjmp	.+10     	; 0x82e <ESP8266_JoinAccessPoint+0xa4>
     824:	82 e0       	ldi	r24, 0x02	; 2
     826:	03 c0       	rjmp	.+6      	; 0x82e <ESP8266_JoinAccessPoint+0xa4>
     828:	83 e0       	ldi	r24, 0x03	; 3
     82a:	01 c0       	rjmp	.+2      	; 0x82e <ESP8266_JoinAccessPoint+0xa4>
     82c:	84 e0       	ldi	r24, 0x04	; 4
     82e:	ec 96       	adiw	r28, 0x3c	; 60
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	df 91       	pop	r29
     83c:	cf 91       	pop	r28
     83e:	1f 91       	pop	r17
     840:	0f 91       	pop	r16
     842:	08 95       	ret

00000844 <ESP8266_connected>:
     844:	68 e1       	ldi	r22, 0x18	; 24
     846:	72 e0       	ldi	r23, 0x02	; 2
     848:	87 ea       	ldi	r24, 0xA7	; 167
     84a:	92 e0       	ldi	r25, 0x02	; 2
     84c:	de de       	rcall	.-580    	; 0x60a <SendATandExpectResponse>
     84e:	64 eb       	ldi	r22, 0xB4	; 180
     850:	72 e0       	ldi	r23, 0x02	; 2
     852:	80 ef       	ldi	r24, 0xF0	; 240
     854:	93 e0       	ldi	r25, 0x03	; 3
     856:	81 d6       	rcall	.+3330   	; 0x155a <strstr>
     858:	89 2b       	or	r24, r25
     85a:	b9 f4       	brne	.+46     	; 0x88a <ESP8266_connected+0x46>
     85c:	6d eb       	ldi	r22, 0xBD	; 189
     85e:	72 e0       	ldi	r23, 0x02	; 2
     860:	80 ef       	ldi	r24, 0xF0	; 240
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	7a d6       	rcall	.+3316   	; 0x155a <strstr>
     866:	89 2b       	or	r24, r25
     868:	91 f4       	brne	.+36     	; 0x88e <ESP8266_connected+0x4a>
     86a:	66 ec       	ldi	r22, 0xC6	; 198
     86c:	72 e0       	ldi	r23, 0x02	; 2
     86e:	80 ef       	ldi	r24, 0xF0	; 240
     870:	93 e0       	ldi	r25, 0x03	; 3
     872:	73 d6       	rcall	.+3302   	; 0x155a <strstr>
     874:	89 2b       	or	r24, r25
     876:	69 f4       	brne	.+26     	; 0x892 <ESP8266_connected+0x4e>
     878:	6f ec       	ldi	r22, 0xCF	; 207
     87a:	72 e0       	ldi	r23, 0x02	; 2
     87c:	80 ef       	ldi	r24, 0xF0	; 240
     87e:	93 e0       	ldi	r25, 0x03	; 3
     880:	6c d6       	rcall	.+3288   	; 0x155a <strstr>
     882:	89 2b       	or	r24, r25
     884:	41 f4       	brne	.+16     	; 0x896 <ESP8266_connected+0x52>
     886:	84 e0       	ldi	r24, 0x04	; 4
     888:	08 95       	ret
     88a:	80 e0       	ldi	r24, 0x00	; 0
     88c:	08 95       	ret
     88e:	81 e0       	ldi	r24, 0x01	; 1
     890:	08 95       	ret
     892:	82 e0       	ldi	r24, 0x02	; 2
     894:	08 95       	ret
     896:	83 e0       	ldi	r24, 0x03	; 3
     898:	08 95       	ret

0000089a <ESP8266_Start>:
     89a:	df 92       	push	r13
     89c:	ef 92       	push	r14
     89e:	ff 92       	push	r15
     8a0:	0f 93       	push	r16
     8a2:	1f 93       	push	r17
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
     8a8:	cd b7       	in	r28, 0x3d	; 61
     8aa:	de b7       	in	r29, 0x3e	; 62
     8ac:	ec 97       	sbiw	r28, 0x3c	; 60
     8ae:	0f b6       	in	r0, 0x3f	; 63
     8b0:	f8 94       	cli
     8b2:	de bf       	out	0x3e, r29	; 62
     8b4:	0f be       	out	0x3f, r0	; 63
     8b6:	cd bf       	out	0x3d, r28	; 61
     8b8:	d8 2e       	mov	r13, r24
     8ba:	16 2f       	mov	r17, r22
     8bc:	07 2f       	mov	r16, r23
     8be:	f4 2e       	mov	r15, r20
     8c0:	e5 2e       	mov	r14, r21
     8c2:	fe 01       	movw	r30, r28
     8c4:	31 96       	adiw	r30, 0x01	; 1
     8c6:	8c e3       	ldi	r24, 0x3C	; 60
     8c8:	df 01       	movw	r26, r30
     8ca:	1d 92       	st	X+, r1
     8cc:	8a 95       	dec	r24
     8ce:	e9 f7       	brne	.-6      	; 0x8ca <ESP8266_Start+0x30>
     8d0:	68 ed       	ldi	r22, 0xD8	; 216
     8d2:	72 e0       	ldi	r23, 0x02	; 2
     8d4:	81 ee       	ldi	r24, 0xE1	; 225
     8d6:	92 e0       	ldi	r25, 0x02	; 2
     8d8:	98 de       	rcall	.-720    	; 0x60a <SendATandExpectResponse>
     8da:	88 23       	and	r24, r24
     8dc:	99 f0       	breq	.+38     	; 0x904 <ESP8266_Start+0x6a>
     8de:	ef 92       	push	r14
     8e0:	ff 92       	push	r15
     8e2:	0f 93       	push	r16
     8e4:	1f 93       	push	r17
     8e6:	8c ee       	ldi	r24, 0xEC	; 236
     8e8:	92 e0       	ldi	r25, 0x02	; 2
     8ea:	9f 93       	push	r25
     8ec:	8f 93       	push	r24
     8ee:	ce 01       	movw	r24, r28
     8f0:	01 96       	adiw	r24, 0x01	; 1
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	4b d6       	rcall	.+3222   	; 0x158e <sprintf>
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	f8 94       	cli
     8fc:	de bf       	out	0x3e, r29	; 62
     8fe:	0f be       	out	0x3f, r0	; 63
     900:	cd bf       	out	0x3d, r28	; 61
     902:	14 c0       	rjmp	.+40     	; 0x92c <ESP8266_Start+0x92>
     904:	ef 92       	push	r14
     906:	ff 92       	push	r15
     908:	0f 93       	push	r16
     90a:	1f 93       	push	r17
     90c:	1f 92       	push	r1
     90e:	df 92       	push	r13
     910:	86 e0       	ldi	r24, 0x06	; 6
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	ce 01       	movw	r24, r28
     91a:	01 96       	adiw	r24, 0x01	; 1
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	36 d6       	rcall	.+3180   	; 0x158e <sprintf>
     922:	0f b6       	in	r0, 0x3f	; 63
     924:	f8 94       	cli
     926:	de bf       	out	0x3e, r29	; 62
     928:	0f be       	out	0x3f, r0	; 63
     92a:	cd bf       	out	0x3d, r28	; 61
     92c:	65 e2       	ldi	r22, 0x25	; 37
     92e:	73 e0       	ldi	r23, 0x03	; 3
     930:	ce 01       	movw	r24, r28
     932:	01 96       	adiw	r24, 0x01	; 1
     934:	6a de       	rcall	.-812    	; 0x60a <SendATandExpectResponse>
     936:	81 11       	cpse	r24, r1
     938:	06 c0       	rjmp	.+12     	; 0x946 <ESP8266_Start+0xac>
     93a:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     93e:	82 30       	cpi	r24, 0x02	; 2
     940:	21 f0       	breq	.+8      	; 0x94a <ESP8266_Start+0xb0>
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	03 c0       	rjmp	.+6      	; 0x94c <ESP8266_Start+0xb2>
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	01 c0       	rjmp	.+2      	; 0x94c <ESP8266_Start+0xb2>
     94a:	82 e0       	ldi	r24, 0x02	; 2
     94c:	ec 96       	adiw	r28, 0x3c	; 60
     94e:	0f b6       	in	r0, 0x3f	; 63
     950:	f8 94       	cli
     952:	de bf       	out	0x3e, r29	; 62
     954:	0f be       	out	0x3f, r0	; 63
     956:	cd bf       	out	0x3d, r28	; 61
     958:	df 91       	pop	r29
     95a:	cf 91       	pop	r28
     95c:	1f 91       	pop	r17
     95e:	0f 91       	pop	r16
     960:	ff 90       	pop	r15
     962:	ef 90       	pop	r14
     964:	df 90       	pop	r13
     966:	08 95       	ret

00000968 <ESP8266_Send>:
     968:	ef 92       	push	r14
     96a:	ff 92       	push	r15
     96c:	0f 93       	push	r16
     96e:	1f 93       	push	r17
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	64 97       	sbiw	r28, 0x14	; 20
     97a:	0f b6       	in	r0, 0x3f	; 63
     97c:	f8 94       	cli
     97e:	de bf       	out	0x3e, r29	; 62
     980:	0f be       	out	0x3f, r0	; 63
     982:	cd bf       	out	0x3d, r28	; 61
     984:	8c 01       	movw	r16, r24
     986:	ce 01       	movw	r24, r28
     988:	01 96       	adiw	r24, 0x01	; 1
     98a:	7c 01       	movw	r14, r24
     98c:	84 e1       	ldi	r24, 0x14	; 20
     98e:	f7 01       	movw	r30, r14
     990:	11 92       	st	Z+, r1
     992:	8a 95       	dec	r24
     994:	e9 f7       	brne	.-6      	; 0x990 <ESP8266_Send+0x28>
     996:	f8 01       	movw	r30, r16
     998:	01 90       	ld	r0, Z+
     99a:	00 20       	and	r0, r0
     99c:	e9 f7       	brne	.-6      	; 0x998 <ESP8266_Send+0x30>
     99e:	cf 01       	movw	r24, r30
     9a0:	80 1b       	sub	r24, r16
     9a2:	91 0b       	sbc	r25, r17
     9a4:	01 96       	adiw	r24, 0x01	; 1
     9a6:	9f 93       	push	r25
     9a8:	8f 93       	push	r24
     9aa:	8f e2       	ldi	r24, 0x2F	; 47
     9ac:	93 e0       	ldi	r25, 0x03	; 3
     9ae:	9f 93       	push	r25
     9b0:	8f 93       	push	r24
     9b2:	ff 92       	push	r15
     9b4:	ef 92       	push	r14
     9b6:	eb d5       	rcall	.+3030   	; 0x158e <sprintf>
     9b8:	1c 8a       	std	Y+20, r1	; 0x14
     9ba:	6d e3       	ldi	r22, 0x3D	; 61
     9bc:	73 e0       	ldi	r23, 0x03	; 3
     9be:	c7 01       	movw	r24, r14
     9c0:	24 de       	rcall	.-952    	; 0x60a <SendATandExpectResponse>
     9c2:	65 e4       	ldi	r22, 0x45	; 69
     9c4:	73 e0       	ldi	r23, 0x03	; 3
     9c6:	c8 01       	movw	r24, r16
     9c8:	20 de       	rcall	.-960    	; 0x60a <SendATandExpectResponse>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	0f 90       	pop	r0
     9d4:	0f 90       	pop	r0
     9d6:	81 11       	cpse	r24, r1
     9d8:	06 c0       	rjmp	.+12     	; 0x9e6 <ESP8266_Send+0x7e>
     9da:	80 91 90 04 	lds	r24, 0x0490	; 0x800490 <Response_Status>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	21 f0       	breq	.+8      	; 0x9ea <ESP8266_Send+0x82>
     9e2:	85 e0       	ldi	r24, 0x05	; 5
     9e4:	03 c0       	rjmp	.+6      	; 0x9ec <ESP8266_Send+0x84>
     9e6:	81 e0       	ldi	r24, 0x01	; 1
     9e8:	01 c0       	rjmp	.+2      	; 0x9ec <ESP8266_Send+0x84>
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	64 96       	adiw	r28, 0x14	; 20
     9ee:	0f b6       	in	r0, 0x3f	; 63
     9f0:	f8 94       	cli
     9f2:	de bf       	out	0x3e, r29	; 62
     9f4:	0f be       	out	0x3f, r0	; 63
     9f6:	cd bf       	out	0x3d, r28	; 61
     9f8:	df 91       	pop	r29
     9fa:	cf 91       	pop	r28
     9fc:	1f 91       	pop	r17
     9fe:	0f 91       	pop	r16
     a00:	ff 90       	pop	r15
     a02:	ef 90       	pop	r14
     a04:	08 95       	ret

00000a06 <__vector_36>:

ISR (USART1_RX_vect)									// Changed from "USART_RXC_vect"
{
     a06:	1f 92       	push	r1
     a08:	0f 92       	push	r0
     a0a:	0f b6       	in	r0, 0x3f	; 63
     a0c:	0f 92       	push	r0
     a0e:	11 24       	eor	r1, r1
     a10:	0b b6       	in	r0, 0x3b	; 59
     a12:	0f 92       	push	r0
     a14:	2f 93       	push	r18
     a16:	8f 93       	push	r24
     a18:	9f 93       	push	r25
     a1a:	ef 93       	push	r30
     a1c:	ff 93       	push	r31
	uint8_t oldsrg = SREG;
     a1e:	2f b7       	in	r18, 0x3f	; 63
	cli();
     a20:	f8 94       	cli
	RESPONSE_BUFFER[Counter] = UDR1;					// Was UDR
     a22:	e0 91 ee 03 	lds	r30, 0x03EE	; 0x8003ee <Counter>
     a26:	f0 91 ef 03 	lds	r31, 0x03EF	; 0x8003ef <Counter+0x1>
     a2a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
     a2e:	e0 51       	subi	r30, 0x10	; 16
     a30:	fc 4f       	sbci	r31, 0xFC	; 252
     a32:	80 83       	st	Z, r24
	Counter++;
     a34:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <Counter>
     a38:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <Counter+0x1>
     a3c:	01 96       	adiw	r24, 0x01	; 1
     a3e:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <Counter+0x1>
     a42:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <Counter>
	if(Counter == DEFAULT_BUFFER_SIZE){
     a46:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <Counter>
     a4a:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <Counter+0x1>
     a4e:	80 3a       	cpi	r24, 0xA0	; 160
     a50:	91 05       	cpc	r25, r1
     a52:	41 f4       	brne	.+16     	; 0xa64 <__vector_36+0x5e>
		Counter = 0; pointer = 0;
     a54:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <Counter+0x1>
     a58:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <Counter>
     a5c:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <pointer+0x1>
     a60:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <pointer>
	}
	SREG = oldsrg;
     a64:	2f bf       	out	0x3f, r18	; 63
}
     a66:	ff 91       	pop	r31
     a68:	ef 91       	pop	r30
     a6a:	9f 91       	pop	r25
     a6c:	8f 91       	pop	r24
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0b be       	out	0x3b, r0	; 59
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <Temperatur_choices>:
	
}

void Temperatur_choices(void)
{
	Pre_display();
     a7e:	0a d5       	rcall	.+2580   	; 0x1494 <Pre_display>

	lcd_puts("Auto update:");
     a80:	81 e5       	ldi	r24, 0x51	; 81
     a82:	93 e0       	ldi	r25, 0x03	; 3
     a84:	b9 d4       	rcall	.+2418   	; 0x13f8 <lcd_puts>
	lcd_gotoxy(13,0);
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	8d e0       	ldi	r24, 0x0D	; 13
     a8a:	99 d4       	rcall	.+2354   	; 0x13be <lcd_gotoxy>
	lcd_puts("1");
     a8c:	8a e8       	ldi	r24, 0x8A	; 138
     a8e:	92 e0       	ldi	r25, 0x02	; 2
     a90:	b3 d4       	rcall	.+2406   	; 0x13f8 <lcd_puts>
	
	lcd_gotoxy(0,1);
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	93 d4       	rcall	.+2342   	; 0x13be <lcd_gotoxy>
	
	lcd_puts("Read Once:");
     a98:	8e e5       	ldi	r24, 0x5E	; 94
     a9a:	93 e0       	ldi	r25, 0x03	; 3
     a9c:	ad d4       	rcall	.+2394   	; 0x13f8 <lcd_puts>
	lcd_gotoxy(13, 1);
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	8d e0       	ldi	r24, 0x0D	; 13
     aa2:	8d d4       	rcall	.+2330   	; 0x13be <lcd_gotoxy>
	lcd_puts("2");
     aa4:	83 e9       	ldi	r24, 0x93	; 147
     aa6:	92 e0       	ldi	r25, 0x02	; 2
     aa8:	a7 d4       	rcall	.+2382   	; 0x13f8 <lcd_puts>
     aaa:	61 e0       	ldi	r22, 0x01	; 1
	
	lcd_gotoxy(15, 1);
     aac:	8f e0       	ldi	r24, 0x0F	; 15
     aae:	87 c4       	rjmp	.+2318   	; 0x13be <lcd_gotoxy>
     ab0:	08 95       	ret

00000ab2 <PushToAPI>:
     ab2:	cf 92       	push	r12
     ab4:	df 92       	push	r13
		}
	}
}

void PushToAPI(int temperatur, int humidity)
{
     ab6:	ef 92       	push	r14
     ab8:	ff 92       	push	r15
     aba:	0f 93       	push	r16
     abc:	1f 93       	push	r17
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	c6 59       	subi	r28, 0x96	; 150
     ac8:	d1 09       	sbc	r29, r1
     aca:	0f b6       	in	r0, 0x3f	; 63
     acc:	f8 94       	cli
     ace:	de bf       	out	0x3e, r29	; 62
     ad0:	0f be       	out	0x3f, r0	; 63
     ad2:	cd bf       	out	0x3d, r28	; 61
     ad4:	f8 2e       	mov	r15, r24
     ad6:	e9 2e       	mov	r14, r25
     ad8:	d6 2e       	mov	r13, r22
     ada:	c7 2e       	mov	r12, r23
	char _buffer[150];
	uint8_t Connect_Status;
	while(!ESP8266_Begin());
     adc:	0f de       	rcall	.-994    	; 0x6fc <ESP8266_Begin>
     ade:	88 23       	and	r24, r24
     ae0:	e9 f3       	breq	.-6      	; 0xadc <PushToAPI+0x2a>
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);					/* 3 = Both (AP and STA) */
     ae2:	83 e0       	ldi	r24, 0x03	; 3
     ae4:	1f de       	rcall	.-962    	; 0x724 <ESP8266_WIFIMode>
	ESP8266_ConnectionMode(SINGLE);									/* 0 = Single; 1 = Multi */
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	d6 dd       	rcall	.-1108   	; 0x696 <ESP8266_ConnectionMode>
	ESP8266_ApplicationMode(NORMAL);								/* 0 = Normal Mode; 1 = Transperant Mode */
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	a1 dd       	rcall	.-1214   	; 0x630 <ESP8266_ApplicationMode>
     aee:	05 c0       	rjmp	.+10     	; 0xafa <PushToAPI+0x48>
	while(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)			// If not connected to WIFI and API, create a connection
     af0:	69 e6       	ldi	r22, 0x69	; 105
	{
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
     af2:	73 e0       	ldi	r23, 0x03	; 3
     af4:	83 e7       	ldi	r24, 0x73	; 115
     af6:	93 e0       	ldi	r25, 0x03	; 3
     af8:	48 de       	rcall	.-880    	; 0x78a <ESP8266_JoinAccessPoint>
	uint8_t Connect_Status;
	while(!ESP8266_Begin());
	ESP8266_WIFIMode(BOTH_STATION_AND_ACCESPOINT);					/* 3 = Both (AP and STA) */
	ESP8266_ConnectionMode(SINGLE);									/* 0 = Single; 1 = Multi */
	ESP8266_ApplicationMode(NORMAL);								/* 0 = Normal Mode; 1 = Transperant Mode */
	while(ESP8266_connected() == ESP8266_NOT_CONNECTED_TO_AP)			// If not connected to WIFI and API, create a connection
     afa:	a4 de       	rcall	.-696    	; 0x844 <ESP8266_connected>
     afc:	83 30       	cpi	r24, 0x03	; 3
     afe:	c1 f3       	breq	.-16     	; 0xaf0 <PushToAPI+0x3e>
	{
		ESP8266_JoinAccessPoint(SSID, PASSWORD);
	}
	ESP8266_Start(0, DOMAIN, PORT);								// Connect to API
     b00:	44 e8       	ldi	r20, 0x84	; 132
     b02:	53 e0       	ldi	r21, 0x03	; 3
     b04:	67 e8       	ldi	r22, 0x87	; 135
     b06:	73 e0       	ldi	r23, 0x03	; 3
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	c7 de       	rcall	.-626    	; 0x89a <ESP8266_Start>
     b0c:	8e 01       	movw	r16, r28

	#ifdef SEND_DEMO												// Demo for sending data to an API
	memset(_buffer, 0, 150);
     b0e:	0f 5f       	subi	r16, 0xFF	; 255
     b10:	1f 4f       	sbci	r17, 0xFF	; 255
     b12:	86 e9       	ldi	r24, 0x96	; 150
     b14:	f8 01       	movw	r30, r16
     b16:	11 92       	st	Z+, r1
     b18:	8a 95       	dec	r24
     b1a:	e9 f7       	brne	.-6      	; 0xb16 <PushToAPI+0x64>
     b1c:	cf 92       	push	r12
	// Sends out the url to the API with the Temp and Hum data that was read from the DHT11
	sprintf(_buffer, "GET /update?api_key=%s&field7=%i&field8=%i", API_WRITE_KEY, temperatur, humidity);
     b1e:	df 92       	push	r13
     b20:	ef 92       	push	r14
     b22:	ff 92       	push	r15
     b24:	8a e9       	ldi	r24, 0x9A	; 154
     b26:	93 e0       	ldi	r25, 0x03	; 3
     b28:	9f 93       	push	r25
     b2a:	8f 93       	push	r24
     b2c:	8b ea       	ldi	r24, 0xAB	; 171
     b2e:	93 e0       	ldi	r25, 0x03	; 3
     b30:	9f 93       	push	r25
     b32:	8f 93       	push	r24
     b34:	1f 93       	push	r17
     b36:	0f 93       	push	r16
     b38:	2a d5       	rcall	.+2644   	; 0x158e <sprintf>
	//printf(_buffer);
	ESP8266_Send(_buffer);
     b3a:	c8 01       	movw	r24, r16
     b3c:	15 df       	rcall	.-470    	; 0x968 <ESP8266_Send>
     b3e:	ff eb       	ldi	r31, 0xBF	; 191
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     b40:	26 ec       	ldi	r18, 0xC6	; 198
     b42:	8d e2       	ldi	r24, 0x2D	; 45
     b44:	f1 50       	subi	r31, 0x01	; 1
     b46:	20 40       	sbci	r18, 0x00	; 0
     b48:	80 40       	sbci	r24, 0x00	; 0
     b4a:	e1 f7       	brne	.-8      	; 0xb44 <PushToAPI+0x92>
     b4c:	00 c0       	rjmp	.+0      	; 0xb4e <PushToAPI+0x9c>
     b4e:	00 00       	nop
     b50:	0f b6       	in	r0, 0x3f	; 63
	_delay_ms(15000);												/* Thingspeak server delay */
	#endif
	
	//lcd_puts("Data sendt");
}
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	ca 56       	subi	r28, 0x6A	; 106
     b5c:	df 4f       	sbci	r29, 0xFF	; 255
     b5e:	0f b6       	in	r0, 0x3f	; 63
     b60:	f8 94       	cli
     b62:	de bf       	out	0x3e, r29	; 62
     b64:	0f be       	out	0x3f, r0	; 63
     b66:	cd bf       	out	0x3d, r28	; 61
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	1f 91       	pop	r17
     b6e:	0f 91       	pop	r16
     b70:	ff 90       	pop	r15
     b72:	ef 90       	pop	r14
     b74:	df 90       	pop	r13
     b76:	cf 90       	pop	r12
     b78:	08 95       	ret

00000b7a <Temperatur_display>:
     b7a:	ef 92       	push	r14

void Temperatur_display(int temperatur, int humidity)
{
     b7c:	ff 92       	push	r15
     b7e:	0f 93       	push	r16
     b80:	1f 93       	push	r17
     b82:	cf 93       	push	r28
     b84:	df 93       	push	r29
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
     b8a:	28 97       	sbiw	r28, 0x08	; 8
     b8c:	0f b6       	in	r0, 0x3f	; 63
     b8e:	f8 94       	cli
     b90:	de bf       	out	0x3e, r29	; 62
     b92:	0f be       	out	0x3f, r0	; 63
     b94:	cd bf       	out	0x3d, r28	; 61
     b96:	18 2f       	mov	r17, r24
     b98:	09 2f       	mov	r16, r25
     b9a:	f6 2e       	mov	r15, r22
     b9c:	e7 2e       	mov	r14, r23
	char buffer[8];
	Pre_display();
     b9e:	7a d4       	rcall	.+2292   	; 0x1494 <Pre_display>
	
	sprintf(buffer, "Temp: %d", temperatur);
     ba0:	0f 93       	push	r16
     ba2:	1f 93       	push	r17
     ba4:	86 ed       	ldi	r24, 0xD6	; 214
     ba6:	93 e0       	ldi	r25, 0x03	; 3
     ba8:	9f 93       	push	r25
     baa:	8f 93       	push	r24
     bac:	8e 01       	movw	r16, r28
     bae:	0f 5f       	subi	r16, 0xFF	; 255
     bb0:	1f 4f       	sbci	r17, 0xFF	; 255
     bb2:	1f 93       	push	r17
     bb4:	0f 93       	push	r16
     bb6:	eb d4       	rcall	.+2518   	; 0x158e <sprintf>

	lcd_puts(buffer);
     bb8:	c8 01       	movw	r24, r16
     bba:	1e d4       	rcall	.+2108   	; 0x13f8 <lcd_puts>
	lcd_gotoxy(0,1);
     bbc:	61 e0       	ldi	r22, 0x01	; 1
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	fe d3       	rcall	.+2044   	; 0x13be <lcd_gotoxy>
     bc2:	ef 92       	push	r14
	
	sprintf(buffer, "Hum : %d", humidity);
     bc4:	ff 92       	push	r15
     bc6:	8f ed       	ldi	r24, 0xDF	; 223
     bc8:	93 e0       	ldi	r25, 0x03	; 3
     bca:	9f 93       	push	r25
     bcc:	8f 93       	push	r24
     bce:	1f 93       	push	r17
     bd0:	0f 93       	push	r16
     bd2:	dd d4       	rcall	.+2490   	; 0x158e <sprintf>
	lcd_puts(buffer);
     bd4:	c8 01       	movw	r24, r16
     bd6:	10 d4       	rcall	.+2080   	; 0x13f8 <lcd_puts>
     bd8:	0f b6       	in	r0, 0x3f	; 63
     bda:	f8 94       	cli
     bdc:	de bf       	out	0x3e, r29	; 62
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	cd bf       	out	0x3d, r28	; 61
     be2:	28 96       	adiw	r28, 0x08	; 8
     be4:	0f b6       	in	r0, 0x3f	; 63
     be6:	f8 94       	cli
     be8:	de bf       	out	0x3e, r29	; 62
     bea:	0f be       	out	0x3f, r0	; 63
     bec:	cd bf       	out	0x3d, r28	; 61
     bee:	df 91       	pop	r29
     bf0:	cf 91       	pop	r28
     bf2:	1f 91       	pop	r17
     bf4:	0f 91       	pop	r16
     bf6:	ff 90       	pop	r15
     bf8:	ef 90       	pop	r14
     bfa:	08 95       	ret

00000bfc <Temperatur_ReadOnce>:
     bfc:	ef 92       	push	r14
		break;
	}
}

void Temperatur_ReadOnce(int loop)
{
     bfe:	ff 92       	push	r15
     c00:	0f 93       	push	r16
     c02:	1f 93       	push	r17
     c04:	cf 93       	push	r28
     c06:	df 93       	push	r29
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
     c0c:	c0 55       	subi	r28, 0x50	; 80
     c0e:	d1 09       	sbc	r29, r1
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
	unsigned int column = 1;
	unsigned int row = 90;
	
	
	DHT_WakeUp();
     c1a:	2b db       	rcall	.-2474   	; 0x272 <DHT_WakeUp>
	int array[5][8];
	if (DHT_Response())
     c1c:	38 db       	rcall	.-2448   	; 0x28e <DHT_Response>
     c1e:	89 2b       	or	r24, r25
     c20:	09 f1       	breq	.+66     	; 0xc64 <Temperatur_ReadOnce+0x68>
     c22:	ce 01       	movw	r24, r28
	{
		DHT_Decode_Data(array);
     c24:	01 96       	adiw	r24, 0x01	; 1
     c26:	60 db       	rcall	.-2368   	; 0x2e8 <DHT_Decode_Data>
     c28:	63 e0       	ldi	r22, 0x03	; 3
		
		int temp = ConvertToDecimal(array, 3);
     c2a:	70 e0       	ldi	r23, 0x00	; 0
     c2c:	ce 01       	movw	r24, r28
     c2e:	01 96       	adiw	r24, 0x01	; 1
     c30:	93 db       	rcall	.-2266   	; 0x358 <ConvertToDecimal>
     c32:	8c 01       	movw	r16, r24
     c34:	61 e0       	ldi	r22, 0x01	; 1
		int hum = ConvertToDecimal(array, 1);
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	ce 01       	movw	r24, r28
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	8d db       	rcall	.-2278   	; 0x358 <ConvertToDecimal>
     c3e:	7c 01       	movw	r14, r24
		
		Temperatur_display(temp, hum);
     c40:	bc 01       	movw	r22, r24
     c42:	c8 01       	movw	r24, r16
     c44:	9a df       	rcall	.-204    	; 0xb7a <Temperatur_display>
		
		PushToAPI(temp, hum);
     c46:	b7 01       	movw	r22, r14
     c48:	c8 01       	movw	r24, r16
	}
}

void Temperatur_ReadOnce(int loop)
{
	unsigned int column = 1;
     c4a:	33 df       	rcall	.-410    	; 0xab2 <PushToAPI>
     c4c:	01 e0       	ldi	r16, 0x01	; 1
		Temperatur_display(temp, hum);
		
		PushToAPI(temp, hum);
		while(1)
		{
			column = ColumnScan(column);
     c4e:	10 e0       	ldi	r17, 0x00	; 0
     c50:	c8 01       	movw	r24, r16
     c52:	a6 d2       	rcall	.+1356   	; 0x11a0 <ColumnScan>
			row = ReadRow();
     c54:	8c 01       	movw	r16, r24
     c56:	da d2       	rcall	.+1460   	; 0x120c <ReadRow>
			
			if (column + row == 11)
     c58:	80 0f       	add	r24, r16
     c5a:	91 1f       	adc	r25, r17
     c5c:	0b 97       	sbiw	r24, 0x0b	; 11
     c5e:	c1 f7       	brne	.-16     	; 0xc50 <Temperatur_ReadOnce+0x54>
			{
				main();
     c60:	fc da       	rcall	.-2568   	; 0x25a <main>
     c62:	f6 cf       	rjmp	.-20     	; 0xc50 <Temperatur_ReadOnce+0x54>
     c64:	c0 5b       	subi	r28, 0xB0	; 176
			}
			
		}
	}
}
     c66:	df 4f       	sbci	r29, 0xFF	; 255
     c68:	0f b6       	in	r0, 0x3f	; 63
     c6a:	f8 94       	cli
     c6c:	de bf       	out	0x3e, r29	; 62
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	cd bf       	out	0x3d, r28	; 61
     c72:	df 91       	pop	r29
     c74:	cf 91       	pop	r28
     c76:	1f 91       	pop	r17
     c78:	0f 91       	pop	r16
     c7a:	ff 90       	pop	r15
     c7c:	ef 90       	pop	r14
     c7e:	08 95       	ret

00000c80 <Temperatur_decoder>:
     c80:	86 0f       	add	r24, r22

void Temperatur_decoder(int column, int row)
{
	unsigned int choose = column + row;
	
	switch (choose)
     c82:	97 1f       	adc	r25, r23
     c84:	89 32       	cpi	r24, 0x29	; 41
     c86:	91 05       	cpc	r25, r1
     c88:	19 f0       	breq	.+6      	; 0xc90 <Temperatur_decoder+0x10>
     c8a:	8a 97       	sbiw	r24, 0x2a	; 42
     c8c:	29 f0       	breq	.+10     	; 0xc98 <Temperatur_decoder+0x18>
     c8e:	08 95       	ret
	{
		case 41:
		//Temp_auto();
		//Temperatur_AutoUpdate();
		Temperatur_ReadOnce(1);
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	b3 cf       	rjmp	.-154    	; 0xbfc <Temperatur_ReadOnce>
		break;
     c96:	08 95       	ret
		
		case 42:
		//Temp_user();
		Temperatur_ReadOnce(0);
     c98:	80 e0       	ldi	r24, 0x00	; 0
     c9a:	90 e0       	ldi	r25, 0x00	; 0
     c9c:	af cf       	rjmp	.-162    	; 0xbfc <Temperatur_ReadOnce>
     c9e:	08 95       	ret

00000ca0 <Temperatur>:
     ca0:	2f e3       	ldi	r18, 0x3F	; 63
     ca2:	8d e0       	ldi	r24, 0x0D	; 13
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	21 50       	subi	r18, 0x01	; 1
     ca8:	80 40       	sbci	r24, 0x00	; 0
     caa:	90 40       	sbci	r25, 0x00	; 0
     cac:	e1 f7       	brne	.-8      	; 0xca6 <Temperatur+0x6>
     cae:	00 c0       	rjmp	.+0      	; 0xcb0 <Temperatur+0x10>
     cb0:	00 00       	nop
	_delay_ms(1000);
	
	unsigned int column = 1;
	unsigned int row = 90;
	
	Temperatur_choices();
     cb2:	e5 de       	rcall	.-566    	; 0xa7e <Temperatur_choices>

void Temperatur(void)
{
	_delay_ms(1000);
	
	unsigned int column = 1;
     cb4:	01 e0       	ldi	r16, 0x01	; 1
     cb6:	10 e0       	ldi	r17, 0x00	; 0
	Temperatur_choices();
	
	while (1)
	{
		
		column = ColumnScan(column);
     cb8:	c8 01       	movw	r24, r16
     cba:	72 d2       	rcall	.+1252   	; 0x11a0 <ColumnScan>
		row = ReadRow();
     cbc:	8c 01       	movw	r16, r24
     cbe:	a6 d2       	rcall	.+1356   	; 0x120c <ReadRow>
		
		Temperatur_decoder(column, row);
     cc0:	ec 01       	movw	r28, r24
     cc2:	bc 01       	movw	r22, r24
     cc4:	c8 01       	movw	r24, r16
     cc6:	dc df       	rcall	.-72     	; 0xc80 <Temperatur_decoder>
		
		if (column + row == 11)
     cc8:	c0 0f       	add	r28, r16
     cca:	d1 1f       	adc	r29, r17
     ccc:	2b 97       	sbiw	r28, 0x0b	; 11
		{
			main();
     cce:	09 f4       	brne	.+2      	; 0xcd2 <Temperatur+0x32>
     cd0:	c4 da       	rcall	.-2680   	; 0x25a <main>
     cd2:	89 e6       	ldi	r24, 0x69	; 105
     cd4:	98 e1       	ldi	r25, 0x18	; 24
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	f1 f7       	brne	.-4      	; 0xcd6 <Temperatur+0x36>
     cda:	00 c0       	rjmp	.+0      	; 0xcdc <Temperatur+0x3c>
     cdc:	00 00       	nop
     cde:	ec cf       	rjmp	.-40     	; 0xcb8 <Temperatur+0x18>

00000ce0 <__subsf3>:
     ce0:	50 58       	subi	r21, 0x80	; 128

00000ce2 <__addsf3>:
     ce2:	bb 27       	eor	r27, r27
     ce4:	aa 27       	eor	r26, r26
     ce6:	0e d0       	rcall	.+28     	; 0xd04 <__addsf3x>
     ce8:	4d c1       	rjmp	.+666    	; 0xf84 <__fp_round>
     cea:	3e d1       	rcall	.+636    	; 0xf68 <__fp_pscA>
     cec:	30 f0       	brcs	.+12     	; 0xcfa <__addsf3+0x18>
     cee:	43 d1       	rcall	.+646    	; 0xf76 <__fp_pscB>
     cf0:	20 f0       	brcs	.+8      	; 0xcfa <__addsf3+0x18>
     cf2:	31 f4       	brne	.+12     	; 0xd00 <__addsf3+0x1e>
     cf4:	9f 3f       	cpi	r25, 0xFF	; 255
     cf6:	11 f4       	brne	.+4      	; 0xcfc <__addsf3+0x1a>
     cf8:	1e f4       	brtc	.+6      	; 0xd00 <__addsf3+0x1e>
     cfa:	33 c1       	rjmp	.+614    	; 0xf62 <__fp_nan>
     cfc:	0e f4       	brtc	.+2      	; 0xd00 <__addsf3+0x1e>
     cfe:	e0 95       	com	r30
     d00:	e7 fb       	bst	r30, 7
     d02:	29 c1       	rjmp	.+594    	; 0xf56 <__fp_inf>

00000d04 <__addsf3x>:
     d04:	e9 2f       	mov	r30, r25
     d06:	4f d1       	rcall	.+670    	; 0xfa6 <__fp_split3>
     d08:	80 f3       	brcs	.-32     	; 0xcea <__addsf3+0x8>
     d0a:	ba 17       	cp	r27, r26
     d0c:	62 07       	cpc	r22, r18
     d0e:	73 07       	cpc	r23, r19
     d10:	84 07       	cpc	r24, r20
     d12:	95 07       	cpc	r25, r21
     d14:	18 f0       	brcs	.+6      	; 0xd1c <__addsf3x+0x18>
     d16:	71 f4       	brne	.+28     	; 0xd34 <__addsf3x+0x30>
     d18:	9e f5       	brtc	.+102    	; 0xd80 <__addsf3x+0x7c>
     d1a:	67 c1       	rjmp	.+718    	; 0xfea <__fp_zero>
     d1c:	0e f4       	brtc	.+2      	; 0xd20 <__addsf3x+0x1c>
     d1e:	e0 95       	com	r30
     d20:	0b 2e       	mov	r0, r27
     d22:	ba 2f       	mov	r27, r26
     d24:	a0 2d       	mov	r26, r0
     d26:	0b 01       	movw	r0, r22
     d28:	b9 01       	movw	r22, r18
     d2a:	90 01       	movw	r18, r0
     d2c:	0c 01       	movw	r0, r24
     d2e:	ca 01       	movw	r24, r20
     d30:	a0 01       	movw	r20, r0
     d32:	11 24       	eor	r1, r1
     d34:	ff 27       	eor	r31, r31
     d36:	59 1b       	sub	r21, r25
     d38:	99 f0       	breq	.+38     	; 0xd60 <__addsf3x+0x5c>
     d3a:	59 3f       	cpi	r21, 0xF9	; 249
     d3c:	50 f4       	brcc	.+20     	; 0xd52 <__addsf3x+0x4e>
     d3e:	50 3e       	cpi	r21, 0xE0	; 224
     d40:	68 f1       	brcs	.+90     	; 0xd9c <__addsf3x+0x98>
     d42:	1a 16       	cp	r1, r26
     d44:	f0 40       	sbci	r31, 0x00	; 0
     d46:	a2 2f       	mov	r26, r18
     d48:	23 2f       	mov	r18, r19
     d4a:	34 2f       	mov	r19, r20
     d4c:	44 27       	eor	r20, r20
     d4e:	58 5f       	subi	r21, 0xF8	; 248
     d50:	f3 cf       	rjmp	.-26     	; 0xd38 <__addsf3x+0x34>
     d52:	46 95       	lsr	r20
     d54:	37 95       	ror	r19
     d56:	27 95       	ror	r18
     d58:	a7 95       	ror	r26
     d5a:	f0 40       	sbci	r31, 0x00	; 0
     d5c:	53 95       	inc	r21
     d5e:	c9 f7       	brne	.-14     	; 0xd52 <__addsf3x+0x4e>
     d60:	7e f4       	brtc	.+30     	; 0xd80 <__addsf3x+0x7c>
     d62:	1f 16       	cp	r1, r31
     d64:	ba 0b       	sbc	r27, r26
     d66:	62 0b       	sbc	r22, r18
     d68:	73 0b       	sbc	r23, r19
     d6a:	84 0b       	sbc	r24, r20
     d6c:	ba f0       	brmi	.+46     	; 0xd9c <__addsf3x+0x98>
     d6e:	91 50       	subi	r25, 0x01	; 1
     d70:	a1 f0       	breq	.+40     	; 0xd9a <__addsf3x+0x96>
     d72:	ff 0f       	add	r31, r31
     d74:	bb 1f       	adc	r27, r27
     d76:	66 1f       	adc	r22, r22
     d78:	77 1f       	adc	r23, r23
     d7a:	88 1f       	adc	r24, r24
     d7c:	c2 f7       	brpl	.-16     	; 0xd6e <__addsf3x+0x6a>
     d7e:	0e c0       	rjmp	.+28     	; 0xd9c <__addsf3x+0x98>
     d80:	ba 0f       	add	r27, r26
     d82:	62 1f       	adc	r22, r18
     d84:	73 1f       	adc	r23, r19
     d86:	84 1f       	adc	r24, r20
     d88:	48 f4       	brcc	.+18     	; 0xd9c <__addsf3x+0x98>
     d8a:	87 95       	ror	r24
     d8c:	77 95       	ror	r23
     d8e:	67 95       	ror	r22
     d90:	b7 95       	ror	r27
     d92:	f7 95       	ror	r31
     d94:	9e 3f       	cpi	r25, 0xFE	; 254
     d96:	08 f0       	brcs	.+2      	; 0xd9a <__addsf3x+0x96>
     d98:	b3 cf       	rjmp	.-154    	; 0xd00 <__addsf3+0x1e>
     d9a:	93 95       	inc	r25
     d9c:	88 0f       	add	r24, r24
     d9e:	08 f0       	brcs	.+2      	; 0xda2 <__addsf3x+0x9e>
     da0:	99 27       	eor	r25, r25
     da2:	ee 0f       	add	r30, r30
     da4:	97 95       	ror	r25
     da6:	87 95       	ror	r24
     da8:	08 95       	ret

00000daa <__divsf3>:
     daa:	0c d0       	rcall	.+24     	; 0xdc4 <__divsf3x>
     dac:	eb c0       	rjmp	.+470    	; 0xf84 <__fp_round>
     dae:	e3 d0       	rcall	.+454    	; 0xf76 <__fp_pscB>
     db0:	40 f0       	brcs	.+16     	; 0xdc2 <__divsf3+0x18>
     db2:	da d0       	rcall	.+436    	; 0xf68 <__fp_pscA>
     db4:	30 f0       	brcs	.+12     	; 0xdc2 <__divsf3+0x18>
     db6:	21 f4       	brne	.+8      	; 0xdc0 <__divsf3+0x16>
     db8:	5f 3f       	cpi	r21, 0xFF	; 255
     dba:	19 f0       	breq	.+6      	; 0xdc2 <__divsf3+0x18>
     dbc:	cc c0       	rjmp	.+408    	; 0xf56 <__fp_inf>
     dbe:	51 11       	cpse	r21, r1
     dc0:	15 c1       	rjmp	.+554    	; 0xfec <__fp_szero>
     dc2:	cf c0       	rjmp	.+414    	; 0xf62 <__fp_nan>

00000dc4 <__divsf3x>:
     dc4:	f0 d0       	rcall	.+480    	; 0xfa6 <__fp_split3>
     dc6:	98 f3       	brcs	.-26     	; 0xdae <__divsf3+0x4>

00000dc8 <__divsf3_pse>:
     dc8:	99 23       	and	r25, r25
     dca:	c9 f3       	breq	.-14     	; 0xdbe <__divsf3+0x14>
     dcc:	55 23       	and	r21, r21
     dce:	b1 f3       	breq	.-20     	; 0xdbc <__divsf3+0x12>
     dd0:	95 1b       	sub	r25, r21
     dd2:	55 0b       	sbc	r21, r21
     dd4:	bb 27       	eor	r27, r27
     dd6:	aa 27       	eor	r26, r26
     dd8:	62 17       	cp	r22, r18
     dda:	73 07       	cpc	r23, r19
     ddc:	84 07       	cpc	r24, r20
     dde:	38 f0       	brcs	.+14     	; 0xdee <__divsf3_pse+0x26>
     de0:	9f 5f       	subi	r25, 0xFF	; 255
     de2:	5f 4f       	sbci	r21, 0xFF	; 255
     de4:	22 0f       	add	r18, r18
     de6:	33 1f       	adc	r19, r19
     de8:	44 1f       	adc	r20, r20
     dea:	aa 1f       	adc	r26, r26
     dec:	a9 f3       	breq	.-22     	; 0xdd8 <__divsf3_pse+0x10>
     dee:	33 d0       	rcall	.+102    	; 0xe56 <__divsf3_pse+0x8e>
     df0:	0e 2e       	mov	r0, r30
     df2:	3a f0       	brmi	.+14     	; 0xe02 <__divsf3_pse+0x3a>
     df4:	e0 e8       	ldi	r30, 0x80	; 128
     df6:	30 d0       	rcall	.+96     	; 0xe58 <__divsf3_pse+0x90>
     df8:	91 50       	subi	r25, 0x01	; 1
     dfa:	50 40       	sbci	r21, 0x00	; 0
     dfc:	e6 95       	lsr	r30
     dfe:	00 1c       	adc	r0, r0
     e00:	ca f7       	brpl	.-14     	; 0xdf4 <__divsf3_pse+0x2c>
     e02:	29 d0       	rcall	.+82     	; 0xe56 <__divsf3_pse+0x8e>
     e04:	fe 2f       	mov	r31, r30
     e06:	27 d0       	rcall	.+78     	; 0xe56 <__divsf3_pse+0x8e>
     e08:	66 0f       	add	r22, r22
     e0a:	77 1f       	adc	r23, r23
     e0c:	88 1f       	adc	r24, r24
     e0e:	bb 1f       	adc	r27, r27
     e10:	26 17       	cp	r18, r22
     e12:	37 07       	cpc	r19, r23
     e14:	48 07       	cpc	r20, r24
     e16:	ab 07       	cpc	r26, r27
     e18:	b0 e8       	ldi	r27, 0x80	; 128
     e1a:	09 f0       	breq	.+2      	; 0xe1e <__divsf3_pse+0x56>
     e1c:	bb 0b       	sbc	r27, r27
     e1e:	80 2d       	mov	r24, r0
     e20:	bf 01       	movw	r22, r30
     e22:	ff 27       	eor	r31, r31
     e24:	93 58       	subi	r25, 0x83	; 131
     e26:	5f 4f       	sbci	r21, 0xFF	; 255
     e28:	2a f0       	brmi	.+10     	; 0xe34 <__divsf3_pse+0x6c>
     e2a:	9e 3f       	cpi	r25, 0xFE	; 254
     e2c:	51 05       	cpc	r21, r1
     e2e:	68 f0       	brcs	.+26     	; 0xe4a <__divsf3_pse+0x82>
     e30:	92 c0       	rjmp	.+292    	; 0xf56 <__fp_inf>
     e32:	dc c0       	rjmp	.+440    	; 0xfec <__fp_szero>
     e34:	5f 3f       	cpi	r21, 0xFF	; 255
     e36:	ec f3       	brlt	.-6      	; 0xe32 <__divsf3_pse+0x6a>
     e38:	98 3e       	cpi	r25, 0xE8	; 232
     e3a:	dc f3       	brlt	.-10     	; 0xe32 <__divsf3_pse+0x6a>
     e3c:	86 95       	lsr	r24
     e3e:	77 95       	ror	r23
     e40:	67 95       	ror	r22
     e42:	b7 95       	ror	r27
     e44:	f7 95       	ror	r31
     e46:	9f 5f       	subi	r25, 0xFF	; 255
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__divsf3_pse+0x74>
     e4a:	88 0f       	add	r24, r24
     e4c:	91 1d       	adc	r25, r1
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	97 f9       	bld	r25, 7
     e54:	08 95       	ret
     e56:	e1 e0       	ldi	r30, 0x01	; 1
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	bb 1f       	adc	r27, r27
     e60:	62 17       	cp	r22, r18
     e62:	73 07       	cpc	r23, r19
     e64:	84 07       	cpc	r24, r20
     e66:	ba 07       	cpc	r27, r26
     e68:	20 f0       	brcs	.+8      	; 0xe72 <__divsf3_pse+0xaa>
     e6a:	62 1b       	sub	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	ba 0b       	sbc	r27, r26
     e72:	ee 1f       	adc	r30, r30
     e74:	88 f7       	brcc	.-30     	; 0xe58 <__divsf3_pse+0x90>
     e76:	e0 95       	com	r30
     e78:	08 95       	ret

00000e7a <__fixsfsi>:
     e7a:	04 d0       	rcall	.+8      	; 0xe84 <__fixunssfsi>
     e7c:	68 94       	set
     e7e:	b1 11       	cpse	r27, r1
     e80:	b5 c0       	rjmp	.+362    	; 0xfec <__fp_szero>
     e82:	08 95       	ret

00000e84 <__fixunssfsi>:
     e84:	98 d0       	rcall	.+304    	; 0xfb6 <__fp_splitA>
     e86:	88 f0       	brcs	.+34     	; 0xeaa <__fixunssfsi+0x26>
     e88:	9f 57       	subi	r25, 0x7F	; 127
     e8a:	90 f0       	brcs	.+36     	; 0xeb0 <__fixunssfsi+0x2c>
     e8c:	b9 2f       	mov	r27, r25
     e8e:	99 27       	eor	r25, r25
     e90:	b7 51       	subi	r27, 0x17	; 23
     e92:	a0 f0       	brcs	.+40     	; 0xebc <__fixunssfsi+0x38>
     e94:	d1 f0       	breq	.+52     	; 0xeca <__fixunssfsi+0x46>
     e96:	66 0f       	add	r22, r22
     e98:	77 1f       	adc	r23, r23
     e9a:	88 1f       	adc	r24, r24
     e9c:	99 1f       	adc	r25, r25
     e9e:	1a f0       	brmi	.+6      	; 0xea6 <__fixunssfsi+0x22>
     ea0:	ba 95       	dec	r27
     ea2:	c9 f7       	brne	.-14     	; 0xe96 <__fixunssfsi+0x12>
     ea4:	12 c0       	rjmp	.+36     	; 0xeca <__fixunssfsi+0x46>
     ea6:	b1 30       	cpi	r27, 0x01	; 1
     ea8:	81 f0       	breq	.+32     	; 0xeca <__fixunssfsi+0x46>
     eaa:	9f d0       	rcall	.+318    	; 0xfea <__fp_zero>
     eac:	b1 e0       	ldi	r27, 0x01	; 1
     eae:	08 95       	ret
     eb0:	9c c0       	rjmp	.+312    	; 0xfea <__fp_zero>
     eb2:	67 2f       	mov	r22, r23
     eb4:	78 2f       	mov	r23, r24
     eb6:	88 27       	eor	r24, r24
     eb8:	b8 5f       	subi	r27, 0xF8	; 248
     eba:	39 f0       	breq	.+14     	; 0xeca <__fixunssfsi+0x46>
     ebc:	b9 3f       	cpi	r27, 0xF9	; 249
     ebe:	cc f3       	brlt	.-14     	; 0xeb2 <__fixunssfsi+0x2e>
     ec0:	86 95       	lsr	r24
     ec2:	77 95       	ror	r23
     ec4:	67 95       	ror	r22
     ec6:	b3 95       	inc	r27
     ec8:	d9 f7       	brne	.-10     	; 0xec0 <__fixunssfsi+0x3c>
     eca:	3e f4       	brtc	.+14     	; 0xeda <__fixunssfsi+0x56>
     ecc:	90 95       	com	r25
     ece:	80 95       	com	r24
     ed0:	70 95       	com	r23
     ed2:	61 95       	neg	r22
     ed4:	7f 4f       	sbci	r23, 0xFF	; 255
     ed6:	8f 4f       	sbci	r24, 0xFF	; 255
     ed8:	9f 4f       	sbci	r25, 0xFF	; 255
     eda:	08 95       	ret

00000edc <__floatunsisf>:
     edc:	e8 94       	clt
     ede:	09 c0       	rjmp	.+18     	; 0xef2 <__floatsisf+0x12>

00000ee0 <__floatsisf>:
     ee0:	97 fb       	bst	r25, 7
     ee2:	3e f4       	brtc	.+14     	; 0xef2 <__floatsisf+0x12>
     ee4:	90 95       	com	r25
     ee6:	80 95       	com	r24
     ee8:	70 95       	com	r23
     eea:	61 95       	neg	r22
     eec:	7f 4f       	sbci	r23, 0xFF	; 255
     eee:	8f 4f       	sbci	r24, 0xFF	; 255
     ef0:	9f 4f       	sbci	r25, 0xFF	; 255
     ef2:	99 23       	and	r25, r25
     ef4:	a9 f0       	breq	.+42     	; 0xf20 <__floatsisf+0x40>
     ef6:	f9 2f       	mov	r31, r25
     ef8:	96 e9       	ldi	r25, 0x96	; 150
     efa:	bb 27       	eor	r27, r27
     efc:	93 95       	inc	r25
     efe:	f6 95       	lsr	r31
     f00:	87 95       	ror	r24
     f02:	77 95       	ror	r23
     f04:	67 95       	ror	r22
     f06:	b7 95       	ror	r27
     f08:	f1 11       	cpse	r31, r1
     f0a:	f8 cf       	rjmp	.-16     	; 0xefc <__floatsisf+0x1c>
     f0c:	fa f4       	brpl	.+62     	; 0xf4c <__floatsisf+0x6c>
     f0e:	bb 0f       	add	r27, r27
     f10:	11 f4       	brne	.+4      	; 0xf16 <__floatsisf+0x36>
     f12:	60 ff       	sbrs	r22, 0
     f14:	1b c0       	rjmp	.+54     	; 0xf4c <__floatsisf+0x6c>
     f16:	6f 5f       	subi	r22, 0xFF	; 255
     f18:	7f 4f       	sbci	r23, 0xFF	; 255
     f1a:	8f 4f       	sbci	r24, 0xFF	; 255
     f1c:	9f 4f       	sbci	r25, 0xFF	; 255
     f1e:	16 c0       	rjmp	.+44     	; 0xf4c <__floatsisf+0x6c>
     f20:	88 23       	and	r24, r24
     f22:	11 f0       	breq	.+4      	; 0xf28 <__floatsisf+0x48>
     f24:	96 e9       	ldi	r25, 0x96	; 150
     f26:	11 c0       	rjmp	.+34     	; 0xf4a <__floatsisf+0x6a>
     f28:	77 23       	and	r23, r23
     f2a:	21 f0       	breq	.+8      	; 0xf34 <__floatsisf+0x54>
     f2c:	9e e8       	ldi	r25, 0x8E	; 142
     f2e:	87 2f       	mov	r24, r23
     f30:	76 2f       	mov	r23, r22
     f32:	05 c0       	rjmp	.+10     	; 0xf3e <__floatsisf+0x5e>
     f34:	66 23       	and	r22, r22
     f36:	71 f0       	breq	.+28     	; 0xf54 <__floatsisf+0x74>
     f38:	96 e8       	ldi	r25, 0x86	; 134
     f3a:	86 2f       	mov	r24, r22
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	60 e0       	ldi	r22, 0x00	; 0
     f40:	2a f0       	brmi	.+10     	; 0xf4c <__floatsisf+0x6c>
     f42:	9a 95       	dec	r25
     f44:	66 0f       	add	r22, r22
     f46:	77 1f       	adc	r23, r23
     f48:	88 1f       	adc	r24, r24
     f4a:	da f7       	brpl	.-10     	; 0xf42 <__floatsisf+0x62>
     f4c:	88 0f       	add	r24, r24
     f4e:	96 95       	lsr	r25
     f50:	87 95       	ror	r24
     f52:	97 f9       	bld	r25, 7
     f54:	08 95       	ret

00000f56 <__fp_inf>:
     f56:	97 f9       	bld	r25, 7
     f58:	9f 67       	ori	r25, 0x7F	; 127
     f5a:	80 e8       	ldi	r24, 0x80	; 128
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	60 e0       	ldi	r22, 0x00	; 0
     f60:	08 95       	ret

00000f62 <__fp_nan>:
     f62:	9f ef       	ldi	r25, 0xFF	; 255
     f64:	80 ec       	ldi	r24, 0xC0	; 192
     f66:	08 95       	ret

00000f68 <__fp_pscA>:
     f68:	00 24       	eor	r0, r0
     f6a:	0a 94       	dec	r0
     f6c:	16 16       	cp	r1, r22
     f6e:	17 06       	cpc	r1, r23
     f70:	18 06       	cpc	r1, r24
     f72:	09 06       	cpc	r0, r25
     f74:	08 95       	ret

00000f76 <__fp_pscB>:
     f76:	00 24       	eor	r0, r0
     f78:	0a 94       	dec	r0
     f7a:	12 16       	cp	r1, r18
     f7c:	13 06       	cpc	r1, r19
     f7e:	14 06       	cpc	r1, r20
     f80:	05 06       	cpc	r0, r21
     f82:	08 95       	ret

00000f84 <__fp_round>:
     f84:	09 2e       	mov	r0, r25
     f86:	03 94       	inc	r0
     f88:	00 0c       	add	r0, r0
     f8a:	11 f4       	brne	.+4      	; 0xf90 <__fp_round+0xc>
     f8c:	88 23       	and	r24, r24
     f8e:	52 f0       	brmi	.+20     	; 0xfa4 <__fp_round+0x20>
     f90:	bb 0f       	add	r27, r27
     f92:	40 f4       	brcc	.+16     	; 0xfa4 <__fp_round+0x20>
     f94:	bf 2b       	or	r27, r31
     f96:	11 f4       	brne	.+4      	; 0xf9c <__fp_round+0x18>
     f98:	60 ff       	sbrs	r22, 0
     f9a:	04 c0       	rjmp	.+8      	; 0xfa4 <__fp_round+0x20>
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	08 95       	ret

00000fa6 <__fp_split3>:
     fa6:	57 fd       	sbrc	r21, 7
     fa8:	90 58       	subi	r25, 0x80	; 128
     faa:	44 0f       	add	r20, r20
     fac:	55 1f       	adc	r21, r21
     fae:	59 f0       	breq	.+22     	; 0xfc6 <__fp_splitA+0x10>
     fb0:	5f 3f       	cpi	r21, 0xFF	; 255
     fb2:	71 f0       	breq	.+28     	; 0xfd0 <__fp_splitA+0x1a>
     fb4:	47 95       	ror	r20

00000fb6 <__fp_splitA>:
     fb6:	88 0f       	add	r24, r24
     fb8:	97 fb       	bst	r25, 7
     fba:	99 1f       	adc	r25, r25
     fbc:	61 f0       	breq	.+24     	; 0xfd6 <__fp_splitA+0x20>
     fbe:	9f 3f       	cpi	r25, 0xFF	; 255
     fc0:	79 f0       	breq	.+30     	; 0xfe0 <__fp_splitA+0x2a>
     fc2:	87 95       	ror	r24
     fc4:	08 95       	ret
     fc6:	12 16       	cp	r1, r18
     fc8:	13 06       	cpc	r1, r19
     fca:	14 06       	cpc	r1, r20
     fcc:	55 1f       	adc	r21, r21
     fce:	f2 cf       	rjmp	.-28     	; 0xfb4 <__fp_split3+0xe>
     fd0:	46 95       	lsr	r20
     fd2:	f1 df       	rcall	.-30     	; 0xfb6 <__fp_splitA>
     fd4:	08 c0       	rjmp	.+16     	; 0xfe6 <__fp_splitA+0x30>
     fd6:	16 16       	cp	r1, r22
     fd8:	17 06       	cpc	r1, r23
     fda:	18 06       	cpc	r1, r24
     fdc:	99 1f       	adc	r25, r25
     fde:	f1 cf       	rjmp	.-30     	; 0xfc2 <__fp_splitA+0xc>
     fe0:	86 95       	lsr	r24
     fe2:	71 05       	cpc	r23, r1
     fe4:	61 05       	cpc	r22, r1
     fe6:	08 94       	sec
     fe8:	08 95       	ret

00000fea <__fp_zero>:
     fea:	e8 94       	clt

00000fec <__fp_szero>:
     fec:	bb 27       	eor	r27, r27
     fee:	66 27       	eor	r22, r22
     ff0:	77 27       	eor	r23, r23
     ff2:	cb 01       	movw	r24, r22
     ff4:	97 f9       	bld	r25, 7
     ff6:	08 95       	ret

00000ff8 <__gesf2>:
     ff8:	86 d0       	rcall	.+268    	; 0x1106 <__fp_cmp>
     ffa:	08 f4       	brcc	.+2      	; 0xffe <__gesf2+0x6>
     ffc:	8f ef       	ldi	r24, 0xFF	; 255
     ffe:	08 95       	ret

00001000 <__mulsf3>:
    1000:	0b d0       	rcall	.+22     	; 0x1018 <__mulsf3x>
    1002:	c0 cf       	rjmp	.-128    	; 0xf84 <__fp_round>
    1004:	b1 df       	rcall	.-158    	; 0xf68 <__fp_pscA>
    1006:	28 f0       	brcs	.+10     	; 0x1012 <__mulsf3+0x12>
    1008:	b6 df       	rcall	.-148    	; 0xf76 <__fp_pscB>
    100a:	18 f0       	brcs	.+6      	; 0x1012 <__mulsf3+0x12>
    100c:	95 23       	and	r25, r21
    100e:	09 f0       	breq	.+2      	; 0x1012 <__mulsf3+0x12>
    1010:	a2 cf       	rjmp	.-188    	; 0xf56 <__fp_inf>
    1012:	a7 cf       	rjmp	.-178    	; 0xf62 <__fp_nan>
    1014:	11 24       	eor	r1, r1
    1016:	ea cf       	rjmp	.-44     	; 0xfec <__fp_szero>

00001018 <__mulsf3x>:
    1018:	c6 df       	rcall	.-116    	; 0xfa6 <__fp_split3>
    101a:	a0 f3       	brcs	.-24     	; 0x1004 <__mulsf3+0x4>

0000101c <__mulsf3_pse>:
    101c:	95 9f       	mul	r25, r21
    101e:	d1 f3       	breq	.-12     	; 0x1014 <__mulsf3+0x14>
    1020:	95 0f       	add	r25, r21
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	55 1f       	adc	r21, r21
    1026:	62 9f       	mul	r22, r18
    1028:	f0 01       	movw	r30, r0
    102a:	72 9f       	mul	r23, r18
    102c:	bb 27       	eor	r27, r27
    102e:	f0 0d       	add	r31, r0
    1030:	b1 1d       	adc	r27, r1
    1032:	63 9f       	mul	r22, r19
    1034:	aa 27       	eor	r26, r26
    1036:	f0 0d       	add	r31, r0
    1038:	b1 1d       	adc	r27, r1
    103a:	aa 1f       	adc	r26, r26
    103c:	64 9f       	mul	r22, r20
    103e:	66 27       	eor	r22, r22
    1040:	b0 0d       	add	r27, r0
    1042:	a1 1d       	adc	r26, r1
    1044:	66 1f       	adc	r22, r22
    1046:	82 9f       	mul	r24, r18
    1048:	22 27       	eor	r18, r18
    104a:	b0 0d       	add	r27, r0
    104c:	a1 1d       	adc	r26, r1
    104e:	62 1f       	adc	r22, r18
    1050:	73 9f       	mul	r23, r19
    1052:	b0 0d       	add	r27, r0
    1054:	a1 1d       	adc	r26, r1
    1056:	62 1f       	adc	r22, r18
    1058:	83 9f       	mul	r24, r19
    105a:	a0 0d       	add	r26, r0
    105c:	61 1d       	adc	r22, r1
    105e:	22 1f       	adc	r18, r18
    1060:	74 9f       	mul	r23, r20
    1062:	33 27       	eor	r19, r19
    1064:	a0 0d       	add	r26, r0
    1066:	61 1d       	adc	r22, r1
    1068:	23 1f       	adc	r18, r19
    106a:	84 9f       	mul	r24, r20
    106c:	60 0d       	add	r22, r0
    106e:	21 1d       	adc	r18, r1
    1070:	82 2f       	mov	r24, r18
    1072:	76 2f       	mov	r23, r22
    1074:	6a 2f       	mov	r22, r26
    1076:	11 24       	eor	r1, r1
    1078:	9f 57       	subi	r25, 0x7F	; 127
    107a:	50 40       	sbci	r21, 0x00	; 0
    107c:	8a f0       	brmi	.+34     	; 0x10a0 <__mulsf3_pse+0x84>
    107e:	e1 f0       	breq	.+56     	; 0x10b8 <__mulsf3_pse+0x9c>
    1080:	88 23       	and	r24, r24
    1082:	4a f0       	brmi	.+18     	; 0x1096 <__mulsf3_pse+0x7a>
    1084:	ee 0f       	add	r30, r30
    1086:	ff 1f       	adc	r31, r31
    1088:	bb 1f       	adc	r27, r27
    108a:	66 1f       	adc	r22, r22
    108c:	77 1f       	adc	r23, r23
    108e:	88 1f       	adc	r24, r24
    1090:	91 50       	subi	r25, 0x01	; 1
    1092:	50 40       	sbci	r21, 0x00	; 0
    1094:	a9 f7       	brne	.-22     	; 0x1080 <__mulsf3_pse+0x64>
    1096:	9e 3f       	cpi	r25, 0xFE	; 254
    1098:	51 05       	cpc	r21, r1
    109a:	70 f0       	brcs	.+28     	; 0x10b8 <__mulsf3_pse+0x9c>
    109c:	5c cf       	rjmp	.-328    	; 0xf56 <__fp_inf>
    109e:	a6 cf       	rjmp	.-180    	; 0xfec <__fp_szero>
    10a0:	5f 3f       	cpi	r21, 0xFF	; 255
    10a2:	ec f3       	brlt	.-6      	; 0x109e <__mulsf3_pse+0x82>
    10a4:	98 3e       	cpi	r25, 0xE8	; 232
    10a6:	dc f3       	brlt	.-10     	; 0x109e <__mulsf3_pse+0x82>
    10a8:	86 95       	lsr	r24
    10aa:	77 95       	ror	r23
    10ac:	67 95       	ror	r22
    10ae:	b7 95       	ror	r27
    10b0:	f7 95       	ror	r31
    10b2:	e7 95       	ror	r30
    10b4:	9f 5f       	subi	r25, 0xFF	; 255
    10b6:	c1 f7       	brne	.-16     	; 0x10a8 <__mulsf3_pse+0x8c>
    10b8:	fe 2b       	or	r31, r30
    10ba:	88 0f       	add	r24, r24
    10bc:	91 1d       	adc	r25, r1
    10be:	96 95       	lsr	r25
    10c0:	87 95       	ror	r24
    10c2:	97 f9       	bld	r25, 7
    10c4:	08 95       	ret

000010c6 <round>:
    10c6:	77 df       	rcall	.-274    	; 0xfb6 <__fp_splitA>
    10c8:	e0 f0       	brcs	.+56     	; 0x1102 <round+0x3c>
    10ca:	9e 37       	cpi	r25, 0x7E	; 126
    10cc:	d8 f0       	brcs	.+54     	; 0x1104 <round+0x3e>
    10ce:	96 39       	cpi	r25, 0x96	; 150
    10d0:	b8 f4       	brcc	.+46     	; 0x1100 <round+0x3a>
    10d2:	9e 38       	cpi	r25, 0x8E	; 142
    10d4:	48 f4       	brcc	.+18     	; 0x10e8 <round+0x22>
    10d6:	67 2f       	mov	r22, r23
    10d8:	78 2f       	mov	r23, r24
    10da:	88 27       	eor	r24, r24
    10dc:	98 5f       	subi	r25, 0xF8	; 248
    10de:	f9 cf       	rjmp	.-14     	; 0x10d2 <round+0xc>
    10e0:	86 95       	lsr	r24
    10e2:	77 95       	ror	r23
    10e4:	67 95       	ror	r22
    10e6:	93 95       	inc	r25
    10e8:	95 39       	cpi	r25, 0x95	; 149
    10ea:	d0 f3       	brcs	.-12     	; 0x10e0 <round+0x1a>
    10ec:	b6 2f       	mov	r27, r22
    10ee:	b1 70       	andi	r27, 0x01	; 1
    10f0:	6b 0f       	add	r22, r27
    10f2:	71 1d       	adc	r23, r1
    10f4:	81 1d       	adc	r24, r1
    10f6:	20 f4       	brcc	.+8      	; 0x1100 <round+0x3a>
    10f8:	87 95       	ror	r24
    10fa:	77 95       	ror	r23
    10fc:	67 95       	ror	r22
    10fe:	93 95       	inc	r25
    1100:	26 c0       	rjmp	.+76     	; 0x114e <__fp_mintl>
    1102:	40 c0       	rjmp	.+128    	; 0x1184 <__fp_mpack>
    1104:	73 cf       	rjmp	.-282    	; 0xfec <__fp_szero>

00001106 <__fp_cmp>:
    1106:	99 0f       	add	r25, r25
    1108:	00 08       	sbc	r0, r0
    110a:	55 0f       	add	r21, r21
    110c:	aa 0b       	sbc	r26, r26
    110e:	e0 e8       	ldi	r30, 0x80	; 128
    1110:	fe ef       	ldi	r31, 0xFE	; 254
    1112:	16 16       	cp	r1, r22
    1114:	17 06       	cpc	r1, r23
    1116:	e8 07       	cpc	r30, r24
    1118:	f9 07       	cpc	r31, r25
    111a:	c0 f0       	brcs	.+48     	; 0x114c <__fp_cmp+0x46>
    111c:	12 16       	cp	r1, r18
    111e:	13 06       	cpc	r1, r19
    1120:	e4 07       	cpc	r30, r20
    1122:	f5 07       	cpc	r31, r21
    1124:	98 f0       	brcs	.+38     	; 0x114c <__fp_cmp+0x46>
    1126:	62 1b       	sub	r22, r18
    1128:	73 0b       	sbc	r23, r19
    112a:	84 0b       	sbc	r24, r20
    112c:	95 0b       	sbc	r25, r21
    112e:	39 f4       	brne	.+14     	; 0x113e <__fp_cmp+0x38>
    1130:	0a 26       	eor	r0, r26
    1132:	61 f0       	breq	.+24     	; 0x114c <__fp_cmp+0x46>
    1134:	23 2b       	or	r18, r19
    1136:	24 2b       	or	r18, r20
    1138:	25 2b       	or	r18, r21
    113a:	21 f4       	brne	.+8      	; 0x1144 <__fp_cmp+0x3e>
    113c:	08 95       	ret
    113e:	0a 26       	eor	r0, r26
    1140:	09 f4       	brne	.+2      	; 0x1144 <__fp_cmp+0x3e>
    1142:	a1 40       	sbci	r26, 0x01	; 1
    1144:	a6 95       	lsr	r26
    1146:	8f ef       	ldi	r24, 0xFF	; 255
    1148:	81 1d       	adc	r24, r1
    114a:	81 1d       	adc	r24, r1
    114c:	08 95       	ret

0000114e <__fp_mintl>:
    114e:	88 23       	and	r24, r24
    1150:	71 f4       	brne	.+28     	; 0x116e <__fp_mintl+0x20>
    1152:	77 23       	and	r23, r23
    1154:	21 f0       	breq	.+8      	; 0x115e <__fp_mintl+0x10>
    1156:	98 50       	subi	r25, 0x08	; 8
    1158:	87 2b       	or	r24, r23
    115a:	76 2f       	mov	r23, r22
    115c:	07 c0       	rjmp	.+14     	; 0x116c <__fp_mintl+0x1e>
    115e:	66 23       	and	r22, r22
    1160:	11 f4       	brne	.+4      	; 0x1166 <__fp_mintl+0x18>
    1162:	99 27       	eor	r25, r25
    1164:	0d c0       	rjmp	.+26     	; 0x1180 <__fp_mintl+0x32>
    1166:	90 51       	subi	r25, 0x10	; 16
    1168:	86 2b       	or	r24, r22
    116a:	70 e0       	ldi	r23, 0x00	; 0
    116c:	60 e0       	ldi	r22, 0x00	; 0
    116e:	2a f0       	brmi	.+10     	; 0x117a <__fp_mintl+0x2c>
    1170:	9a 95       	dec	r25
    1172:	66 0f       	add	r22, r22
    1174:	77 1f       	adc	r23, r23
    1176:	88 1f       	adc	r24, r24
    1178:	da f7       	brpl	.-10     	; 0x1170 <__fp_mintl+0x22>
    117a:	88 0f       	add	r24, r24
    117c:	96 95       	lsr	r25
    117e:	87 95       	ror	r24
    1180:	97 f9       	bld	r25, 7
    1182:	08 95       	ret

00001184 <__fp_mpack>:
    1184:	9f 3f       	cpi	r25, 0xFF	; 255
    1186:	31 f0       	breq	.+12     	; 0x1194 <__fp_mpack_finite+0xc>

00001188 <__fp_mpack_finite>:
    1188:	91 50       	subi	r25, 0x01	; 1
    118a:	20 f4       	brcc	.+8      	; 0x1194 <__fp_mpack_finite+0xc>
    118c:	87 95       	ror	r24
    118e:	77 95       	ror	r23
    1190:	67 95       	ror	r22
    1192:	b7 95       	ror	r27
    1194:	88 0f       	add	r24, r24
    1196:	91 1d       	adc	r25, r1
    1198:	96 95       	lsr	r25
    119a:	87 95       	ror	r24
    119c:	97 f9       	bld	r25, 7
    119e:	08 95       	ret

000011a0 <ColumnScan>:
char reset_char;

///ColumnScan kører alle Columns (Kolonner) igennem og sætter en efter en til lav, en efter en. Inden den næste Kollonne køres igennem, bliver alle kolonner sat til høj for at resette det.
int ColumnScan(int column){
	
	switch (column)
    11a0:	82 30       	cpi	r24, 0x02	; 2
    11a2:	91 05       	cpc	r25, r1
    11a4:	41 f1       	breq	.+80     	; 0x11f6 <ColumnScan+0x56>
    11a6:	1c f4       	brge	.+6      	; 0x11ae <ColumnScan+0xe>
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	39 f0       	breq	.+14     	; 0x11ba <ColumnScan+0x1a>
    11ac:	2e c0       	rjmp	.+92     	; 0x120a <ColumnScan+0x6a>
    11ae:	83 30       	cpi	r24, 0x03	; 3
    11b0:	91 05       	cpc	r25, r1
    11b2:	b9 f0       	breq	.+46     	; 0x11e2 <ColumnScan+0x42>
    11b4:	04 97       	sbiw	r24, 0x04	; 4
    11b6:	59 f0       	breq	.+22     	; 0x11ce <ColumnScan+0x2e>
    11b8:	28 c0       	rjmp	.+80     	; 0x120a <ColumnScan+0x6a>
	{
		case 1:
		reset_char = PORTK & reset_col;
    11ba:	e8 e0       	ldi	r30, 0x08	; 8
    11bc:	f1 e0       	ldi	r31, 0x01	; 1
    11be:	80 81       	ld	r24, Z
		reset_char |= col4;				// 1111 1110
    11c0:	8e ef       	ldi	r24, 0xFE	; 254
    11c2:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11c6:	80 83       	st	Z, r24
		return 4;
    11c8:	84 e0       	ldi	r24, 0x04	; 4
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	08 95       	ret
		break;
		
		case 4:
		reset_char = PORTK & reset_col;
    11ce:	e8 e0       	ldi	r30, 0x08	; 8
    11d0:	f1 e0       	ldi	r31, 0x01	; 1
    11d2:	80 81       	ld	r24, Z
		reset_char |= col3;				// 1111 1011
    11d4:	8d ef       	ldi	r24, 0xFD	; 253
    11d6:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11da:	80 83       	st	Z, r24
		return 3;
    11dc:	83 e0       	ldi	r24, 0x03	; 3
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	08 95       	ret
		break;
		
		case 3:
		reset_char = PORTK & reset_col;
    11e2:	e8 e0       	ldi	r30, 0x08	; 8
    11e4:	f1 e0       	ldi	r31, 0x01	; 1
    11e6:	80 81       	ld	r24, Z
		reset_char |= col2;				// 1110 1111
    11e8:	8b ef       	ldi	r24, 0xFB	; 251
    11ea:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    11ee:	80 83       	st	Z, r24
		return 2;
    11f0:	82 e0       	ldi	r24, 0x02	; 2
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	08 95       	ret
		break;
		
		case 2:
		reset_char = PORTK & reset_col;
    11f6:	e8 e0       	ldi	r30, 0x08	; 8
    11f8:	f1 e0       	ldi	r31, 0x01	; 1
    11fa:	80 81       	ld	r24, Z
		reset_char |= col1;				// 1011 1111
    11fc:	87 ef       	ldi	r24, 0xF7	; 247
    11fe:	80 93 91 04 	sts	0x0491, r24	; 0x800491 <reset_char>
		PORTK = reset_char;
    1202:	80 83       	st	Z, r24
		return 1;
    1204:	81 e0       	ldi	r24, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	08 95       	ret
		break;
	}
	
    120a:	08 95       	ret

0000120c <ReadRow>:
    120c:	8f e3       	ldi	r24, 0x3F	; 63
    120e:	9c e9       	ldi	r25, 0x9C	; 156
    1210:	01 97       	sbiw	r24, 0x01	; 1
    1212:	f1 f7       	brne	.-4      	; 0x1210 <ReadRow+0x4>
    1214:	00 c0       	rjmp	.+0      	; 0x1216 <ReadRow+0xa>
    1216:	00 00       	nop
///ReadRow
/** ReadRow tjekker om en knap i en bestemt række bliver trykket på. Derefter returner den et nummer som så bliver brugt til at decoding af hvad der er blevet trykket på.
(f.eks. Den øverste række er 40, dvs. knap 43 er Række 4 (40) og Kolonne 3 (4) som så er [3] på Keyboardet */
int ReadRow(){
	_delay_ms(10);
	if (!(PINK & (1<<PINK4)))
    1218:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    121c:	84 ff       	sbrs	r24, 4
    121e:	0f c0       	rjmp	.+30     	; 0x123e <ReadRow+0x32>
	{
		return 10;
	}
	if (!(PINK & (1<<PINK5)))
    1220:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1224:	85 ff       	sbrs	r24, 5
    1226:	0e c0       	rjmp	.+28     	; 0x1244 <ReadRow+0x38>
	{
		return 20;
	}
	if (!(PINK & (1<<PINK6)))
    1228:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    122c:	86 ff       	sbrs	r24, 6
    122e:	0d c0       	rjmp	.+26     	; 0x124a <ReadRow+0x3e>
	{
		return 30;
	}
	if (!(PINK & (1<<PINK7)))
    1230:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x700106>
    1234:	88 23       	and	r24, r24
    1236:	64 f4       	brge	.+24     	; 0x1250 <ReadRow+0x44>
	{
		return 40;
	}
	return 90;
    1238:	8a e5       	ldi	r24, 0x5A	; 90
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	08 95       	ret
(f.eks. Den øverste række er 40, dvs. knap 43 er Række 4 (40) og Kolonne 3 (4) som så er [3] på Keyboardet */
int ReadRow(){
	_delay_ms(10);
	if (!(PINK & (1<<PINK4)))
	{
		return 10;
    123e:	8a e0       	ldi	r24, 0x0A	; 10
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	08 95       	ret
	}
	if (!(PINK & (1<<PINK5)))
	{
		return 20;
    1244:	84 e1       	ldi	r24, 0x14	; 20
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	08 95       	ret
	}
	if (!(PINK & (1<<PINK6)))
	{
		return 30;
    124a:	8e e1       	ldi	r24, 0x1E	; 30
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	08 95       	ret
	}
	if (!(PINK & (1<<PINK7)))
	{
		return 40;
    1250:	88 e2       	ldi	r24, 0x28	; 40
    1252:	90 e0       	ldi	r25, 0x00	; 0
	}
	return 90;
    1254:	08 95       	ret

00001256 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) ) {
        lcd_putc(c);
    }

}/* lcd_puts_p */
    1256:	a5 9a       	sbi	0x14, 5	; 20
    1258:	00 00       	nop
    125a:	a5 98       	cbi	0x14, 5	; 20
    125c:	08 95       	ret

0000125e <lcd_write>:
    125e:	cf 93       	push	r28
    1260:	c8 2f       	mov	r28, r24
    1262:	66 23       	and	r22, r22
    1264:	11 f0       	breq	.+4      	; 0x126a <lcd_write+0xc>
    1266:	74 9a       	sbi	0x0e, 4	; 14
    1268:	01 c0       	rjmp	.+2      	; 0x126c <lcd_write+0xe>
    126a:	74 98       	cbi	0x0e, 4	; 14
    126c:	75 98       	cbi	0x0e, 5	; 14
    126e:	6b 9a       	sbi	0x0d, 3	; 13
    1270:	e1 e0       	ldi	r30, 0x01	; 1
    1272:	f1 e0       	ldi	r31, 0x01	; 1
    1274:	80 81       	ld	r24, Z
    1276:	88 60       	ori	r24, 0x08	; 8
    1278:	80 83       	st	Z, r24
    127a:	80 81       	ld	r24, Z
    127c:	80 61       	ori	r24, 0x10	; 16
    127e:	80 83       	st	Z, r24
    1280:	80 81       	ld	r24, Z
    1282:	80 62       	ori	r24, 0x20	; 32
    1284:	80 83       	st	Z, r24
    1286:	e2 e0       	ldi	r30, 0x02	; 2
    1288:	f1 e0       	ldi	r31, 0x01	; 1
    128a:	80 81       	ld	r24, Z
    128c:	8f 7d       	andi	r24, 0xDF	; 223
    128e:	80 83       	st	Z, r24
    1290:	80 81       	ld	r24, Z
    1292:	8f 7e       	andi	r24, 0xEF	; 239
    1294:	80 83       	st	Z, r24
    1296:	80 81       	ld	r24, Z
    1298:	87 7f       	andi	r24, 0xF7	; 247
    129a:	80 83       	st	Z, r24
    129c:	73 98       	cbi	0x0e, 3	; 14
    129e:	cc 23       	and	r28, r28
    12a0:	1c f4       	brge	.+6      	; 0x12a8 <lcd_write+0x4a>
    12a2:	80 81       	ld	r24, Z
    12a4:	80 62       	ori	r24, 0x20	; 32
    12a6:	80 83       	st	Z, r24
    12a8:	c6 ff       	sbrs	r28, 6
    12aa:	05 c0       	rjmp	.+10     	; 0x12b6 <lcd_write+0x58>
    12ac:	e2 e0       	ldi	r30, 0x02	; 2
    12ae:	f1 e0       	ldi	r31, 0x01	; 1
    12b0:	80 81       	ld	r24, Z
    12b2:	80 61       	ori	r24, 0x10	; 16
    12b4:	80 83       	st	Z, r24
    12b6:	c5 ff       	sbrs	r28, 5
    12b8:	05 c0       	rjmp	.+10     	; 0x12c4 <lcd_write+0x66>
    12ba:	e2 e0       	ldi	r30, 0x02	; 2
    12bc:	f1 e0       	ldi	r31, 0x01	; 1
    12be:	80 81       	ld	r24, Z
    12c0:	88 60       	ori	r24, 0x08	; 8
    12c2:	80 83       	st	Z, r24
    12c4:	c4 fd       	sbrc	r28, 4
    12c6:	73 9a       	sbi	0x0e, 3	; 14
    12c8:	c6 df       	rcall	.-116    	; 0x1256 <toggle_e>
    12ca:	e2 e0       	ldi	r30, 0x02	; 2
    12cc:	f1 e0       	ldi	r31, 0x01	; 1
    12ce:	80 81       	ld	r24, Z
    12d0:	8f 7d       	andi	r24, 0xDF	; 223
    12d2:	80 83       	st	Z, r24
    12d4:	80 81       	ld	r24, Z
    12d6:	8f 7e       	andi	r24, 0xEF	; 239
    12d8:	80 83       	st	Z, r24
    12da:	80 81       	ld	r24, Z
    12dc:	87 7f       	andi	r24, 0xF7	; 247
    12de:	80 83       	st	Z, r24
    12e0:	73 98       	cbi	0x0e, 3	; 14
    12e2:	c3 ff       	sbrs	r28, 3
    12e4:	03 c0       	rjmp	.+6      	; 0x12ec <lcd_write+0x8e>
    12e6:	80 81       	ld	r24, Z
    12e8:	80 62       	ori	r24, 0x20	; 32
    12ea:	80 83       	st	Z, r24
    12ec:	c2 ff       	sbrs	r28, 2
    12ee:	05 c0       	rjmp	.+10     	; 0x12fa <lcd_write+0x9c>
    12f0:	e2 e0       	ldi	r30, 0x02	; 2
    12f2:	f1 e0       	ldi	r31, 0x01	; 1
    12f4:	80 81       	ld	r24, Z
    12f6:	80 61       	ori	r24, 0x10	; 16
    12f8:	80 83       	st	Z, r24
    12fa:	c1 ff       	sbrs	r28, 1
    12fc:	05 c0       	rjmp	.+10     	; 0x1308 <lcd_write+0xaa>
    12fe:	e2 e0       	ldi	r30, 0x02	; 2
    1300:	f1 e0       	ldi	r31, 0x01	; 1
    1302:	80 81       	ld	r24, Z
    1304:	88 60       	ori	r24, 0x08	; 8
    1306:	80 83       	st	Z, r24
    1308:	c0 fd       	sbrc	r28, 0
    130a:	73 9a       	sbi	0x0e, 3	; 14
    130c:	a4 df       	rcall	.-184    	; 0x1256 <toggle_e>
    130e:	73 9a       	sbi	0x0e, 3	; 14
    1310:	e2 e0       	ldi	r30, 0x02	; 2
    1312:	f1 e0       	ldi	r31, 0x01	; 1
    1314:	80 81       	ld	r24, Z
    1316:	88 60       	ori	r24, 0x08	; 8
    1318:	80 83       	st	Z, r24
    131a:	80 81       	ld	r24, Z
    131c:	80 61       	ori	r24, 0x10	; 16
    131e:	80 83       	st	Z, r24
    1320:	80 81       	ld	r24, Z
    1322:	80 62       	ori	r24, 0x20	; 32
    1324:	80 83       	st	Z, r24
    1326:	cf 91       	pop	r28
    1328:	08 95       	ret

0000132a <lcd_read>:
    132a:	88 23       	and	r24, r24
    132c:	11 f0       	breq	.+4      	; 0x1332 <lcd_read+0x8>
    132e:	74 9a       	sbi	0x0e, 4	; 14
    1330:	01 c0       	rjmp	.+2      	; 0x1334 <lcd_read+0xa>
    1332:	74 98       	cbi	0x0e, 4	; 14
    1334:	75 9a       	sbi	0x0e, 5	; 14
    1336:	6b 98       	cbi	0x0d, 3	; 13
    1338:	e1 e0       	ldi	r30, 0x01	; 1
    133a:	f1 e0       	ldi	r31, 0x01	; 1
    133c:	80 81       	ld	r24, Z
    133e:	87 7f       	andi	r24, 0xF7	; 247
    1340:	80 83       	st	Z, r24
    1342:	80 81       	ld	r24, Z
    1344:	8f 7e       	andi	r24, 0xEF	; 239
    1346:	80 83       	st	Z, r24
    1348:	80 81       	ld	r24, Z
    134a:	8f 7d       	andi	r24, 0xDF	; 223
    134c:	80 83       	st	Z, r24
    134e:	a5 9a       	sbi	0x14, 5	; 20
    1350:	00 00       	nop
    1352:	63 9b       	sbis	0x0c, 3	; 12
    1354:	02 c0       	rjmp	.+4      	; 0x135a <lcd_read+0x30>
    1356:	80 e1       	ldi	r24, 0x10	; 16
    1358:	01 c0       	rjmp	.+2      	; 0x135c <lcd_read+0x32>
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1360:	93 fd       	sbrc	r25, 3
    1362:	80 62       	ori	r24, 0x20	; 32
    1364:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1368:	94 fd       	sbrc	r25, 4
    136a:	80 64       	ori	r24, 0x40	; 64
    136c:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1370:	95 fd       	sbrc	r25, 5
    1372:	80 68       	ori	r24, 0x80	; 128
    1374:	a5 98       	cbi	0x14, 5	; 20
    1376:	00 00       	nop
    1378:	a5 9a       	sbi	0x14, 5	; 20
    137a:	00 00       	nop
    137c:	63 99       	sbic	0x0c, 3	; 12
    137e:	81 60       	ori	r24, 0x01	; 1
    1380:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1384:	93 fd       	sbrc	r25, 3
    1386:	82 60       	ori	r24, 0x02	; 2
    1388:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    138c:	94 fd       	sbrc	r25, 4
    138e:	84 60       	ori	r24, 0x04	; 4
    1390:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x700100>
    1394:	95 fd       	sbrc	r25, 5
    1396:	88 60       	ori	r24, 0x08	; 8
    1398:	a5 98       	cbi	0x14, 5	; 20
    139a:	08 95       	ret

0000139c <lcd_waitbusy>:
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	c5 df       	rcall	.-118    	; 0x132a <lcd_read>
    13a0:	88 23       	and	r24, r24
    13a2:	e4 f3       	brlt	.-8      	; 0x139c <lcd_waitbusy>
    13a4:	00 c0       	rjmp	.+0      	; 0x13a6 <lcd_waitbusy+0xa>
    13a6:	00 c0       	rjmp	.+0      	; 0x13a8 <lcd_waitbusy+0xc>
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	bf cf       	rjmp	.-130    	; 0x132a <lcd_read>
    13ac:	08 95       	ret

000013ae <lcd_command>:
    13ae:	cf 93       	push	r28
    13b0:	c8 2f       	mov	r28, r24
    13b2:	f4 df       	rcall	.-24     	; 0x139c <lcd_waitbusy>
    13b4:	60 e0       	ldi	r22, 0x00	; 0
    13b6:	8c 2f       	mov	r24, r28
    13b8:	52 df       	rcall	.-348    	; 0x125e <lcd_write>
    13ba:	cf 91       	pop	r28
    13bc:	08 95       	ret

000013be <lcd_gotoxy>:
    13be:	61 11       	cpse	r22, r1
    13c0:	03 c0       	rjmp	.+6      	; 0x13c8 <lcd_gotoxy+0xa>
    13c2:	80 58       	subi	r24, 0x80	; 128
    13c4:	f4 cf       	rjmp	.-24     	; 0x13ae <lcd_command>
    13c6:	08 95       	ret
    13c8:	80 54       	subi	r24, 0x40	; 64
    13ca:	f1 cf       	rjmp	.-30     	; 0x13ae <lcd_command>
    13cc:	08 95       	ret

000013ce <lcd_clrscr>:
    13ce:	81 e0       	ldi	r24, 0x01	; 1
    13d0:	ee cf       	rjmp	.-36     	; 0x13ae <lcd_command>
    13d2:	08 95       	ret

000013d4 <lcd_putc>:
    13d4:	cf 93       	push	r28
    13d6:	c8 2f       	mov	r28, r24
    13d8:	e1 df       	rcall	.-62     	; 0x139c <lcd_waitbusy>
    13da:	ca 30       	cpi	r28, 0x0A	; 10
    13dc:	41 f4       	brne	.+16     	; 0x13ee <lcd_putc+0x1a>
    13de:	80 34       	cpi	r24, 0x40	; 64
    13e0:	10 f0       	brcs	.+4      	; 0x13e6 <lcd_putc+0x12>
    13e2:	80 e0       	ldi	r24, 0x00	; 0
    13e4:	01 c0       	rjmp	.+2      	; 0x13e8 <lcd_putc+0x14>
    13e6:	80 e4       	ldi	r24, 0x40	; 64
    13e8:	80 58       	subi	r24, 0x80	; 128
    13ea:	e1 df       	rcall	.-62     	; 0x13ae <lcd_command>
    13ec:	03 c0       	rjmp	.+6      	; 0x13f4 <lcd_putc+0x20>
    13ee:	61 e0       	ldi	r22, 0x01	; 1
    13f0:	8c 2f       	mov	r24, r28
    13f2:	35 df       	rcall	.-406    	; 0x125e <lcd_write>
    13f4:	cf 91       	pop	r28
    13f6:	08 95       	ret

000013f8 <lcd_puts>:
    13f8:	cf 93       	push	r28
    13fa:	df 93       	push	r29
    13fc:	ec 01       	movw	r28, r24
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
    1404:	88 23       	and	r24, r24
    1406:	21 f0       	breq	.+8      	; 0x1410 <lcd_puts+0x18>
    1408:	e5 df       	rcall	.-54     	; 0x13d4 <lcd_putc>
    140a:	89 91       	ld	r24, Y+
    140c:	81 11       	cpse	r24, r1
    140e:	fc cf       	rjmp	.-8      	; 0x1408 <lcd_puts+0x10>
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	08 95       	ret

00001416 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
    1416:	cf 93       	push	r28
    1418:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
    141a:	6c 9a       	sbi	0x0d, 4	; 13
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
    141c:	6d 9a       	sbi	0x0d, 5	; 13
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    141e:	9d 9a       	sbi	0x13, 5	; 19
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
    1420:	6b 9a       	sbi	0x0d, 3	; 13
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
    1422:	e1 e0       	ldi	r30, 0x01	; 1
    1424:	f1 e0       	ldi	r31, 0x01	; 1
    1426:	80 81       	ld	r24, Z
    1428:	88 60       	ori	r24, 0x08	; 8
    142a:	80 83       	st	Z, r24
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
    142c:	80 81       	ld	r24, Z
    142e:	80 61       	ori	r24, 0x10	; 16
    1430:	80 83       	st	Z, r24
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    1432:	80 81       	ld	r24, Z
    1434:	80 62       	ori	r24, 0x20	; 32
    1436:	80 83       	st	Z, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1438:	8f e9       	ldi	r24, 0x9F	; 159
    143a:	9f e0       	ldi	r25, 0x0F	; 15
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	f1 f7       	brne	.-4      	; 0x143c <lcd_init+0x26>
    1440:	00 c0       	rjmp	.+0      	; 0x1442 <lcd_init+0x2c>
    1442:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP);             /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);    // LCD_FUNCTION>>4;
    1444:	e2 e0       	ldi	r30, 0x02	; 2
    1446:	f1 e0       	ldi	r31, 0x01	; 1
    1448:	80 81       	ld	r24, Z
    144a:	88 60       	ori	r24, 0x08	; 8
    144c:	80 83       	st	Z, r24
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);    // LCD_FUNCTION_8BIT>>4;
    144e:	73 9a       	sbi	0x0e, 3	; 14
    lcd_e_toggle();
    1450:	02 df       	rcall	.-508    	; 0x1256 <toggle_e>
    1452:	81 ee       	ldi	r24, 0xE1	; 225
    1454:	94 e0       	ldi	r25, 0x04	; 4
    1456:	01 97       	sbiw	r24, 0x01	; 1
    1458:	f1 f7       	brne	.-4      	; 0x1456 <lcd_init+0x40>
    145a:	00 c0       	rjmp	.+0      	; 0x145c <lcd_init+0x46>
    delay(LCD_DELAY_INIT);               /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
    145c:	00 00       	nop
    145e:	fb de       	rcall	.-522    	; 0x1256 <toggle_e>
    1460:	95 e1       	ldi	r25, 0x15	; 21
    1462:	9a 95       	dec	r25
    1464:	f1 f7       	brne	.-4      	; 0x1462 <lcd_init+0x4c>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
    1466:	00 00       	nop
    1468:	f6 de       	rcall	.-532    	; 0x1256 <toggle_e>
    146a:	85 e1       	ldi	r24, 0x15	; 21
    146c:	8a 95       	dec	r24
    146e:	f1 f7       	brne	.-4      	; 0x146c <lcd_init+0x56>
    delay(LCD_DELAY_INIT_REP);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
    1470:	00 00       	nop
    lcd_e_toggle();
    1472:	73 98       	cbi	0x0e, 3	; 14
    1474:	f0 de       	rcall	.-544    	; 0x1256 <toggle_e>
    1476:	95 e1       	ldi	r25, 0x15	; 21
    1478:	9a 95       	dec	r25
    147a:	f1 f7       	brne	.-4      	; 0x1478 <lcd_init+0x62>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
    147c:	00 00       	nop
    147e:	88 e2       	ldi	r24, 0x28	; 40
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
    1480:	96 df       	rcall	.-212    	; 0x13ae <lcd_command>
    1482:	88 e0       	ldi	r24, 0x08	; 8
    lcd_clrscr();                           /* display clear                */ 
    1484:	94 df       	rcall	.-216    	; 0x13ae <lcd_command>
    1486:	a3 df       	rcall	.-186    	; 0x13ce <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
    1488:	86 e0       	ldi	r24, 0x06	; 6
    148a:	91 df       	rcall	.-222    	; 0x13ae <lcd_command>
    148c:	8c 2f       	mov	r24, r28
    lcd_command(dispAttr);                  /* display/cursor control       */
    148e:	8f df       	rcall	.-226    	; 0x13ae <lcd_command>
    1490:	cf 91       	pop	r28
    1492:	08 95       	ret

00001494 <Pre_display>:
#include "../lcd/lcd.h"

///Pre_display bliver kørt hver gang at LCD displayed skal bruges, dvs. den laver en clear screen og sætter LCD_DISP_ON_CURSOR_BLINK.
void Pre_display()
{
	lcd_init(LCD_DISP_ON_CURSOR_BLINK);
    1494:	8f e0       	ldi	r24, 0x0F	; 15
    1496:	bf df       	rcall	.-130    	; 0x1416 <lcd_init>
	lcd_clrscr();
    1498:	9a cf       	rjmp	.-204    	; 0x13ce <lcd_clrscr>
    149a:	08 95       	ret

0000149c <init_ds3231>:
    149c:	09 d0       	rcall	.+18     	; 0x14b0 <i2c_init>
#include  "../i2c/i2cmaster.h"

void init_ds3231(void)
{
    i2c_init();                             // Initialize the I2c module.
    i2c_start();                            // Start I2C communication
    149e:	11 d0       	rcall	.+34     	; 0x14c2 <i2c_start>
    i2c_write(DS3231_WriteMode_U8);          // Connect to ds3231 
    14a0:	80 ed       	ldi	r24, 0xD0	; 208
    14a2:	21 d0       	rcall	.+66     	; 0x14e6 <i2c_write>
    i2c_write(DS3231_REG_CONTROL);          // Select the ds3231 ControlRegister 
    14a4:	8e e0       	ldi	r24, 0x0E	; 14
    i2c_write(0x00);                        // Write 0x00 to Control register to disable SQW-Out
    14a6:	1f d0       	rcall	.+62     	; 0x14e6 <i2c_write>
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	1d d0       	rcall	.+58     	; 0x14e6 <i2c_write>
    i2c_stop();                             // Stop I2C communication after initializing ds3231
    14ac:	13 c0       	rjmp	.+38     	; 0x14d4 <i2c_stop>
    14ae:	08 95       	ret

000014b0 <i2c_init>:
    14b0:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    	    continue;
    	}
    	//if( twst != TW_MT_SLA_ACK) return 1;
    	break;
     }
}/* i2c_start_wait */
    14b4:	80 e2       	ldi	r24, 0x20	; 32
    14b6:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    14ba:	84 ea       	ldi	r24, 0xA4	; 164
    14bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    14c0:	08 95       	ret

000014c2 <i2c_start>:
    14c2:	84 ea       	ldi	r24, 0xA4	; 164
    14c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    14c8:	ec eb       	ldi	r30, 0xBC	; 188
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	88 23       	and	r24, r24
    14d0:	ec f7       	brge	.-6      	; 0x14cc <i2c_start+0xa>
    14d2:	08 95       	ret

000014d4 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    14d4:	84 e9       	ldi	r24, 0x94	; 148
    14d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    14da:	ec eb       	ldi	r30, 0xBC	; 188
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	84 fd       	sbrc	r24, 4
    14e2:	fd cf       	rjmp	.-6      	; 0x14de <i2c_stop+0xa>
}/* i2c_stop */
    14e4:	08 95       	ret

000014e6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    14e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    14ea:	84 e8       	ldi	r24, 0x84	; 132
    14ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    14f0:	ec eb       	ldi	r30, 0xBC	; 188
    14f2:	f0 e0       	ldi	r31, 0x00	; 0
    14f4:	80 81       	ld	r24, Z
    14f6:	88 23       	and	r24, r24
    14f8:	ec f7       	brge	.-6      	; 0x14f4 <i2c_write+0xe>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    14fa:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    14fe:	98 7f       	andi	r25, 0xF8	; 248
    1500:	81 e0       	ldi	r24, 0x01	; 1
    1502:	98 32       	cpi	r25, 0x28	; 40
    1504:	09 f4       	brne	.+2      	; 0x1508 <i2c_write+0x22>
    1506:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;
}/* i2c_write */
    1508:	08 95       	ret

0000150a <memcpy>:
    150a:	fb 01       	movw	r30, r22
    150c:	dc 01       	movw	r26, r24
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <memcpy+0xa>
    1510:	01 90       	ld	r0, Z+
    1512:	0d 92       	st	X+, r0
    1514:	41 50       	subi	r20, 0x01	; 1
    1516:	50 40       	sbci	r21, 0x00	; 0
    1518:	d8 f7       	brcc	.-10     	; 0x1510 <memcpy+0x6>
    151a:	08 95       	ret

0000151c <memmove>:
    151c:	68 17       	cp	r22, r24
    151e:	79 07       	cpc	r23, r25
    1520:	68 f4       	brcc	.+26     	; 0x153c <memmove+0x20>
    1522:	fb 01       	movw	r30, r22
    1524:	dc 01       	movw	r26, r24
    1526:	e4 0f       	add	r30, r20
    1528:	f5 1f       	adc	r31, r21
    152a:	a4 0f       	add	r26, r20
    152c:	b5 1f       	adc	r27, r21
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <memmove+0x18>
    1530:	02 90       	ld	r0, -Z
    1532:	0e 92       	st	-X, r0
    1534:	41 50       	subi	r20, 0x01	; 1
    1536:	50 40       	sbci	r21, 0x00	; 0
    1538:	d8 f7       	brcc	.-10     	; 0x1530 <memmove+0x14>
    153a:	08 95       	ret
    153c:	e6 cf       	rjmp	.-52     	; 0x150a <memcpy>

0000153e <strncmp>:
    153e:	fb 01       	movw	r30, r22
    1540:	dc 01       	movw	r26, r24
    1542:	41 50       	subi	r20, 0x01	; 1
    1544:	50 40       	sbci	r21, 0x00	; 0
    1546:	30 f0       	brcs	.+12     	; 0x1554 <strncmp+0x16>
    1548:	8d 91       	ld	r24, X+
    154a:	01 90       	ld	r0, Z+
    154c:	80 19       	sub	r24, r0
    154e:	19 f4       	brne	.+6      	; 0x1556 <strncmp+0x18>
    1550:	00 20       	and	r0, r0
    1552:	b9 f7       	brne	.-18     	; 0x1542 <strncmp+0x4>
    1554:	88 1b       	sub	r24, r24
    1556:	99 0b       	sbc	r25, r25
    1558:	08 95       	ret

0000155a <strstr>:
    155a:	fb 01       	movw	r30, r22
    155c:	51 91       	ld	r21, Z+
    155e:	55 23       	and	r21, r21
    1560:	a9 f0       	breq	.+42     	; 0x158c <strstr+0x32>
    1562:	bf 01       	movw	r22, r30
    1564:	dc 01       	movw	r26, r24
    1566:	4d 91       	ld	r20, X+
    1568:	45 17       	cp	r20, r21
    156a:	41 11       	cpse	r20, r1
    156c:	e1 f7       	brne	.-8      	; 0x1566 <strstr+0xc>
    156e:	59 f4       	brne	.+22     	; 0x1586 <strstr+0x2c>
    1570:	cd 01       	movw	r24, r26
    1572:	01 90       	ld	r0, Z+
    1574:	00 20       	and	r0, r0
    1576:	49 f0       	breq	.+18     	; 0x158a <strstr+0x30>
    1578:	4d 91       	ld	r20, X+
    157a:	40 15       	cp	r20, r0
    157c:	41 11       	cpse	r20, r1
    157e:	c9 f3       	breq	.-14     	; 0x1572 <strstr+0x18>
    1580:	fb 01       	movw	r30, r22
    1582:	41 11       	cpse	r20, r1
    1584:	ef cf       	rjmp	.-34     	; 0x1564 <strstr+0xa>
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	01 97       	sbiw	r24, 0x01	; 1
    158c:	08 95       	ret

0000158e <sprintf>:
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2e 97       	sbiw	r28, 0x0e	; 14
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
    15a6:	0e 89       	ldd	r16, Y+22	; 0x16
    15a8:	1f 89       	ldd	r17, Y+23	; 0x17
    15aa:	86 e0       	ldi	r24, 0x06	; 6
    15ac:	8c 83       	std	Y+4, r24	; 0x04
    15ae:	1a 83       	std	Y+2, r17	; 0x02
    15b0:	09 83       	std	Y+1, r16	; 0x01
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f e7       	ldi	r25, 0x7F	; 127
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
    15ba:	ae 01       	movw	r20, r28
    15bc:	46 5e       	subi	r20, 0xE6	; 230
    15be:	5f 4f       	sbci	r21, 0xFF	; 255
    15c0:	68 8d       	ldd	r22, Y+24	; 0x18
    15c2:	79 8d       	ldd	r23, Y+25	; 0x19
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	10 d0       	rcall	.+32     	; 0x15ea <vfprintf>
    15ca:	ef 81       	ldd	r30, Y+7	; 0x07
    15cc:	f8 85       	ldd	r31, Y+8	; 0x08
    15ce:	e0 0f       	add	r30, r16
    15d0:	f1 1f       	adc	r31, r17
    15d2:	10 82       	st	Z, r1
    15d4:	2e 96       	adiw	r28, 0x0e	; 14
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	08 95       	ret

000015ea <vfprintf>:
    15ea:	2f 92       	push	r2
    15ec:	3f 92       	push	r3
    15ee:	4f 92       	push	r4
    15f0:	5f 92       	push	r5
    15f2:	6f 92       	push	r6
    15f4:	7f 92       	push	r7
    15f6:	8f 92       	push	r8
    15f8:	9f 92       	push	r9
    15fa:	af 92       	push	r10
    15fc:	bf 92       	push	r11
    15fe:	cf 92       	push	r12
    1600:	df 92       	push	r13
    1602:	ef 92       	push	r14
    1604:	ff 92       	push	r15
    1606:	0f 93       	push	r16
    1608:	1f 93       	push	r17
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	2b 97       	sbiw	r28, 0x0b	; 11
    1614:	0f b6       	in	r0, 0x3f	; 63
    1616:	f8 94       	cli
    1618:	de bf       	out	0x3e, r29	; 62
    161a:	0f be       	out	0x3f, r0	; 63
    161c:	cd bf       	out	0x3d, r28	; 61
    161e:	6c 01       	movw	r12, r24
    1620:	7b 01       	movw	r14, r22
    1622:	8a 01       	movw	r16, r20
    1624:	fc 01       	movw	r30, r24
    1626:	17 82       	std	Z+7, r1	; 0x07
    1628:	16 82       	std	Z+6, r1	; 0x06
    162a:	83 81       	ldd	r24, Z+3	; 0x03
    162c:	81 ff       	sbrs	r24, 1
    162e:	bf c1       	rjmp	.+894    	; 0x19ae <vfprintf+0x3c4>
    1630:	ce 01       	movw	r24, r28
    1632:	01 96       	adiw	r24, 0x01	; 1
    1634:	3c 01       	movw	r6, r24
    1636:	f6 01       	movw	r30, r12
    1638:	93 81       	ldd	r25, Z+3	; 0x03
    163a:	f7 01       	movw	r30, r14
    163c:	93 fd       	sbrc	r25, 3
    163e:	85 91       	lpm	r24, Z+
    1640:	93 ff       	sbrs	r25, 3
    1642:	81 91       	ld	r24, Z+
    1644:	7f 01       	movw	r14, r30
    1646:	88 23       	and	r24, r24
    1648:	09 f4       	brne	.+2      	; 0x164c <vfprintf+0x62>
    164a:	ad c1       	rjmp	.+858    	; 0x19a6 <vfprintf+0x3bc>
    164c:	85 32       	cpi	r24, 0x25	; 37
    164e:	39 f4       	brne	.+14     	; 0x165e <vfprintf+0x74>
    1650:	93 fd       	sbrc	r25, 3
    1652:	85 91       	lpm	r24, Z+
    1654:	93 ff       	sbrs	r25, 3
    1656:	81 91       	ld	r24, Z+
    1658:	7f 01       	movw	r14, r30
    165a:	85 32       	cpi	r24, 0x25	; 37
    165c:	21 f4       	brne	.+8      	; 0x1666 <vfprintf+0x7c>
    165e:	b6 01       	movw	r22, r12
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	d6 d1       	rcall	.+940    	; 0x1a10 <fputc>
    1664:	e8 cf       	rjmp	.-48     	; 0x1636 <vfprintf+0x4c>
    1666:	91 2c       	mov	r9, r1
    1668:	21 2c       	mov	r2, r1
    166a:	31 2c       	mov	r3, r1
    166c:	ff e1       	ldi	r31, 0x1F	; 31
    166e:	f3 15       	cp	r31, r3
    1670:	d8 f0       	brcs	.+54     	; 0x16a8 <vfprintf+0xbe>
    1672:	8b 32       	cpi	r24, 0x2B	; 43
    1674:	79 f0       	breq	.+30     	; 0x1694 <vfprintf+0xaa>
    1676:	38 f4       	brcc	.+14     	; 0x1686 <vfprintf+0x9c>
    1678:	80 32       	cpi	r24, 0x20	; 32
    167a:	79 f0       	breq	.+30     	; 0x169a <vfprintf+0xb0>
    167c:	83 32       	cpi	r24, 0x23	; 35
    167e:	a1 f4       	brne	.+40     	; 0x16a8 <vfprintf+0xbe>
    1680:	23 2d       	mov	r18, r3
    1682:	20 61       	ori	r18, 0x10	; 16
    1684:	1d c0       	rjmp	.+58     	; 0x16c0 <vfprintf+0xd6>
    1686:	8d 32       	cpi	r24, 0x2D	; 45
    1688:	61 f0       	breq	.+24     	; 0x16a2 <vfprintf+0xb8>
    168a:	80 33       	cpi	r24, 0x30	; 48
    168c:	69 f4       	brne	.+26     	; 0x16a8 <vfprintf+0xbe>
    168e:	23 2d       	mov	r18, r3
    1690:	21 60       	ori	r18, 0x01	; 1
    1692:	16 c0       	rjmp	.+44     	; 0x16c0 <vfprintf+0xd6>
    1694:	83 2d       	mov	r24, r3
    1696:	82 60       	ori	r24, 0x02	; 2
    1698:	38 2e       	mov	r3, r24
    169a:	e3 2d       	mov	r30, r3
    169c:	e4 60       	ori	r30, 0x04	; 4
    169e:	3e 2e       	mov	r3, r30
    16a0:	2a c0       	rjmp	.+84     	; 0x16f6 <vfprintf+0x10c>
    16a2:	f3 2d       	mov	r31, r3
    16a4:	f8 60       	ori	r31, 0x08	; 8
    16a6:	1d c0       	rjmp	.+58     	; 0x16e2 <vfprintf+0xf8>
    16a8:	37 fc       	sbrc	r3, 7
    16aa:	2d c0       	rjmp	.+90     	; 0x1706 <vfprintf+0x11c>
    16ac:	20 ed       	ldi	r18, 0xD0	; 208
    16ae:	28 0f       	add	r18, r24
    16b0:	2a 30       	cpi	r18, 0x0A	; 10
    16b2:	40 f0       	brcs	.+16     	; 0x16c4 <vfprintf+0xda>
    16b4:	8e 32       	cpi	r24, 0x2E	; 46
    16b6:	b9 f4       	brne	.+46     	; 0x16e6 <vfprintf+0xfc>
    16b8:	36 fc       	sbrc	r3, 6
    16ba:	75 c1       	rjmp	.+746    	; 0x19a6 <vfprintf+0x3bc>
    16bc:	23 2d       	mov	r18, r3
    16be:	20 64       	ori	r18, 0x40	; 64
    16c0:	32 2e       	mov	r3, r18
    16c2:	19 c0       	rjmp	.+50     	; 0x16f6 <vfprintf+0x10c>
    16c4:	36 fe       	sbrs	r3, 6
    16c6:	06 c0       	rjmp	.+12     	; 0x16d4 <vfprintf+0xea>
    16c8:	8a e0       	ldi	r24, 0x0A	; 10
    16ca:	98 9e       	mul	r9, r24
    16cc:	20 0d       	add	r18, r0
    16ce:	11 24       	eor	r1, r1
    16d0:	92 2e       	mov	r9, r18
    16d2:	11 c0       	rjmp	.+34     	; 0x16f6 <vfprintf+0x10c>
    16d4:	ea e0       	ldi	r30, 0x0A	; 10
    16d6:	2e 9e       	mul	r2, r30
    16d8:	20 0d       	add	r18, r0
    16da:	11 24       	eor	r1, r1
    16dc:	22 2e       	mov	r2, r18
    16de:	f3 2d       	mov	r31, r3
    16e0:	f0 62       	ori	r31, 0x20	; 32
    16e2:	3f 2e       	mov	r3, r31
    16e4:	08 c0       	rjmp	.+16     	; 0x16f6 <vfprintf+0x10c>
    16e6:	8c 36       	cpi	r24, 0x6C	; 108
    16e8:	21 f4       	brne	.+8      	; 0x16f2 <vfprintf+0x108>
    16ea:	83 2d       	mov	r24, r3
    16ec:	80 68       	ori	r24, 0x80	; 128
    16ee:	38 2e       	mov	r3, r24
    16f0:	02 c0       	rjmp	.+4      	; 0x16f6 <vfprintf+0x10c>
    16f2:	88 36       	cpi	r24, 0x68	; 104
    16f4:	41 f4       	brne	.+16     	; 0x1706 <vfprintf+0x11c>
    16f6:	f7 01       	movw	r30, r14
    16f8:	93 fd       	sbrc	r25, 3
    16fa:	85 91       	lpm	r24, Z+
    16fc:	93 ff       	sbrs	r25, 3
    16fe:	81 91       	ld	r24, Z+
    1700:	7f 01       	movw	r14, r30
    1702:	81 11       	cpse	r24, r1
    1704:	b3 cf       	rjmp	.-154    	; 0x166c <vfprintf+0x82>
    1706:	98 2f       	mov	r25, r24
    1708:	9f 7d       	andi	r25, 0xDF	; 223
    170a:	95 54       	subi	r25, 0x45	; 69
    170c:	93 30       	cpi	r25, 0x03	; 3
    170e:	28 f4       	brcc	.+10     	; 0x171a <vfprintf+0x130>
    1710:	0c 5f       	subi	r16, 0xFC	; 252
    1712:	1f 4f       	sbci	r17, 0xFF	; 255
    1714:	9f e3       	ldi	r25, 0x3F	; 63
    1716:	99 83       	std	Y+1, r25	; 0x01
    1718:	0d c0       	rjmp	.+26     	; 0x1734 <vfprintf+0x14a>
    171a:	83 36       	cpi	r24, 0x63	; 99
    171c:	31 f0       	breq	.+12     	; 0x172a <vfprintf+0x140>
    171e:	83 37       	cpi	r24, 0x73	; 115
    1720:	71 f0       	breq	.+28     	; 0x173e <vfprintf+0x154>
    1722:	83 35       	cpi	r24, 0x53	; 83
    1724:	09 f0       	breq	.+2      	; 0x1728 <vfprintf+0x13e>
    1726:	55 c0       	rjmp	.+170    	; 0x17d2 <vfprintf+0x1e8>
    1728:	20 c0       	rjmp	.+64     	; 0x176a <vfprintf+0x180>
    172a:	f8 01       	movw	r30, r16
    172c:	80 81       	ld	r24, Z
    172e:	89 83       	std	Y+1, r24	; 0x01
    1730:	0e 5f       	subi	r16, 0xFE	; 254
    1732:	1f 4f       	sbci	r17, 0xFF	; 255
    1734:	88 24       	eor	r8, r8
    1736:	83 94       	inc	r8
    1738:	91 2c       	mov	r9, r1
    173a:	53 01       	movw	r10, r6
    173c:	12 c0       	rjmp	.+36     	; 0x1762 <vfprintf+0x178>
    173e:	28 01       	movw	r4, r16
    1740:	f2 e0       	ldi	r31, 0x02	; 2
    1742:	4f 0e       	add	r4, r31
    1744:	51 1c       	adc	r5, r1
    1746:	f8 01       	movw	r30, r16
    1748:	a0 80       	ld	r10, Z
    174a:	b1 80       	ldd	r11, Z+1	; 0x01
    174c:	36 fe       	sbrs	r3, 6
    174e:	03 c0       	rjmp	.+6      	; 0x1756 <vfprintf+0x16c>
    1750:	69 2d       	mov	r22, r9
    1752:	70 e0       	ldi	r23, 0x00	; 0
    1754:	02 c0       	rjmp	.+4      	; 0x175a <vfprintf+0x170>
    1756:	6f ef       	ldi	r22, 0xFF	; 255
    1758:	7f ef       	ldi	r23, 0xFF	; 255
    175a:	c5 01       	movw	r24, r10
    175c:	4e d1       	rcall	.+668    	; 0x19fa <strnlen>
    175e:	4c 01       	movw	r8, r24
    1760:	82 01       	movw	r16, r4
    1762:	f3 2d       	mov	r31, r3
    1764:	ff 77       	andi	r31, 0x7F	; 127
    1766:	3f 2e       	mov	r3, r31
    1768:	15 c0       	rjmp	.+42     	; 0x1794 <vfprintf+0x1aa>
    176a:	28 01       	movw	r4, r16
    176c:	22 e0       	ldi	r18, 0x02	; 2
    176e:	42 0e       	add	r4, r18
    1770:	51 1c       	adc	r5, r1
    1772:	f8 01       	movw	r30, r16
    1774:	a0 80       	ld	r10, Z
    1776:	b1 80       	ldd	r11, Z+1	; 0x01
    1778:	36 fe       	sbrs	r3, 6
    177a:	03 c0       	rjmp	.+6      	; 0x1782 <vfprintf+0x198>
    177c:	69 2d       	mov	r22, r9
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <vfprintf+0x19c>
    1782:	6f ef       	ldi	r22, 0xFF	; 255
    1784:	7f ef       	ldi	r23, 0xFF	; 255
    1786:	c5 01       	movw	r24, r10
    1788:	2d d1       	rcall	.+602    	; 0x19e4 <strnlen_P>
    178a:	4c 01       	movw	r8, r24
    178c:	f3 2d       	mov	r31, r3
    178e:	f0 68       	ori	r31, 0x80	; 128
    1790:	3f 2e       	mov	r3, r31
    1792:	82 01       	movw	r16, r4
    1794:	33 fc       	sbrc	r3, 3
    1796:	19 c0       	rjmp	.+50     	; 0x17ca <vfprintf+0x1e0>
    1798:	82 2d       	mov	r24, r2
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	88 16       	cp	r8, r24
    179e:	99 06       	cpc	r9, r25
    17a0:	a0 f4       	brcc	.+40     	; 0x17ca <vfprintf+0x1e0>
    17a2:	b6 01       	movw	r22, r12
    17a4:	80 e2       	ldi	r24, 0x20	; 32
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	33 d1       	rcall	.+614    	; 0x1a10 <fputc>
    17aa:	2a 94       	dec	r2
    17ac:	f5 cf       	rjmp	.-22     	; 0x1798 <vfprintf+0x1ae>
    17ae:	f5 01       	movw	r30, r10
    17b0:	37 fc       	sbrc	r3, 7
    17b2:	85 91       	lpm	r24, Z+
    17b4:	37 fe       	sbrs	r3, 7
    17b6:	81 91       	ld	r24, Z+
    17b8:	5f 01       	movw	r10, r30
    17ba:	b6 01       	movw	r22, r12
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	28 d1       	rcall	.+592    	; 0x1a10 <fputc>
    17c0:	21 10       	cpse	r2, r1
    17c2:	2a 94       	dec	r2
    17c4:	21 e0       	ldi	r18, 0x01	; 1
    17c6:	82 1a       	sub	r8, r18
    17c8:	91 08       	sbc	r9, r1
    17ca:	81 14       	cp	r8, r1
    17cc:	91 04       	cpc	r9, r1
    17ce:	79 f7       	brne	.-34     	; 0x17ae <vfprintf+0x1c4>
    17d0:	e1 c0       	rjmp	.+450    	; 0x1994 <vfprintf+0x3aa>
    17d2:	84 36       	cpi	r24, 0x64	; 100
    17d4:	11 f0       	breq	.+4      	; 0x17da <vfprintf+0x1f0>
    17d6:	89 36       	cpi	r24, 0x69	; 105
    17d8:	39 f5       	brne	.+78     	; 0x1828 <vfprintf+0x23e>
    17da:	f8 01       	movw	r30, r16
    17dc:	37 fe       	sbrs	r3, 7
    17de:	07 c0       	rjmp	.+14     	; 0x17ee <vfprintf+0x204>
    17e0:	60 81       	ld	r22, Z
    17e2:	71 81       	ldd	r23, Z+1	; 0x01
    17e4:	82 81       	ldd	r24, Z+2	; 0x02
    17e6:	93 81       	ldd	r25, Z+3	; 0x03
    17e8:	0c 5f       	subi	r16, 0xFC	; 252
    17ea:	1f 4f       	sbci	r17, 0xFF	; 255
    17ec:	08 c0       	rjmp	.+16     	; 0x17fe <vfprintf+0x214>
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	07 2e       	mov	r0, r23
    17f4:	00 0c       	add	r0, r0
    17f6:	88 0b       	sbc	r24, r24
    17f8:	99 0b       	sbc	r25, r25
    17fa:	0e 5f       	subi	r16, 0xFE	; 254
    17fc:	1f 4f       	sbci	r17, 0xFF	; 255
    17fe:	f3 2d       	mov	r31, r3
    1800:	ff 76       	andi	r31, 0x6F	; 111
    1802:	3f 2e       	mov	r3, r31
    1804:	97 ff       	sbrs	r25, 7
    1806:	09 c0       	rjmp	.+18     	; 0x181a <vfprintf+0x230>
    1808:	90 95       	com	r25
    180a:	80 95       	com	r24
    180c:	70 95       	com	r23
    180e:	61 95       	neg	r22
    1810:	7f 4f       	sbci	r23, 0xFF	; 255
    1812:	8f 4f       	sbci	r24, 0xFF	; 255
    1814:	9f 4f       	sbci	r25, 0xFF	; 255
    1816:	f0 68       	ori	r31, 0x80	; 128
    1818:	3f 2e       	mov	r3, r31
    181a:	2a e0       	ldi	r18, 0x0A	; 10
    181c:	30 e0       	ldi	r19, 0x00	; 0
    181e:	a3 01       	movw	r20, r6
    1820:	33 d1       	rcall	.+614    	; 0x1a88 <__ultoa_invert>
    1822:	88 2e       	mov	r8, r24
    1824:	86 18       	sub	r8, r6
    1826:	44 c0       	rjmp	.+136    	; 0x18b0 <vfprintf+0x2c6>
    1828:	85 37       	cpi	r24, 0x75	; 117
    182a:	31 f4       	brne	.+12     	; 0x1838 <vfprintf+0x24e>
    182c:	23 2d       	mov	r18, r3
    182e:	2f 7e       	andi	r18, 0xEF	; 239
    1830:	b2 2e       	mov	r11, r18
    1832:	2a e0       	ldi	r18, 0x0A	; 10
    1834:	30 e0       	ldi	r19, 0x00	; 0
    1836:	25 c0       	rjmp	.+74     	; 0x1882 <vfprintf+0x298>
    1838:	93 2d       	mov	r25, r3
    183a:	99 7f       	andi	r25, 0xF9	; 249
    183c:	b9 2e       	mov	r11, r25
    183e:	8f 36       	cpi	r24, 0x6F	; 111
    1840:	c1 f0       	breq	.+48     	; 0x1872 <vfprintf+0x288>
    1842:	18 f4       	brcc	.+6      	; 0x184a <vfprintf+0x260>
    1844:	88 35       	cpi	r24, 0x58	; 88
    1846:	79 f0       	breq	.+30     	; 0x1866 <vfprintf+0x27c>
    1848:	ae c0       	rjmp	.+348    	; 0x19a6 <vfprintf+0x3bc>
    184a:	80 37       	cpi	r24, 0x70	; 112
    184c:	19 f0       	breq	.+6      	; 0x1854 <vfprintf+0x26a>
    184e:	88 37       	cpi	r24, 0x78	; 120
    1850:	21 f0       	breq	.+8      	; 0x185a <vfprintf+0x270>
    1852:	a9 c0       	rjmp	.+338    	; 0x19a6 <vfprintf+0x3bc>
    1854:	e9 2f       	mov	r30, r25
    1856:	e0 61       	ori	r30, 0x10	; 16
    1858:	be 2e       	mov	r11, r30
    185a:	b4 fe       	sbrs	r11, 4
    185c:	0d c0       	rjmp	.+26     	; 0x1878 <vfprintf+0x28e>
    185e:	fb 2d       	mov	r31, r11
    1860:	f4 60       	ori	r31, 0x04	; 4
    1862:	bf 2e       	mov	r11, r31
    1864:	09 c0       	rjmp	.+18     	; 0x1878 <vfprintf+0x28e>
    1866:	34 fe       	sbrs	r3, 4
    1868:	0a c0       	rjmp	.+20     	; 0x187e <vfprintf+0x294>
    186a:	29 2f       	mov	r18, r25
    186c:	26 60       	ori	r18, 0x06	; 6
    186e:	b2 2e       	mov	r11, r18
    1870:	06 c0       	rjmp	.+12     	; 0x187e <vfprintf+0x294>
    1872:	28 e0       	ldi	r18, 0x08	; 8
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	05 c0       	rjmp	.+10     	; 0x1882 <vfprintf+0x298>
    1878:	20 e1       	ldi	r18, 0x10	; 16
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	02 c0       	rjmp	.+4      	; 0x1882 <vfprintf+0x298>
    187e:	20 e1       	ldi	r18, 0x10	; 16
    1880:	32 e0       	ldi	r19, 0x02	; 2
    1882:	f8 01       	movw	r30, r16
    1884:	b7 fe       	sbrs	r11, 7
    1886:	07 c0       	rjmp	.+14     	; 0x1896 <vfprintf+0x2ac>
    1888:	60 81       	ld	r22, Z
    188a:	71 81       	ldd	r23, Z+1	; 0x01
    188c:	82 81       	ldd	r24, Z+2	; 0x02
    188e:	93 81       	ldd	r25, Z+3	; 0x03
    1890:	0c 5f       	subi	r16, 0xFC	; 252
    1892:	1f 4f       	sbci	r17, 0xFF	; 255
    1894:	06 c0       	rjmp	.+12     	; 0x18a2 <vfprintf+0x2b8>
    1896:	60 81       	ld	r22, Z
    1898:	71 81       	ldd	r23, Z+1	; 0x01
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	0e 5f       	subi	r16, 0xFE	; 254
    18a0:	1f 4f       	sbci	r17, 0xFF	; 255
    18a2:	a3 01       	movw	r20, r6
    18a4:	f1 d0       	rcall	.+482    	; 0x1a88 <__ultoa_invert>
    18a6:	88 2e       	mov	r8, r24
    18a8:	86 18       	sub	r8, r6
    18aa:	fb 2d       	mov	r31, r11
    18ac:	ff 77       	andi	r31, 0x7F	; 127
    18ae:	3f 2e       	mov	r3, r31
    18b0:	36 fe       	sbrs	r3, 6
    18b2:	0d c0       	rjmp	.+26     	; 0x18ce <vfprintf+0x2e4>
    18b4:	23 2d       	mov	r18, r3
    18b6:	2e 7f       	andi	r18, 0xFE	; 254
    18b8:	a2 2e       	mov	r10, r18
    18ba:	89 14       	cp	r8, r9
    18bc:	58 f4       	brcc	.+22     	; 0x18d4 <vfprintf+0x2ea>
    18be:	34 fe       	sbrs	r3, 4
    18c0:	0b c0       	rjmp	.+22     	; 0x18d8 <vfprintf+0x2ee>
    18c2:	32 fc       	sbrc	r3, 2
    18c4:	09 c0       	rjmp	.+18     	; 0x18d8 <vfprintf+0x2ee>
    18c6:	83 2d       	mov	r24, r3
    18c8:	8e 7e       	andi	r24, 0xEE	; 238
    18ca:	a8 2e       	mov	r10, r24
    18cc:	05 c0       	rjmp	.+10     	; 0x18d8 <vfprintf+0x2ee>
    18ce:	b8 2c       	mov	r11, r8
    18d0:	a3 2c       	mov	r10, r3
    18d2:	03 c0       	rjmp	.+6      	; 0x18da <vfprintf+0x2f0>
    18d4:	b8 2c       	mov	r11, r8
    18d6:	01 c0       	rjmp	.+2      	; 0x18da <vfprintf+0x2f0>
    18d8:	b9 2c       	mov	r11, r9
    18da:	a4 fe       	sbrs	r10, 4
    18dc:	0f c0       	rjmp	.+30     	; 0x18fc <vfprintf+0x312>
    18de:	fe 01       	movw	r30, r28
    18e0:	e8 0d       	add	r30, r8
    18e2:	f1 1d       	adc	r31, r1
    18e4:	80 81       	ld	r24, Z
    18e6:	80 33       	cpi	r24, 0x30	; 48
    18e8:	21 f4       	brne	.+8      	; 0x18f2 <vfprintf+0x308>
    18ea:	9a 2d       	mov	r25, r10
    18ec:	99 7e       	andi	r25, 0xE9	; 233
    18ee:	a9 2e       	mov	r10, r25
    18f0:	09 c0       	rjmp	.+18     	; 0x1904 <vfprintf+0x31a>
    18f2:	a2 fe       	sbrs	r10, 2
    18f4:	06 c0       	rjmp	.+12     	; 0x1902 <vfprintf+0x318>
    18f6:	b3 94       	inc	r11
    18f8:	b3 94       	inc	r11
    18fa:	04 c0       	rjmp	.+8      	; 0x1904 <vfprintf+0x31a>
    18fc:	8a 2d       	mov	r24, r10
    18fe:	86 78       	andi	r24, 0x86	; 134
    1900:	09 f0       	breq	.+2      	; 0x1904 <vfprintf+0x31a>
    1902:	b3 94       	inc	r11
    1904:	a3 fc       	sbrc	r10, 3
    1906:	10 c0       	rjmp	.+32     	; 0x1928 <vfprintf+0x33e>
    1908:	a0 fe       	sbrs	r10, 0
    190a:	06 c0       	rjmp	.+12     	; 0x1918 <vfprintf+0x32e>
    190c:	b2 14       	cp	r11, r2
    190e:	80 f4       	brcc	.+32     	; 0x1930 <vfprintf+0x346>
    1910:	28 0c       	add	r2, r8
    1912:	92 2c       	mov	r9, r2
    1914:	9b 18       	sub	r9, r11
    1916:	0d c0       	rjmp	.+26     	; 0x1932 <vfprintf+0x348>
    1918:	b2 14       	cp	r11, r2
    191a:	58 f4       	brcc	.+22     	; 0x1932 <vfprintf+0x348>
    191c:	b6 01       	movw	r22, r12
    191e:	80 e2       	ldi	r24, 0x20	; 32
    1920:	90 e0       	ldi	r25, 0x00	; 0
    1922:	76 d0       	rcall	.+236    	; 0x1a10 <fputc>
    1924:	b3 94       	inc	r11
    1926:	f8 cf       	rjmp	.-16     	; 0x1918 <vfprintf+0x32e>
    1928:	b2 14       	cp	r11, r2
    192a:	18 f4       	brcc	.+6      	; 0x1932 <vfprintf+0x348>
    192c:	2b 18       	sub	r2, r11
    192e:	02 c0       	rjmp	.+4      	; 0x1934 <vfprintf+0x34a>
    1930:	98 2c       	mov	r9, r8
    1932:	21 2c       	mov	r2, r1
    1934:	a4 fe       	sbrs	r10, 4
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <vfprintf+0x36c>
    1938:	b6 01       	movw	r22, r12
    193a:	80 e3       	ldi	r24, 0x30	; 48
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	68 d0       	rcall	.+208    	; 0x1a10 <fputc>
    1940:	a2 fe       	sbrs	r10, 2
    1942:	16 c0       	rjmp	.+44     	; 0x1970 <vfprintf+0x386>
    1944:	a1 fc       	sbrc	r10, 1
    1946:	03 c0       	rjmp	.+6      	; 0x194e <vfprintf+0x364>
    1948:	88 e7       	ldi	r24, 0x78	; 120
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <vfprintf+0x368>
    194e:	88 e5       	ldi	r24, 0x58	; 88
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	b6 01       	movw	r22, r12
    1954:	0c c0       	rjmp	.+24     	; 0x196e <vfprintf+0x384>
    1956:	8a 2d       	mov	r24, r10
    1958:	86 78       	andi	r24, 0x86	; 134
    195a:	51 f0       	breq	.+20     	; 0x1970 <vfprintf+0x386>
    195c:	a1 fe       	sbrs	r10, 1
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <vfprintf+0x37a>
    1960:	8b e2       	ldi	r24, 0x2B	; 43
    1962:	01 c0       	rjmp	.+2      	; 0x1966 <vfprintf+0x37c>
    1964:	80 e2       	ldi	r24, 0x20	; 32
    1966:	a7 fc       	sbrc	r10, 7
    1968:	8d e2       	ldi	r24, 0x2D	; 45
    196a:	b6 01       	movw	r22, r12
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	50 d0       	rcall	.+160    	; 0x1a10 <fputc>
    1970:	89 14       	cp	r8, r9
    1972:	30 f4       	brcc	.+12     	; 0x1980 <vfprintf+0x396>
    1974:	b6 01       	movw	r22, r12
    1976:	80 e3       	ldi	r24, 0x30	; 48
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	4a d0       	rcall	.+148    	; 0x1a10 <fputc>
    197c:	9a 94       	dec	r9
    197e:	f8 cf       	rjmp	.-16     	; 0x1970 <vfprintf+0x386>
    1980:	8a 94       	dec	r8
    1982:	f3 01       	movw	r30, r6
    1984:	e8 0d       	add	r30, r8
    1986:	f1 1d       	adc	r31, r1
    1988:	80 81       	ld	r24, Z
    198a:	b6 01       	movw	r22, r12
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	40 d0       	rcall	.+128    	; 0x1a10 <fputc>
    1990:	81 10       	cpse	r8, r1
    1992:	f6 cf       	rjmp	.-20     	; 0x1980 <vfprintf+0x396>
    1994:	22 20       	and	r2, r2
    1996:	09 f4       	brne	.+2      	; 0x199a <vfprintf+0x3b0>
    1998:	4e ce       	rjmp	.-868    	; 0x1636 <vfprintf+0x4c>
    199a:	b6 01       	movw	r22, r12
    199c:	80 e2       	ldi	r24, 0x20	; 32
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	37 d0       	rcall	.+110    	; 0x1a10 <fputc>
    19a2:	2a 94       	dec	r2
    19a4:	f7 cf       	rjmp	.-18     	; 0x1994 <vfprintf+0x3aa>
    19a6:	f6 01       	movw	r30, r12
    19a8:	86 81       	ldd	r24, Z+6	; 0x06
    19aa:	97 81       	ldd	r25, Z+7	; 0x07
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <vfprintf+0x3c8>
    19ae:	8f ef       	ldi	r24, 0xFF	; 255
    19b0:	9f ef       	ldi	r25, 0xFF	; 255
    19b2:	2b 96       	adiw	r28, 0x0b	; 11
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	5f 90       	pop	r5
    19dc:	4f 90       	pop	r4
    19de:	3f 90       	pop	r3
    19e0:	2f 90       	pop	r2
    19e2:	08 95       	ret

000019e4 <strnlen_P>:
    19e4:	fc 01       	movw	r30, r24
    19e6:	05 90       	lpm	r0, Z+
    19e8:	61 50       	subi	r22, 0x01	; 1
    19ea:	70 40       	sbci	r23, 0x00	; 0
    19ec:	01 10       	cpse	r0, r1
    19ee:	d8 f7       	brcc	.-10     	; 0x19e6 <strnlen_P+0x2>
    19f0:	80 95       	com	r24
    19f2:	90 95       	com	r25
    19f4:	8e 0f       	add	r24, r30
    19f6:	9f 1f       	adc	r25, r31
    19f8:	08 95       	ret

000019fa <strnlen>:
    19fa:	fc 01       	movw	r30, r24
    19fc:	61 50       	subi	r22, 0x01	; 1
    19fe:	70 40       	sbci	r23, 0x00	; 0
    1a00:	01 90       	ld	r0, Z+
    1a02:	01 10       	cpse	r0, r1
    1a04:	d8 f7       	brcc	.-10     	; 0x19fc <strnlen+0x2>
    1a06:	80 95       	com	r24
    1a08:	90 95       	com	r25
    1a0a:	8e 0f       	add	r24, r30
    1a0c:	9f 1f       	adc	r25, r31
    1a0e:	08 95       	ret

00001a10 <fputc>:
    1a10:	0f 93       	push	r16
    1a12:	1f 93       	push	r17
    1a14:	cf 93       	push	r28
    1a16:	df 93       	push	r29
    1a18:	fb 01       	movw	r30, r22
    1a1a:	23 81       	ldd	r18, Z+3	; 0x03
    1a1c:	21 fd       	sbrc	r18, 1
    1a1e:	03 c0       	rjmp	.+6      	; 0x1a26 <fputc+0x16>
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	2c c0       	rjmp	.+88     	; 0x1a7e <fputc+0x6e>
    1a26:	22 ff       	sbrs	r18, 2
    1a28:	16 c0       	rjmp	.+44     	; 0x1a56 <fputc+0x46>
    1a2a:	46 81       	ldd	r20, Z+6	; 0x06
    1a2c:	57 81       	ldd	r21, Z+7	; 0x07
    1a2e:	24 81       	ldd	r18, Z+4	; 0x04
    1a30:	35 81       	ldd	r19, Z+5	; 0x05
    1a32:	42 17       	cp	r20, r18
    1a34:	53 07       	cpc	r21, r19
    1a36:	44 f4       	brge	.+16     	; 0x1a48 <fputc+0x38>
    1a38:	a0 81       	ld	r26, Z
    1a3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1a3c:	9d 01       	movw	r18, r26
    1a3e:	2f 5f       	subi	r18, 0xFF	; 255
    1a40:	3f 4f       	sbci	r19, 0xFF	; 255
    1a42:	31 83       	std	Z+1, r19	; 0x01
    1a44:	20 83       	st	Z, r18
    1a46:	8c 93       	st	X, r24
    1a48:	26 81       	ldd	r18, Z+6	; 0x06
    1a4a:	37 81       	ldd	r19, Z+7	; 0x07
    1a4c:	2f 5f       	subi	r18, 0xFF	; 255
    1a4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a50:	37 83       	std	Z+7, r19	; 0x07
    1a52:	26 83       	std	Z+6, r18	; 0x06
    1a54:	14 c0       	rjmp	.+40     	; 0x1a7e <fputc+0x6e>
    1a56:	8b 01       	movw	r16, r22
    1a58:	ec 01       	movw	r28, r24
    1a5a:	fb 01       	movw	r30, r22
    1a5c:	00 84       	ldd	r0, Z+8	; 0x08
    1a5e:	f1 85       	ldd	r31, Z+9	; 0x09
    1a60:	e0 2d       	mov	r30, r0
    1a62:	19 95       	eicall
    1a64:	89 2b       	or	r24, r25
    1a66:	e1 f6       	brne	.-72     	; 0x1a20 <fputc+0x10>
    1a68:	d8 01       	movw	r26, r16
    1a6a:	16 96       	adiw	r26, 0x06	; 6
    1a6c:	8d 91       	ld	r24, X+
    1a6e:	9c 91       	ld	r25, X
    1a70:	17 97       	sbiw	r26, 0x07	; 7
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	17 96       	adiw	r26, 0x07	; 7
    1a76:	9c 93       	st	X, r25
    1a78:	8e 93       	st	-X, r24
    1a7a:	16 97       	sbiw	r26, 0x06	; 6
    1a7c:	ce 01       	movw	r24, r28
    1a7e:	df 91       	pop	r29
    1a80:	cf 91       	pop	r28
    1a82:	1f 91       	pop	r17
    1a84:	0f 91       	pop	r16
    1a86:	08 95       	ret

00001a88 <__ultoa_invert>:
    1a88:	fa 01       	movw	r30, r20
    1a8a:	aa 27       	eor	r26, r26
    1a8c:	28 30       	cpi	r18, 0x08	; 8
    1a8e:	51 f1       	breq	.+84     	; 0x1ae4 <__ultoa_invert+0x5c>
    1a90:	20 31       	cpi	r18, 0x10	; 16
    1a92:	81 f1       	breq	.+96     	; 0x1af4 <__ultoa_invert+0x6c>
    1a94:	e8 94       	clt
    1a96:	6f 93       	push	r22
    1a98:	6e 7f       	andi	r22, 0xFE	; 254
    1a9a:	6e 5f       	subi	r22, 0xFE	; 254
    1a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a9e:	8f 4f       	sbci	r24, 0xFF	; 255
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	af 4f       	sbci	r26, 0xFF	; 255
    1aa4:	b1 e0       	ldi	r27, 0x01	; 1
    1aa6:	3e d0       	rcall	.+124    	; 0x1b24 <__ultoa_invert+0x9c>
    1aa8:	b4 e0       	ldi	r27, 0x04	; 4
    1aaa:	3c d0       	rcall	.+120    	; 0x1b24 <__ultoa_invert+0x9c>
    1aac:	67 0f       	add	r22, r23
    1aae:	78 1f       	adc	r23, r24
    1ab0:	89 1f       	adc	r24, r25
    1ab2:	9a 1f       	adc	r25, r26
    1ab4:	a1 1d       	adc	r26, r1
    1ab6:	68 0f       	add	r22, r24
    1ab8:	79 1f       	adc	r23, r25
    1aba:	8a 1f       	adc	r24, r26
    1abc:	91 1d       	adc	r25, r1
    1abe:	a1 1d       	adc	r26, r1
    1ac0:	6a 0f       	add	r22, r26
    1ac2:	71 1d       	adc	r23, r1
    1ac4:	81 1d       	adc	r24, r1
    1ac6:	91 1d       	adc	r25, r1
    1ac8:	a1 1d       	adc	r26, r1
    1aca:	20 d0       	rcall	.+64     	; 0x1b0c <__ultoa_invert+0x84>
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <__ultoa_invert+0x48>
    1ace:	68 94       	set
    1ad0:	3f 91       	pop	r19
    1ad2:	2a e0       	ldi	r18, 0x0A	; 10
    1ad4:	26 9f       	mul	r18, r22
    1ad6:	11 24       	eor	r1, r1
    1ad8:	30 19       	sub	r19, r0
    1ada:	30 5d       	subi	r19, 0xD0	; 208
    1adc:	31 93       	st	Z+, r19
    1ade:	de f6       	brtc	.-74     	; 0x1a96 <__ultoa_invert+0xe>
    1ae0:	cf 01       	movw	r24, r30
    1ae2:	08 95       	ret
    1ae4:	46 2f       	mov	r20, r22
    1ae6:	47 70       	andi	r20, 0x07	; 7
    1ae8:	40 5d       	subi	r20, 0xD0	; 208
    1aea:	41 93       	st	Z+, r20
    1aec:	b3 e0       	ldi	r27, 0x03	; 3
    1aee:	0f d0       	rcall	.+30     	; 0x1b0e <__ultoa_invert+0x86>
    1af0:	c9 f7       	brne	.-14     	; 0x1ae4 <__ultoa_invert+0x5c>
    1af2:	f6 cf       	rjmp	.-20     	; 0x1ae0 <__ultoa_invert+0x58>
    1af4:	46 2f       	mov	r20, r22
    1af6:	4f 70       	andi	r20, 0x0F	; 15
    1af8:	40 5d       	subi	r20, 0xD0	; 208
    1afa:	4a 33       	cpi	r20, 0x3A	; 58
    1afc:	18 f0       	brcs	.+6      	; 0x1b04 <__ultoa_invert+0x7c>
    1afe:	49 5d       	subi	r20, 0xD9	; 217
    1b00:	31 fd       	sbrc	r19, 1
    1b02:	40 52       	subi	r20, 0x20	; 32
    1b04:	41 93       	st	Z+, r20
    1b06:	02 d0       	rcall	.+4      	; 0x1b0c <__ultoa_invert+0x84>
    1b08:	a9 f7       	brne	.-22     	; 0x1af4 <__ultoa_invert+0x6c>
    1b0a:	ea cf       	rjmp	.-44     	; 0x1ae0 <__ultoa_invert+0x58>
    1b0c:	b4 e0       	ldi	r27, 0x04	; 4
    1b0e:	a6 95       	lsr	r26
    1b10:	97 95       	ror	r25
    1b12:	87 95       	ror	r24
    1b14:	77 95       	ror	r23
    1b16:	67 95       	ror	r22
    1b18:	ba 95       	dec	r27
    1b1a:	c9 f7       	brne	.-14     	; 0x1b0e <__ultoa_invert+0x86>
    1b1c:	00 97       	sbiw	r24, 0x00	; 0
    1b1e:	61 05       	cpc	r22, r1
    1b20:	71 05       	cpc	r23, r1
    1b22:	08 95       	ret
    1b24:	9b 01       	movw	r18, r22
    1b26:	ac 01       	movw	r20, r24
    1b28:	0a 2e       	mov	r0, r26
    1b2a:	06 94       	lsr	r0
    1b2c:	57 95       	ror	r21
    1b2e:	47 95       	ror	r20
    1b30:	37 95       	ror	r19
    1b32:	27 95       	ror	r18
    1b34:	ba 95       	dec	r27
    1b36:	c9 f7       	brne	.-14     	; 0x1b2a <__ultoa_invert+0xa2>
    1b38:	62 0f       	add	r22, r18
    1b3a:	73 1f       	adc	r23, r19
    1b3c:	84 1f       	adc	r24, r20
    1b3e:	95 1f       	adc	r25, r21
    1b40:	a0 1d       	adc	r26, r0
    1b42:	08 95       	ret

00001b44 <_exit>:
    1b44:	f8 94       	cli

00001b46 <__stop_program>:
    1b46:	ff cf       	rjmp	.-2      	; 0x1b46 <__stop_program>
